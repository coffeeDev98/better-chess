{"version":3,"sources":["packages/chess-es6/src/color.js","packages/chess-es6/src/piece_type.js","packages/chess-es6/src/flags.js","packages/chess-es6/src/fen.js","packages/chess-es6/src/move.js","packages/chess-es6/src/board_variation.js","packages/chess-es6/src/event_log.js","packages/chess-es6/src/piece.js","packages/chess-es6/src/chess.js","packages/chess-es6/src/move_context.js","packages/chess-es6/src/game.js","packages/chess-es6/src/linked_hash_map.js","utils/utils.ts","constants/chessMultiplayerMsgTypes.ts","hooks/useChess.tsx","utils/agoraUtils.ts","hooks/useAgora.tsx","hooks/useChessMultiplayer.tsx","hooks/useBoardEditor.tsx","components/_StyledComponent/StyledComponent.tsx","assets/images/sidePanelIcons/undoMove.svg","assets/images/sidePanelIcons/redoMove.svg","assets/images/sidePanelIcons/history.svg","assets/images/sidePanelIcons/resetBoard.svg","assets/images/sidePanelIcons/flipBoard.svg","assets/images/sidePanelIcons/loadGame.svg","assets/images/chessPieces/wK.svg","assets/images/chessPieces/wQ.svg","assets/images/chessPieces/wB.svg","assets/images/chessPieces/wR.svg","assets/images/chessPieces/wN.svg","assets/images/chessPieces/wP.svg","assets/images/chessPieces/bK.svg","assets/images/chessPieces/bQ.svg","assets/images/chessPieces/bB.svg","assets/images/chessPieces/bR.svg","assets/images/chessPieces/bN.svg","assets/images/chessPieces/bP.svg","assets/images/arrowLeft.svg","assets/images/arrowRight.svg","components/PGNViewer/PGNViewer.tsx","components/ChessInterface/ChessInterface.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Color","WHITE","BLACK","NONE","module","exports","PieceType","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","Flags","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","DISPLAY","Fen","fen","tokens","split","length","isValid","errorCode","errorMessage","ERRORS","isNaN","parseInt","test","rows","i","sumFields","previousWasNumber","k","error","0","1","2","3","4","5","6","7","8","9","10","DEFAULT_POSITION","DEFAULT_POSITION_FULL","require","Piece","Move","options","from","to","movedPiece","capturedPiece","promotionPiece","flags","boardVariation","isValidIndex","Error","color","BLACK_PAWN","WHITE_PAWN","this","isWildcard","algebraic","SQUARES_LOOKUP","san","toSan","undefined","other","copy","Object","create","prototype","sanText","trim","replace","moves","_generateMoves","calculateSan","WILDCARD_MOVE","createWildcardMove","len","indexOf","promotionPieceType","indexFrom","SQUARES","indexTo","type","move","output","disambiguator","getDisambiguator","toUpperCase","_algebraic","futureMoves","moveHistory","slice","selectedMoveHistoryIndex","makeMove","updatePositionCount","isUserMove","isCheck","isCheckmate","undoCurrentMove","concat","f","r","substring","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","16","17","18","19","20","21","22","23","32","33","34","35","36","37","38","39","48","49","50","51","52","53","54","55","64","65","66","67","68","69","70","71","80","81","82","83","84","85","86","87","96","97","98","99","100","101","102","103","112","113","114","115","116","117","118","119","PAWN_OFFSETS","PIECE_OFFSETS","ATTACKS","RAYS","SHIFTS","EventLog","MoveContext","BoardVariation","eventLog","id","parentVariation","parentLastMoveIndex","turn","enPassantSquare","moveNumber","plyCount","halfMoves","board","Array","apply","map","castlingEligibility","kings","positionCount","Map","intraMoveAnnotationSlots","isContinuation","validate","position","square","symbol","charAt","put","forSymbol","set","toFen","omitExtras","toString","s","_file","_rank","empty","castlingFlags","epFlags","join","piece","LOOKUP","sq","get","onlyAlgebraicSquares","onlyDestinationSquares","onlyForSquare","filter","us","them","castlingTo","castlingFrom","oldMoveContext","oldMove","_applyUndoMove","key","delete","timeTakenToMove","castling_to","castling_from","index","game","metadata","comment","isPuzzleSolution","createFromSan","add","createFromAlgebraic","shouldLog","replayToPlyNum","_selectMove","assign","nextMoveContext","next","childVariations","descendIntoVariation","currentVariation","descendIntoContinuation","currentMoveContext","newChildVariation","createFromParentVariation","skipUndoingCurrentMove","push","moveContext","splice","_applyMove","has","n","newMoves","moveConstructorOptions","WHITE_PROMOTION_PIECES","BLACK_PROMOTION_PIECES","forEach","onlyLegalMoves","secondRank","firstSquare","lastSquare","_addMove","j","offset","isAttacked","legalMoves","newMove","isKingAttacked","ambiguities","sameRank","sameFile","ambigFrom","ambigTo","difference","blocked","isStalemate","isInsufficientMaterial","isThreefoldRepetition","pieceCount","totalPieceCount","bishops","squareColor","sum","values","some","count","parent","resetIdCounter","copyFrom","variation","loadFen","_events","_lastTimerSnapshot","Date","now","timer","delta","event","_updateEventTimer","prev","freeze","WHITE_KNIGHT","WHITE_BISHOP","WHITE_ROOK","WHITE_QUEEN","WHITE_KING","BLACK_KNIGHT","BLACK_BISHOP","BLACK_ROOK","BLACK_QUEEN","BLACK_KING","Game","Chess","games","currentGame","currentGameNum","lastTimerSnapshot","replayLog","maxWidth","newlineChar","showMoveCursor","showHeaders","toPgn","pgnText","RegExp","pairs","_parsePgnGames","_parsePgnGame","headerText","gameText","addGame","selectGame","headMatch","prevHead","newHead","startNew","afterNew","lastOpen","validHead","results","checkedGame","headerBlockRegex","exec","lastIndexOf","pgnHeaderText","pgnGameText","POSSIBLE_RESULTS","_openNewVariation","innerVariation","boardVariations","_closeCurrentVariation","value","headers","header","prevMove","start","end","ss","glyph","needle","substr","someMove","search","makeMoveFromSan","ascendFromCurrentContinuation","ascendFromCurrentVariation","createContinuationFromSan","createVariationFromSan","history","isDraw","isGameOver","makeMoveFromAlgebraic","success","_updateSetup","remove","rewindToBeginning","LinkedHashMap","pgnHeaderPairs","createFromFen","pgn","lineSize","Math","max","floor","pgnLines","result","asciiLines","tallies","getKeyAtPosition","getValueAtPosition","outermostVariation","processVariation","pgnMoveNum","variationMoveString","justStartedVariation","justFinishedVariation","childVariation","variationMoves","resultHeader","currentWidth","pop","tempVariation","reverse","selectedMoveIndex","_map","_keys","addAll","v","COLUMNS","isObject","o","call","isString","validPositionObject","pos","ctor","prot","constructor","hasOwnProperty","isPlainObject","code","pieceCodeToFen","pieceCodeLetters","toLowerCase","objToFen","obj","currentRow","squeezeFenEmptySquares","fenToObj","chunks","expandFenEmptySquares","validFen","row","colIdx","BOARD_MOVE_UPDATE","BOARD_MOVE_UNDO","BOARD_FEN_UPDATE","BOARD_PGN_UPDATE","ChessES6","defaultFen","squareStyling","pieceSquare","targetSquare","backgroundColor","useChess","Agora","Multiplayer","useState","fromEntries","URLSearchParams","window","location","entries","chess","promotionModal","setPromotionModal","orientation","pendingMove","dropSquareStyle","squareStyles","boardPosition","undoMovesArray","state","setState","useEffect","console","log","load","in_check","inCheck","channel","on","message","jsonString","data","text","JSON","parse","onDrop","sourceSquare","json","load_pgn","loadPgn","parametersObj","undoArray","undoMove","showPromotionModal","checkedKingPos","keys","find","verbose","includes","fens","m","undo","updateBoardPgn","setBoardPosition","reset","flip","onMouseOverSquare","squaresToHighlight","highlightStyles","reduce","a","c","background","borderRadius","highlightSquare","onMouseOutSquare","currKingPieceSquare","removeHighlightSquare","onDragOverSquare","boxShadow","onSquareClick","updateBoard","onSquareRightClick","undoMoveObj","undoMoveMsg","redoMove","redoMoveObj","promotion","e","agoraUtils","messageParser","stringify","messageType","useAgora","setChannel","client","AgoraRTM","createInstance","playerMeta","uid","random","token","axios","then","res","login","newChannel","createChannel","playerLogin","memberId","sendChannelMessage","sendMessage","useChessMultiplayer","props","updateObject","updateBoardFen","emptyBoardFen","useBoardEditor","setFenPosition","fenString","clear","chessboardEditorSidePanelStyle","css","ScChessSidePanel","styled","div","editorMode","GamePlayPanel1","GamePlayPanel2","ScChessHistoryPanel","ScSidePanelNav","EditorSidePanel","chessboardEditorModeStyle","ScPromotionModal","ScChessInterface","dimension","PGNViewer","mode","pgnConfig","timerTime","startPlay","item","showResult","boardSize","showFen","showCoords","figurine","movesHeight","mutationCallback","mutationsList","observer","document","getElementById","click","innerHTML","movesDiv","MutationObserver","observe","attributes","childList","subtree","useLayoutEffect","pgnView","pgnEdit","pgnPrint","areEqual","prevProps","nextProps","React","memo","SidePanelMenu","setSidePanelSection","onClick","src","undoIcon","alt","redoIcon","historyIcon","resetIcon","flipIcon","onChange","reader","FileReader","onload","target","pgnGamesArray","startRule","tags","FEN","files","readAsText","loadIcon","ChessInterface","firstChild","lastChild","setDimension","sidePanelSection","boardEditor","updateDimensions","addEventListener","removeEventListener","boardContainerDiv","querySelector","firstElementChild","lastElementChild","classList","setAttribute","clientWidth","customPieces","wK","squareWidth","isDragging","style","width","height","wQ","wB","wR","wN","wP","bK","bQ","bB","bR","bN","bP","chessboardConfig","dropOffBoard","draggable","lightSquareStyle","darkSquareStyle","pieces","boardStyle","getPosition","sparePieces","renderPromotionModal","className","htmlFor","name","arrowLeft","arrowRight","renderSidePanel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b3d1eaf9.chunk.js","sourcesContent":["'use strict';\n\n// NOTE: tried having a Color class, with a corresponding ColorType class, and utility methods\n// on the Color class such as swap(), isWhite(), isBlack(), etc.  Similar to the Piece and PieceType\n// classes.  But doing so caused a performance hit (added ~1 sec to the Dirty PGN test)\n\n// NOTE: also tried having Color.WHITE = true, and Color.BLACK = false, so as to simplify\n// color comparisons to e.g. \"if (this.turn)\" instead of \"if (this.turn === Color.WHITE)\", and\n// also simplify color swapping to \"us = !them\" instead of \"us = them === Color.WHITE ? Color.Black : Color.WHITE\").\n// But doing caused a performance hit (added ~300 ms to the Dirty PGN test)\n\nclass Color {}\n\nColor.WHITE = 'w';\nColor.BLACK = 'b';\nColor.NONE = '~';\n\nmodule.exports = Color;","'use strict';\n\nclass PieceType {};\n\nPieceType.NONE   = '.';\nPieceType.PAWN   = 'p';\nPieceType.KNIGHT = 'n';\nPieceType.BISHOP = 'b';\nPieceType.ROOK   = 'r';\nPieceType.QUEEN  = 'q';\nPieceType.KING   = 'k';\n\nmodule.exports = PieceType;","'use strict';\n\nclass Flags {};\n\nFlags.NORMAL = 1;\nFlags.CAPTURE = 2;\nFlags.BIG_PAWN = 4;  // a pawn moving two spaces\nFlags.EP_CAPTURE = 8;\nFlags.PROMOTION = 16;\nFlags.KSIDE_CASTLE = 32;\nFlags.QSIDE_CASTLE = 64;\nFlags.DISPLAY = {\n    [ Flags.NORMAL       ]: 'n',\n    [ Flags.CAPTURE      ]: 'c',\n    [ Flags.BIG_PAWN     ]: 'b',\n    [ Flags.EP_CAPTURE   ]: 'e',\n    [ Flags.PROMOTION    ]: 'p',\n    [ Flags.KSIDE_CASTLE ]: 'k',\n    [ Flags.QSIDE_CASTLE ]: 'q'\n};\n\nmodule.exports = Flags;","'use strict';\n\nclass Fen {\n\n    static validate(fen /* string */) {\n        // 1st criterion: 6 space-separated fields?\n        let tokens = fen.split(/\\s+/);\n        if (tokens.length !== 6) {\n            return { isValid: false, errorCode: 1, errorMessage: Fen.ERRORS[1] };\n        }\n\n        // 2nd criterion: move number field is a integer value > 0?\n        if (isNaN(tokens[5]) || (parseInt(tokens[5], 10) <= 0)) {\n            return { isValid: false, errorCode: 2, errorMessage: Fen.ERRORS[2] };\n        }\n\n        // 3rd criterion: half move counter is an integer >= 0?\n        if (isNaN(tokens[4]) || (parseInt(tokens[4], 10) < 0)) {\n            return { isValid: false, errorCode: 3, errorMessage: Fen.ERRORS[3] };\n        }\n\n        // 4th criterion: 4th field is a valid e.p.-string?\n        if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n            return { isValid: false, errorCode: 4, errorMessage: Fen.ERRORS[4] };\n        }\n\n        // 5th criterion: 3th field is a valid castle-string?\n        if( !/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n            return { isValid: false, errorCode: 5, errorMessage: Fen.ERRORS[5] };\n        }\n\n        // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n        if (!/^(w|b)$/.test(tokens[1])) {\n            return { isValid: false, errorCode: 6, errorMessage: Fen.ERRORS[6] };\n        }\n\n        // 7th criterion: 1st field contains 8 rows?\n        const rows = tokens[0].split('/');\n        if (rows.length !== 8) {\n            return { isValid: false, errorCode: 7, errorMessage: Fen.ERRORS[7] };\n        }\n\n        // 8th criterion: every row is valid?\n        for (let i = 0; i < rows.length; i++) {\n            // check for right sum of fields AND not two numbers in succession\n            let sumFields = 0;\n            let previousWasNumber = false;\n\n            for (let k = 0; k < rows[i].length; k++) {\n                if (!isNaN(rows[i][k])) {\n                    if (previousWasNumber) {\n                        return { isValid: false, errorCode: 8, errorMessage: Fen.ERRORS[8]};\n                    }\n                    sumFields += parseInt(rows[i][k], 10);\n                    previousWasNumber = true;\n                } else {\n                    if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n                        return { isValid: false, errorCode: 9, errorMessage: Fen.ERRORS[9]};\n                    }\n                    sumFields += 1;\n                    previousWasNumber = false;\n                }\n            }\n            if (sumFields !== 8) {\n                return { isValid: false, errorCode: 10, errorMessage: Fen.ERRORS[10]};\n            }\n        }\n\n        // everything is okay!\n        return { isValid: true, errorCode: 0, error: Fen.ERRORS[0] };\n    }\n};\n\nFen.ERRORS =  {\n     0: 'No errors.',\n     1: 'FEN string must contain six space-delimited fields.',\n     2: '6th field (move number) must be a positive integer.',\n     3: '5th field (half move counter) must be a non-negative integer.',\n     4: '4th field (en-passant square) is invalid.',\n     5: '3rd field (castling availability) is invalid.',\n     6: '2nd field (side to move) is invalid.',\n     7: '1st field (piece positions) does not contain 8 \\'/\\'-delimited rows.',\n     8: '1st field (piece positions) is invalid [consecutive numbers].',\n     9: '1st field (piece positions) is invalid [invalid piece].',\n    10: '1st field (piece positions) is invalid [row too large].'\n};\n\nFen.DEFAULT_POSITION      = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\nFen.DEFAULT_POSITION_FULL = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\nmodule.exports = Fen;\n","'use strict';\n\nconst Color = require('./../src/color');\nconst PieceType = require('./../src/piece_type');\nconst Piece = require('./../src/piece');\nconst Flags = require('./../src/flags');\n\n// TODO 8.17.15 I'm thinking it might make more sense to just add MoveContext and also MoveMetadata\n// as member hash variables of this here class\n\nclass Move {\n\n    // default constructor\n    //\n    // every Move object is meant to be full-fledged enough to be usable in all places for all needs.\n    constructor(options) {    \n        let {\n            // required\n            from,            // int            -- the 0x88 index for the departure square of this move\n            to,              // int            -- the 0x88 index for the destination square of this move  \n            movedPiece,      // Piece          -- the piece being moved \n       \n            // optional       \n            capturedPiece,   // Piece          -- the piece, if any, at the destination square\n            promotionPiece,  // Piece          -- the piece being promoted to.\n            flags,           // int            -- bitwise flags describing annotative state about this move;  defaults to Flags.NORMAL\n\n            boardVariation   // BoardVariation -- if passed in, then caller is asking us to calculate the given move's SAN notation, e.g. \"Rx7#\"\n        } = options;\n\n        if (! Move.isValidIndex(from) || ! Move.isValidIndex(to)) {\n            throw new Error(`illegal 0x88 index passed into new Move(): (from, to) = ${from}, ${to}`);\n        }\n\n        if (!flags) {\n            flags = Flags.NORMAL;\n        }\n\n        if (promotionPiece) {\n            flags |= Flags.PROMOTION;\n        }\n\n        if (!capturedPiece && flags === Flags.EP_CAPTURE) {\n            capturedPiece = movedPiece.color === Color.WHITE ? Piece.BLACK_PAWN : Piece.WHITE_PAWN;\n        }\n\n        this.from = from;\n        this.to = to;\n        this.movedPiece = movedPiece;\n        this.capturedPiece = capturedPiece;\n        this.flags = flags;\n        this.promotionPiece = promotionPiece;\n        this.isWildcard = false;\n\n        this.algebraic = Move.SQUARES_LOOKUP[this.from] + \"-\" +  Move.SQUARES_LOOKUP[this.to];  // e.g. \"d2-d4\", \"h7-h8\"\n\n        this.san = boardVariation ? Move.toSan(this, boardVariation) : undefined;\n    }\n\n    // copy constructor\n    static copyFrom(other /* Move object */) {\n        let copy = Object.create(Move.prototype);\n\n        copy.from           = other.from;            // int\n        copy.to             = other.to;              // int\n        copy.movedPiece     = other.movedPiece;      // Piece, which is a frozen object, so it's safe to reuse\n        copy.capturedPiece  = other.capturedPiece;   // Piece, which is a frozen object, so it's safe to reuse\n        copy.flags          = other.flags;           // int\n        copy.san            = other.san;             // string\n        copy.promotionPiece = other.promotionPiece;  // Piece, which is a frozen object, so it's safe to reuse\n        copy.isWildcard     = other.isWildcard;      // boolean\n\n        copy.algebraic = other.algebraic;       // debugging move text, e.g. \"Ke7-e8\"\n\n        return copy;\n    }\n\n    // SAN constructor\n    static createFromSan(sanText /* string, e.g. \"Rxa7\" or \"e8=Q#\" */, boardVariation /* BoardVariation object */) {\n        if (!sanText) {\n            return false;\n        }\n\n        sanText = sanText.trim().replace(/[+#?!=]+$/,'');\n        const moves = boardVariation._generateMoves({ calculateSan: true });\n\n        if (sanText === Move.WILDCARD_MOVE) {\n            return Move.createWildcardMove(boardVariation);\n        } else {\n            for (let i = 0, len = moves.length; i < len; i++) {\n                // prefix match, so as to ignore move decorations, e.g. \"Nf3+?!\"\n                if (moves[i].san.indexOf(sanText) === 0) {\n                    return moves[i];\n                }\n            }\n        }\n\n        return false;\n    }\n\n    static createFromAlgebraic(\n        from /* e.g. 'a4', 'b3' */,\n        to   /* e.g. 'a4', 'b3' */,\n        boardVariation /* BoardVariation object */,\n        promotionPieceType = PieceType.QUEEN)\n    {\n        if (!from || !to) {\n            return false;\n        }\n\n        const indexFrom = Move.SQUARES[from];\n        const indexTo = Move.SQUARES[to];\n\n        const moves = boardVariation._generateMoves({ calculateSan: true });\n        for (let i = 0, len = moves.length; i < len; i++) {\n            // prefix match, so as to ignore move decorations, e.g. \"Nf3+?!\"\n            if (moves[i].from === indexFrom &&\n                moves[i].to   === indexTo &&\n                (!moves[i].promotionPiece || moves[i].promotionPiece.type === promotionPieceType))\n            {\n                return moves[i];\n            }\n        }\n\n        return false;\n    }\n\n    // Wildcard Move constructor\n    static createWildcardMove(boardVariation /* BoardVariation object */) {\n        const moves = boardVariation._generateMoves();\n        if (moves.length == 0) {\n            return null;\n        } else {  // the move doesn't matter, so we just pick the first legal move we found\n            let move = moves[0];\n            move.isWildcard = true;\n            return move;\n        }\n    }\n\n    toString() {\n        return this.san;\n    }\n\n    static isValidIndex(i /* an 0x88 board index value */) {\n        return (\n            (  0 <= i && i <=   7) ||\n            ( 16 <= i && i <=  23) ||\n            ( 32 <= i && i <=  39) ||\n            ( 48 <= i && i <=  55) ||\n            ( 64 <= i && i <=  71) ||\n            ( 80 <= i && i <=  87) ||\n            ( 96 <= i && i <= 103) ||\n            (112 <= i && i <= 119)\n        );\n    }\n\n    // convert an already created Move object from its 0x88 coordinates to Standard Algebraic Notation (SAN)\n    static toSan(\n        move,  /* Move object */\n        boardVariation  /* BoardVariation object */\n    ) {\n        if (move.isWildcard) {\n            return Move.WILDCARD_MOVE;\n        }\n\n        let output = '';\n\n        if (move.flags & Flags.KSIDE_CASTLE) {\n            output = 'O-O';\n        } else if (move.flags & Flags.QSIDE_CASTLE) {\n            output = 'O-O-O';\n        } else {\n            let disambiguator = boardVariation.getDisambiguator(move);\n\n            if (move.movedPiece.type !== PieceType.PAWN) {\n                output += move.movedPiece.type.toUpperCase() + disambiguator;\n            }\n\n            if (move.flags & (Flags.CAPTURE | Flags.EP_CAPTURE)) {\n                if (move.movedPiece.type === PieceType.PAWN) {\n                    output += Move._algebraic(move.from)[0];\n                }\n                output += 'x';\n            }\n\n            output += Move._algebraic(move.to);\n\n            if (move.flags & Flags.PROMOTION) {\n                output += '=' + move.promotionPiece.type.toUpperCase();\n            }\n        }\n\n        // TODO this futureMoves logic is duplicated in BoardVariation._generateMoves();\n        // might be good candidate for abstraction behind would-be-named MoveHistory object\n\n        // makeMove() below is destructive to all future moves ahead \n        // of our current move pointer, so we save a copy here\n        const futureMoves = boardVariation.moveHistory.slice(boardVariation.selectedMoveHistoryIndex+1);\n\n        boardVariation.makeMove(move, null, {}, { updatePositionCount: false, isUserMove: false });\n        if (boardVariation.isCheck()) {\n            if (boardVariation.isCheckmate()) {\n                output += '#';\n            } else {\n                output += '+';\n            }\n        }\n\n        boardVariation.undoCurrentMove({ updatePositionCount: false });\n\n        // restore our previously saved future moves\n        boardVariation.moveHistory = boardVariation.moveHistory.concat(futureMoves);\n\n        return output;\n    }\n\n    // TODO:  duplicated code from BoardVariation.js\n    static _algebraic(i) {\n        const f = i & 15;\n        const r = i >> 4;\n        return 'abcdefgh'.substring(f,f+1) + '87654321'.substring(r,r+1);\n    }\n};\n\n// https://chessprogramming.wikispaces.com/0x88 \n// Note:  The values we use are flipped from the documented convention.\n// \n//             (octal)                              (decimal)\n//\n//    | a  b  c  d  e  f  g  h           | a   b   c   d   e   f   g   h\n//  ----------------------------       ------------------------------------\n//  8 | 00 01 02 03 04 05 06 07        8 | 0   1   2   3   4   5   6   7\n//  7 | 10 11 12 13 14 15 16 17        7 | 16  17  18  19  20  21  22  23\n//  6 | 20 21 22 23 24 25 26 27        6 | 32  33  34  35  36  37  38  39\n//  5 | 30 31 32 33 34 35 36 37        5 | 48  49  50  51  52  53  54  55\n//  4 | 40 41 42 43 44 45 46 47   ==   4 | 64  65  66  67  68  69  70  71\n//  3 | 50 51 52 53 54 55 56 57        3 | 80  81  82  83  84  85  86  87\n//  2 | 60 61 62 63 64 65 66 67        2 | 96  97  98  99  100 101 102 103\n//  1 | 70 71 72 73 74 75 76 77        1 | 112 113 114 115 116 117 118 119\n//\nMove.SQUARES = {\n    a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n    a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n    a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n    a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n    a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n    a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n    a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n};\n\nMove.SQUARES_LOOKUP = {\n      0:  'a8',   1: 'b8',   2: 'c8',   3: 'd8',   4: 'e8',   5: 'f8',   6: 'g8',   7: 'h8',\n     16:  'a7',  17: 'b7',  18: 'c7',  19: 'd7',  20: 'e7',  21: 'f7',  22: 'g7',  23: 'h7',\n     32:  'a6',  33: 'b6',  34: 'c6',  35: 'd6',  36: 'e6',  37: 'f6',  38: 'g6',  39: 'h6',\n     48:  'a5',  49: 'b5',  50: 'c5',  51: 'd5',  52: 'e5',  53: 'f5',  54: 'g5',  55: 'h5',\n     64:  'a4',  65: 'b4',  66: 'c4',  67: 'd4',  68: 'e4',  69: 'f4',  70: 'g4',  71: 'h4',\n     80:  'a3',  81: 'b3',  82: 'c3',  83: 'd3',  84: 'e3',  85: 'f3',  86: 'g3',  87: 'h3',\n     96:  'a2',  97: 'b2',  98: 'c2',  99: 'd2', 100: 'e2', 101: 'f2', 102: 'g2', 103: 'h2',\n    112:  'a1', 113: 'b1', 114: 'c1', 115: 'd1', 116: 'e1', 117: 'f1', 118: 'g1', 119: 'h1'\n};\n\nMove.PAWN_OFFSETS = {\n    [Color.WHITE]: [-16, -32, -17, -15],\n    [Color.BLACK]: [ 16,  32,  17,  15]\n};\n\nMove.PIECE_OFFSETS = {\n    [PieceType.KNIGHT]: [-18, -33, -31, -14,  18, 33, 31, 14],\n    [PieceType.BISHOP]: [-17, -15,  17,  15],\n    [PieceType.ROOK]:   [-16,   1,  16,  -1],\n    [PieceType.QUEEN]:  [-17, -16, -15,   1,  17, 16, 15, -1],\n    [PieceType.KING]:   [-17, -16, -15,   1,  17, 16, 15, -1]\n};\n\n// Move.{ATTACKS,RAYS,SHIFTS} are only used by BoardVariation.isAttacked(color, square)\nMove.ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0,24, 0, 0, 0, 0, 0, 0,20, 0,\n    0, 20, 0, 0, 0, 0, 0,24, 0, 0, 0, 0, 0,20, 0, 0,\n    0,  0,20, 0, 0, 0, 0,24, 0, 0, 0, 0,20, 0, 0, 0,\n    0,  0, 0,20, 0, 0, 0,24, 0, 0, 0,20, 0, 0, 0, 0,\n    0,  0, 0, 0,20, 0, 0,24, 0, 0,20, 0, 0, 0, 0, 0,\n    0,  0, 0, 0, 0,20, 2,24, 2,20, 0, 0, 0, 0, 0, 0,\n    0,  0, 0, 0, 0, 2,53,56,53, 2, 0, 0, 0, 0, 0, 0,\n    24,24,24,24,24,24,56, 0,56,24,24,24,24,24,24, 0,\n    0,  0, 0, 0, 0, 2,53,56,53, 2, 0, 0, 0, 0, 0, 0,\n    0,  0, 0, 0, 0,20, 2,24, 2,20, 0, 0, 0, 0, 0, 0,\n    0,  0, 0, 0,20, 0, 0,24, 0, 0,20, 0, 0, 0, 0, 0,\n    0,  0, 0,20, 0, 0, 0,24, 0, 0, 0,20, 0, 0, 0, 0,\n    0,  0,20, 0, 0, 0, 0,24, 0, 0, 0, 0,20, 0, 0, 0,\n    0, 20, 0, 0, 0, 0, 0,24, 0, 0, 0, 0, 0,20, 0, 0,\n    20 ,0, 0, 0, 0, 0, 0,24, 0, 0, 0, 0, 0, 0,20, 0\n];\nMove.RAYS = [\n    17, 0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n    0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n    0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n    0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n    0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n    1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n    0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n    0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n    0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n    0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n    -15,0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17, 0\n];\nMove.SHIFTS = { \n    [PieceType.PAWN]:   0, \n    [PieceType.KNIGHT]: 1, \n    [PieceType.BISHOP]: 2, \n    [PieceType.ROOK]:   3, \n    [PieceType.QUEEN]:  4, \n    [PieceType.KING]:   5\n};\n\n// technically, this is a NULL move, but I'm slightly deviating from the PGN standard \n// (http://www.enpassant.dk/chess/palview/manual/pgn.htm), because I'm treating a NULL \n// move as essentially a wildcard move:  \"any move will do, so just pick the first legal\n// move you find\".\n//\nMove.WILDCARD_MOVE = '--';\n\nmodule.exports = Move;\n","'use strict';\n\nconst Color = require('./../src/color');\nconst EventLog = require('./../src/event_log');\nconst Fen = require('./../src/fen');\nconst Flags = require('./../src/flags');\nconst Move = require('./../src/move');\nconst MoveContext = require('./../src/move_context');\nconst Piece = require('./../src/piece');\nconst PieceType = require('./../src/piece_type');\n\nclass BoardVariation {\n\n    constructor(eventLog) {\n        this.id = BoardVariation.id++;\n\n        this.parentVariation = null;\n        this.parentLastMoveIndex = null;\n        this.turn = Color.WHITE;\n        this.enPassantSquare = -1;  // the 0x88 index of the current en passant capture square, if any\n        this.moveNumber = 1;        // logical move number\n        this.plyCount = 0;          // physical move number\n        this.halfMoves = 0;         // halfMoves != plyCount, but the number of ply since last capture or pawn advancement\n\n        this.board = Array.apply(null, new Array(128)).map(() => (Piece.NONE)); // an array of Pieces, just { color, type }.  Blank squares are left as Piece.NONE.\n                                                                                // Conceptually, this array is 128 elements long, per the 0x88 system.\n\n        this.castlingEligibility = {     // castling eligibility flags\n            [Color.WHITE]: Flags.KSIDE_CASTLE & Flags.QSIDE_CASTLE,\n            [Color.BLACK]: Flags.KSIDE_CASTLE & Flags.QSIDE_CASTLE\n        };\n        this.kings = {\n            [Color.WHITE]: -1,   // the 0x88 index of the white King's current location\n            [Color.BLACK]: -1    // the 0x88 index of the black King's current location\n        };\n\n        this.moveHistory = [];   // array of MoveContext objects...\n        this.selectedMoveHistoryIndex = -1;\n\n        this.positionCount = new Map();  // a mapping from FEN positional string to frequency count;  used in isThreefoldRepetition()\n\n        this.intraMoveAnnotationSlots = [];  // an array of arrays, used for storing PGN comments and PGN Glyphs\n\n        this.eventLog = eventLog;  // EventLog for tracking all player interactions at the Game.js level\n\n        this.isContinuation = false;\n    }\n\n    // copy constructor\n    static copyFrom(other /* BoardVariation object */) {\n        const copy = Object.create(BoardVariation.prototype);\n\n        // Yes, copying things in Javascript is not straightforward.  http://stackoverflow.com/questions/14443357/primitive-types-reference-types-in-javascript\n\n        copy.id = BoardVariation.id++;\n        copy.parentVariation = other.parentVariation;  // yes this should remain a pointer;  shouldn't be a full clone\n        copy.parentLastMoveIndex = other.parentLastMoveIndex;\n        copy.turn = other.turn;\n        copy.enPassantSquare = other.enPassantSquare;\n\n        copy.moveNumber = other.moveNumber;\n        copy.plyCount = other.plyCount;\n        copy.halfMoves = other.halfMoves;\n\n        copy.board = other.board.slice(0);  // http://stackoverflow.com/questions/15722433/javascript-copy-array-to-new-array\n        copy.castlingEligibility = {\n            [Color.WHITE]: other.castlingEligibility[Color.WHITE],\n            [Color.BLACK]: other.castlingEligibility[Color.BLACK]\n        };\n        copy.kings = {\n            [Color.WHITE]: other.kings[Color.WHITE],\n            [Color.BLACK]: other.kings[Color.BLACK]\n        };\n        copy.moveHistory = other.moveHistory.slice(0);\n        copy.selectedMoveHistoryIndex = other.selectedMoveHistoryIndex;\n\n        copy.positionCount = new Map(other.positionCount);\n\n        copy.intraMoveAnnotationSlots = other.intraMoveAnnotationSlots.slice(0);\n\n        copy.eventLog = other.eventLog;\n\n        return copy;\n    }\n\n    // branching constructor:  we're forking our game tree by building a new BoardVariation from the given BoardVariation\n    static createFromParentVariation(parent /* BoardVariation object */, options = {}) {\n        options = Object.assign({}, {\n            isContinuation: false,\n            resetIdCounter: false,\n            skipUndoingCurrentMove: false\n        }, options);\n\n        const copy = BoardVariation.copyFrom(parent);\n\n        // if this is a PGN variations, then undo the previous move, by definition\n        if (! options.skipUndoingCurrentMove && ! options.isContinuation) {\n            copy.undoCurrentMove();\n        }\n\n        if (options.resetIdCounter) {\n            BoardVariation.id = 0;\n        }\n\n        copy.id = BoardVariation.id++;\n        copy.parentLastMoveIndex = parent.selectedMoveHistoryIndex;\n        copy.parentVariation = parent;\n        copy.isContinuation = options.isContinuation;\n\n        // clear out the existing history\n        copy.moveHistory = [];\n        copy.selectedMoveHistoryIndex = -1;\n        copy.intraMoveAnnotationSlots = [];\n\n        return copy;\n    }\n\n    static createFromFen(fen /* string */, eventLog = new EventLog() /* EventLog.js object */ ) {\n        const variation = new BoardVariation(eventLog);\n        if (variation.loadFen(fen)) {\n            return variation;\n        } else {\n            return false;\n        }\n    }\n\n    loadFen(fen /* string */) {\n        if (! Fen.validate(fen).isValid) {\n            return false;\n        }\n\n        this.id = BoardVariation.id++;  // loading from fen should (probably) force a new variation ID\n        this.board = Array.apply(null, new Array(128)).map(() => (Piece.NONE));\n\n        const tokens = fen.split(/\\s+/);\n        const position = tokens[0];\n        let square = 0;\n\n        for (let i = 0; i < position.length; i++) {\n            const symbol = position.charAt(i);\n\n            if (symbol === '/') {\n                square += 8;\n            } else if ('0123456789'.indexOf(symbol) !== -1) {\n                square += parseInt(symbol, 10);\n            } else {\n                this.put(Piece.forSymbol(symbol), BoardVariation._algebraic(square));\n                square++;\n            }\n        }\n\n        this.turn = tokens[1];\n\n        if (tokens[2].indexOf('K') > -1) {\n            this.castlingEligibility[Color.WHITE] |= Flags.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('Q') > -1) {\n            this.castlingEligibility[Color.WHITE] |= Flags.QSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('k') > -1) {\n            this.castlingEligibility[Color.BLACK] |= Flags.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('q') > -1) {\n            this.castlingEligibility[Color.BLACK] |= Flags.QSIDE_CASTLE;\n        }\n\n        this.enPassantSquare = (tokens[3] === '-') ? -1 : Move.SQUARES[tokens[3]];\n        this.halfMoves = parseInt(tokens[4], 10);\n        this.moveNumber = parseInt(tokens[5], 10);\n\n        this.positionCount.set(this.toFen({ omitExtras: true }), 1);\n\n        return true;\n    }\n\n    static _file(i) {\n        return i & 15;\n    }\n    static _rank(i) {\n        return i >> 4;\n    }\n    static _algebraic(i) {\n        const f = BoardVariation._file(i);\n        const r = BoardVariation._rank(i);\n        return 'abcdefgh'.substring(f,f+1) + '87654321'.substring(r,r+1);\n    }\n\n    inspect() {  // for more succinct console.log() output\n        return this.toString();\n    }\n\n    toString() {\n        let s = '   +------------------------+' + (this.turn === Color.BLACK ? '  <-- ' + this.plyCount : '') + '\\n';\n        for (let i = Move.SQUARES.a8; i <= Move.SQUARES.h1; i++) {\n            // display the rank\n            if (BoardVariation._file(i) === 0) {\n                s += ' ' + '87654321'[BoardVariation._rank(i)] + ' |';\n            }\n\n            s += ' ' + this.board[i] + ' ';\n\n            if ((i + 1) & 0x88) {\n                s += '|\\n';\n                i += 8;\n            }\n        }\n        s += '   +------------------------+' + (this.turn === Color.WHITE ? '  <-- '  + this.plyCount : '') + '\\n';\n        s += '     a  b  c  d  e  f  g  h\\n';\n\n        return s;\n    }\n\n    toFen(options = {\n        omitExtras: false\n    }) {\n        let empty = 0;\n        let fen = '';\n\n        for (let i = Move.SQUARES.a8; i <= Move.SQUARES.h1; i++) {\n            if (this.board[i] === Piece.NONE) {\n                empty++;\n            } else {\n                if (empty > 0) {\n                    fen += empty;\n                    empty = 0;\n                }\n                fen += this.board[i];\n            }\n\n            if ((i + 1) & 0x88) {\n                if (empty > 0) {\n                    fen += empty;\n                }\n\n                if (i !== Move.SQUARES.h1) {\n                    fen += '/';\n                }\n\n                empty = 0;\n                i += 8;\n            }\n        }\n\n        if (options.omitExtras) {\n            return fen;\n        }\n\n        let castlingFlags = '';\n        if (this.castlingEligibility[Color.WHITE] & Flags.KSIDE_CASTLE) { castlingFlags += 'K'; }\n        if (this.castlingEligibility[Color.WHITE] & Flags.QSIDE_CASTLE) { castlingFlags += 'Q'; }\n        if (this.castlingEligibility[Color.BLACK] & Flags.KSIDE_CASTLE) { castlingFlags += 'k'; }\n        if (this.castlingEligibility[Color.BLACK] & Flags.QSIDE_CASTLE) { castlingFlags += 'q'; }\n\n        // do we have an empty castling flag?\n        castlingFlags = castlingFlags || '-';\n        const epFlags = (this.enPassantSquare === -1) ? '-' : BoardVariation._algebraic(this.enPassantSquare);\n\n        return [fen, this.turn, castlingFlags, epFlags, this.halfMoves, this.moveNumber].join(' ');\n    }\n\n    put(piece /* Piece, e.g. Piece.WHITE_ROOK */, square /* string, e.g. 'h8' */) {\n        // no event logging;  this method is user facing, but is not involved with puzzle interaction\n\n        if (! (piece in Piece.LOOKUP && (square in Move.SQUARES))) {\n            return false;\n        }\n\n        const sq = Move.SQUARES[square];\n\n        // don't let the user place more than one king\n        if (piece.type == PieceType.KING &&\n            ! (this.kings[piece.color] === -1 || this.kings[piece.color] === sq)) {\n            return false;\n        }\n\n        this.board[sq] = piece;\n\n        if (piece.type === PieceType.KING) {\n            this.kings[piece.color] = sq;\n        }\n\n        return true;\n    }\n\n    get(square /* string, e.g. 'a1' */) {\n        if (! square in Move.SQUARES) {\n            return false;\n        }\n\n        return this.board[ Move.SQUARES[square] ];\n    }\n\n    remove(square /* string, e.g. 'a1' */) {\n        // no event logging;  this method is user facing, but is not involved with puzzle interaction\n\n        if (! square in Move.SQUARES) {\n            return false;\n        }\n\n        const piece = this.get(square);\n        this.board[ Move.SQUARES[square] ] = Piece.NONE;\n\n        if (piece.type === PieceType.KING) {\n            this.kings[piece.color] = -1;\n        }\n\n        return piece;\n    }\n\n    moves(options = {\n        onlyAlgebraicSquares: false,\n        onlyDestinationSquares: false,\n        onlyForSquare: undefined\n    }) {\n        // no event logging;  this method is user facing, but is not involved with puzzle interaction\n\n        let moves;\n        if (options.onlyAlgebraicSquares) {\n            moves = this._generateMoves({ calculateSan: false }).map(move => move.algebraic);\n\n            if (options.onlyForSquare) {\n                moves = moves.filter(move => move.substring(0,2) === options.onlyForSquare);\n            }\n\n            if (options.onlyDestinationSquares) {\n                moves = moves.map(move => move.substring(3,5));\n            }\n        } else {\n            moves = this._generateMoves({ calculateSan: true }).map(move => move.san);\n        }\n\n        return moves;\n    };\n\n    _applyMove(move /* Move object from move.js */) {\n        const us = this.turn;\n        const them = us === Color.WHITE ? Color.BLACK : Color.WHITE;\n\n        this.board[move.to] = this.board[move.from];\n        this.board[move.from] = Piece.NONE;\n\n        // if ep capture, remove the captured pawn\n        if (move.flags & Flags.EP_CAPTURE) {\n            if (this.turn === Color.BLACK) {\n                this.board[move.to - 16] = Piece.NONE;\n            } else {\n                this.board[move.to + 16] = Piece.NONE;\n            }\n        }\n\n        // if pawn promotion, replace with new piece\n        if (move.flags & Flags.PROMOTION) {\n            this.board[move.to] = move.promotionPiece;\n        }\n\n        // if we moved the king\n        if (move.movedPiece.type === PieceType.KING) {\n            this.kings[move.movedPiece.color] = move.to;\n            // if we castled, move the rook next to the king\n            if (move.flags & Flags.KSIDE_CASTLE) {\n                const castlingTo = move.to - 1;\n                const castlingFrom = move.to + 1;\n\n                this.board[castlingTo] = this.board[castlingFrom];\n                this.board[castlingFrom] = Piece.NONE;\n            } else if (move.flags & Flags.QSIDE_CASTLE) {\n                const castlingTo = move.to + 1;\n                const castlingFrom = move.to - 2;\n\n                this.board[castlingTo] = this.board[castlingFrom];\n                this.board[castlingFrom] = Piece.NONE;\n            }\n            // turn off castling\n            this.castlingEligibility[us] = 0;\n        }\n\n        // turn off castling if we move a rook\n        if (this.castlingEligibility[us]) {\n            if (us === Color.WHITE) {\n                if (move.from ===  112 /* a1 */ && (this.castlingEligibility[us] & Flags.QSIDE_CASTLE)) {\n                    this.castlingEligibility[us] ^= Flags.QSIDE_CASTLE;\n                } else if (move.from === 119 /* a8 */ && (this.castlingEligibility[us] & Flags.KSIDE_CASTLE)) {\n                    this.castlingEligibility[us] ^= Flags.KSIDE_CASTLE;\n                }\n            } else {\n                if (move.from === 0 /* a8 */ && (this.castlingEligibility[us] & Flags.QSIDE_CASTLE)) {\n                    this.castlingEligibility[us] ^= Flags.QSIDE_CASTLE;\n                } else if (move.from === 7 /* h8 */ && (this.castlingEligibility[us] & Flags.KSIDE_CASTLE)) {\n                    this.castlingEligibility[us] ^= Flags.KSIDE_CASTLE;\n                }\n            }\n        }\n\n        // turn off castling if we capture a rook\n        if (this.castlingEligibility[them]) {\n            if (them === Color.WHITE) {\n                if (move.from ===  112 /* a1 */ && (this.castlingEligibility[them] & Flags.QSIDE_CASTLE)) {\n                    this.castlingEligibility[them] ^= Flags.QSIDE_CASTLE;\n                } else if (move.from === 119 /* a8 */ && (this.castlingEligibility[them] & Flags.KSIDE_CASTLE)) {\n                    this.castlingEligibility[them] ^= Flags.KSIDE_CASTLE;\n                }\n            } else {\n                if (move.from === 0 /* a8 */ && (this.castlingEligibility[them] & Flags.QSIDE_CASTLE)) {\n                    this.castlingEligibility[them] ^= Flags.QSIDE_CASTLE;\n                } else if (move.from === 7 /* h8 */ && (this.castlingEligibility[them] & Flags.KSIDE_CASTLE)) {\n                    this.castlingEligibility[them] ^= Flags.KSIDE_CASTLE;\n                }\n            }\n        }\n\n        // if big pawn move, update the en passant square\n        if (move.flags & Flags.BIG_PAWN) {\n            if (this.turn === Color.BLACK) {\n                this.enPassantSquare = move.to - 16;\n            } else {\n                this.enPassantSquare = move.to + 16;\n            }\n        } else {\n            this.enPassantSquare = -1;\n        }\n\n        // reset the 100 half-move counter if a pawn is moved or a piece is captured\n        if (move.movedPiece.type === PieceType.PAWN) {\n            this.halfMoves = 0;\n        } else if (move.flags & (Flags.CAPTURE | Flags.EP_CAPTURE)) {\n            this.halfMoves = 0;\n        } else {\n            this.halfMoves++;\n        }\n        if (this.turn === Color.BLACK) {\n            this.moveNumber++;\n        }\n\n        this.plyCount = this.plyCount + 1;\n\n        this.turn = this.turn === Color.WHITE ? Color.BLACK : Color.WHITE;\n    }\n\n    // TODO(6.27.15)   need to reinstrument all pair-wise calls to makeMove() <--> undoCurrentMove(),\n    // and possibly _applyMove() <--> _applyUndoMove() should you want to properly avoid fenCount calculations\n    undoCurrentMove(options = {\n        updatePositionCount: true\n    }) {\n        // no event logging;  this method is only used internally\n\n        if (this.selectedMoveHistoryIndex < 0) {\n            return false;\n        }\n\n        const oldMoveContext = this.moveHistory[this.selectedMoveHistoryIndex];\n\n        this.moveHistory.length = this.selectedMoveHistoryIndex;  // we're undoing the currently selected move, so truncate and remove all moves ahead of us\n        this.selectedMoveHistoryIndex--;\n\n        const oldMove = this._applyUndoMove(oldMoveContext);\n\n        if (options.updatePositionCount) {\n            const key = this.toFen({omitExtras: true});\n            this.positionCount.set(key, this.positionCount.get(key) - 1);\n\n            if (this.positionCount.get(key) === 0) {\n                this.positionCount.delete(key);\n            }\n        }\n\n        return oldMove;\n    };\n\n    _applyUndoMove(oldMoveContext) {\n        const move = oldMoveContext.move;\n\n        this.castlingEligibility = {\n            [Color.WHITE]: oldMoveContext.castlingEligibility[Color.WHITE],\n            [Color.BLACK]: oldMoveContext.castlingEligibility[Color.BLACK]\n        };\n        this.kings = {\n            [Color.WHITE]: oldMoveContext.kings[Color.WHITE],\n            [Color.BLACK]: oldMoveContext.kings[Color.BLACK]\n        };\n\n        this.enPassantSquare = oldMoveContext.enPassantSquare;\n        this.halfMoves = oldMoveContext.halfMoves;\n        this.moveNumber = oldMoveContext.moveNumber;\n        this.plyCount = oldMoveContext.plyCount - 1;\n        this.timeTakenToMove = oldMoveContext.timeTakenToMove; // TODO need to change this to be metadata struct\n        this.turn = oldMoveContext.turn;\n\n        const us = this.turn;\n\n        this.board[move.from] = Piece.forSymbol(move.movedPiece);  // to undo any promotions\n        this.board[move.to] = Piece.NONE;\n\n        if (move.flags & Flags.CAPTURE) {\n            this.board[move.to] = move.capturedPiece;\n        } else if (move.flags & Flags.EP_CAPTURE) {\n            let index;\n            if (us === Color.BLACK) {\n                index = move.to - 16;\n            } else {\n                index = move.to + 16;\n            }\n            this.board[index] = move.capturedPiece;\n        }\n\n        if (move.flags & (Flags.KSIDE_CASTLE | Flags.QSIDE_CASTLE)) {\n            let castling_to, castling_from;\n            if (move.flags & Flags.KSIDE_CASTLE) {\n                castling_to = move.to + 1;\n                castling_from = move.to - 1;\n            } else if (move.flags & Flags.QSIDE_CASTLE) {\n                castling_to = move.to - 2;\n                castling_from = move.to + 1;\n            }\n            this.board[castling_to] = this.board[castling_from];\n            this.board[castling_from] = Piece.NONE;\n        }\n\n        return move;\n    }\n\n    makeMoveFromSan(\n        sanText  /* string, e.g. \"Rxa7\" or \"e8=Q#\" */,\n        game  /* Game object from game.js */,\n        metadata = {  // TODO wrap up this move metadata object into its own class, for DRY purposes.  e.g. move_metadata.js\n            comment: null  /* string */,\n            timeTakenToMove: null  /* int */,\n            isPuzzleSolution: null  /* boolean */\n        }\n    ) {\n        // event logging, always:  this method is user facing, and is involved with puzzle interaction\n\n        let move = Move.createFromSan(sanText, this);\n        if (move) {\n            this.eventLog.add(`makeMoveFromSan(${sanText}, ...) --> ${move.san}`);\n\n            return this.makeMove(move, game, metadata);\n        } else {\n            this.eventLog.add(`makeMoveFromSan(${sanText}, ...) --> invalid move`);\n\n            return false;\n        }\n    }\n\n    makeMoveFromAlgebraic(\n        from /* e.g. 'a4', 'b3' */,\n        to   /* e.g. 'a4', 'b3' */,\n        game  /* Game object from game.js */,\n        promotionPieceType = PieceType.QUEEN,\n        metadata = {  // TODO wrap up this move metadata object into its own class, for DRY purposes.  e.g. move_metadata.js\n            comment: null  /* string */,\n            timeTakenToMove: null  /* int */,\n            isPuzzleSolution: null  /* boolean */\n        }\n    ) {\n        let move = Move.createFromAlgebraic(from, to, this, promotionPieceType);\n        if (move) {\n            this.eventLog.add(`makeMoveFromAlgebraic(${from}, ${to}, ...) --> ${move.san}`);\n\n            return this.makeMove(move, game, metadata);\n        } else {\n            this.eventLog.add(`makeMoveFromAlgebraic(${from}, ${to}, ...) --> invalid move`);\n\n            return false;\n        }\n    }\n\n    _selectMove(\n        i,  // integer, the new value of our selectedMoveHistoryIndex\n        options = {\n            shouldLog: false\n        }\n    ) {\n        if (options.shouldLog) {\n            this.eventLog.add(`_selectMove(${i}`);\n        }\n\n        if (this.selectedMoveHistoryIndex === i) {\n            return true;  // already on requested move;  nothing to do.\n        }\n\n        if (i < -1 || i > this.moveHistory.length - 1) {\n            return false;\n        }\n\n        return this.replayToPlyNum(i+1);\n    }\n\n    next(options = {\n        shouldLog: true\n    }) {\n        if (options.shouldLog) {\n            this.eventLog.add('next()');\n        }\n\n        return this._selectMove(this.selectedMoveHistoryIndex + 1);\n    }\n\n    prev(options = {\n        shouldLog: true\n    }) {\n        if (options.shouldLog) {\n            this.eventLog.add('prev()');\n        }\n\n        return this._selectMove(this.selectedMoveHistoryIndex - 1);\n    }\n\n    // TODO -- makeMove vs makeMoveFromSan -- these two methods should be combined into one...\n\n    // TODO(6.27.15) consider a top-level API method for making a move, and an internal API method that does the same making of a move, but is only done\n    // for internal calculations, exploratory moves, etc -- i.e. not official moves, so official board state (puzzle timing;  position count;  etc) should not be updated.\n    // Is this even a good or viable idea??\n\n    makeMove(\n        move,  /* Move object from move.js */\n        game,  /* Game object from game.js */\n        metadata = {},\n        options = {}\n    ) {\n        metadata = Object.assign({}, {\n            comment: null, /* string */\n            timeTakenToMove: null,  /* int */\n            isPuzzleSolution: null  /* boolean */\n        }, metadata);\n\n        options = Object.assign({}, {\n            updatePositionCount: true,\n            isUserMove: true\n        }, options);\n\n        // no event logging;  method is only used internally;  TODO verify this, after your attempted merger b/t makeMove and makeMoveFromSan\n\n        // TODO:  consider how to handle if made move is in fact a match of the isPuzzleSolution?\n        //\n        //// here's the original comment and code\n        ////\n        //// what's happening here;  i need to pass back whether or not the move just made was a \"is_puzzle_solution\" move\n        //// that exists in the loaded PGN;  however, this here move() method doesn't reference stored moves[], instead it\n        //// uses generate_moves()\n        //\n        //if (next.call(this, false)) {\n        //    pretty_move.is_puzzle_solution = this.current_game.current_variation.moves[this.current_game.current_variation.selected_move_index].is_puzzle_solution;\n        //    return pretty_move;\n        //} else {\n        //    return null;\n        //}\n\n        // TODO need to hide timeTakenToMove parameter;  should not be exposed to caller;\n        // instead perform internal calculation here;\n\n        // TODO add logic for updating the timeTakenToMove of an existing move....\n        // if it's an isPuzzleSolution === true move, and no previous timing value exists.... ?\n\n        if (options.isUserMove) {\n\n            // step 1:  check if the next move in our history, if any, matches the requested move\n            if (this.selectedMoveHistoryIndex + 1 !== this.moveHistory.length) {\n                const nextMoveContext = this.moveHistory[this.selectedMoveHistoryIndex + 1];\n\n                // if the requested move is identical to the next move that was already made in\n                // our move history, then we simply advance our move cursor to that next move.\n                if (nextMoveContext.move.san === move.san || move.isWildcard) {\n                    this.next({ shouldLog: options.isUserMove });\n                    return this.moveHistory[this.selectedMoveHistoryIndex];\n                }\n\n                // step 1-a:  otherwise, check if the next move has any variations whose first move matches\n                // the requested move.  If found, then we simply advance our move cursor into that variation.\n                //\n                // TODO write an unit test for this\n                //\n                for (let i = 0; i < nextMoveContext.childVariations.length; i++) {\n                    if (!nextMoveContext.childVariations[i].isContinuation &&  // variations only\n                        (nextMoveContext.childVariations[i].moveHistory[0].move.san === move.san\n                        || nextMoveContext.childVariations[i].moveHistory[0].move.isWildcard))\n                    {\n                        // TODO need to pass back whether or not the move just made was a \"isPuzzleSolution\" move\n                        // that exists in the loaded PGN;  however, this here move() method doesn't reference stored moves[], instead it\n                        // uses generate_moves()\n                        if (game.descendIntoVariation(i)) {\n                            return game.currentVariation.moveHistory[0];\n                        } else {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            // step 2:  otherwise, check if the current move in our history has a continuation whose first move matches\n            // the requested move.  If found, then we simply advance our move cursor into that continuation.\n            if (this.moveHistory[this.selectedMoveHistoryIndex] &&\n                this.moveHistory[this.selectedMoveHistoryIndex].childVariations.length > 0)\n            {\n                const childVariations = this.moveHistory[this.selectedMoveHistoryIndex].childVariations;\n\n                for (let i = 0; i < childVariations.length; i++) {\n                    if (childVariations[i].isContinuation &&  // continuations only\n                        (childVariations[i].moveHistory[0].move.san === move.san\n                        || childVariations[i].moveHistory[0].move.isWildcard))\n                    {\n                        if (game.descendIntoContinuation(i)) {\n                            return game.currentVariation.moveHistory[0].move;\n                        } else {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            // step 3:  otherwise, if the requested move is a new move *and* we're not at the head of our move branch,\n            // then let's automatically create a new variation on behalf of the user for the requested move\n            if (this.selectedMoveHistoryIndex + 1 !== this.moveHistory.length) {\n                const currentMoveContext = this.moveHistory[this.selectedMoveHistoryIndex + 1];\n                // TODO won't this auto-made variation also need its own variation-ID generation logic passed in?  same as code later on down\n                const newChildVariation = BoardVariation.createFromParentVariation(this, { skipUndoingCurrentMove: true });\n\n                currentMoveContext.childVariations.push(newChildVariation);\n                newChildVariation.makeMove(move, game, metadata, options);  // TODO re-use of options here is suspect\n\n                game.currentVariation = newChildVariation;  // the whole reason we needed to plumb the game object into this method\n\n                return currentMoveContext;\n            }\n        }\n\n        // step 4:  otherwise, our move is a new move, and we're at the head of our move branch;\n        // *or* this is not a user-requested move, in which case we simply make the requested move\n        let moveContext = new MoveContext({\n            move: move,\n\n            castlingEligibility: this.castlingEligibility,\n            kings: this.kings,\n\n            turn: this.turn,\n            enPassantSquare: this.enPassantSquare,\n\n            moveNumber: this.moveNumber,\n            halfMoves: this.halfMoves,\n            plyCount: this.plyCount + 1,\n\n            metadata: metadata\n        });\n\n        // insert our new move into moveHistory[] after the current selectedMoveHistoryIndex;  There's offset-by-one logic here.\n        // Do NOT reverse the order of the two lines below, or you will cause all sorts of board state corruption\n        this.selectedMoveHistoryIndex++;\n        this.moveHistory.splice(this.selectedMoveHistoryIndex, 0, moveContext);\n\n        // generate an ID for this move, one that is unique across the entire game tree.\n        // format:  (({parent_variation's id}-)*)-{half_move_number}\n        //\n        // e.g.:  1. e4 {1} e5 {2} 2. d4 {3} d5 {4} (2... d6 {1-4} 3. c4 {1-5} (3. c3 {1-2-5}))\n        //\n        // TODO probably want to change this ID scheme from variation_ids to variation_index offset from child_variations;\n        // will make tree traversal significantly easier.  although... what about when a variation is deleted?  hmmm....\n\n        // TODO reinstate eventually\n        /*\n         var moveId = '0-';\n         var current = this;\n         while (current.parentVariation) {\n         moveId += current.id + '-';\n         current = current.parentVariation;\n         }\n         moveId += this.plyCount + this.selectedMoveHistoryIndex;\n\n         this.moveHistory[this.selectedMoveHistoryIndex].moveId = moveId;\n         */\n        // /TODO\n\n        this._applyMove(move);\n\n        if (options.updatePositionCount) {\n            const key = this.toFen({omitExtras: true});\n\n            if (this.positionCount.has(key)) {\n                this.positionCount.set(key, this.positionCount.get(key) + 1);\n            } else {\n                this.positionCount.set(key, 1);\n            }\n        }\n\n        return moveContext;\n    }\n\n    replayToPlyNum(n /* logical ply number, starting from 1 */) {\n        // no event logging;  this method is only used internally\n\n        n = n - 1;  // translate from logical ply number to selectedMoveHistoryIndex number\n        if (n > this.selectedMoveHistoryIndex) {\n            this.selectedMoveHistoryIndex++;\n            for (; this.selectedMoveHistoryIndex <= n; this.selectedMoveHistoryIndex++) {\n                const moveContext = this.moveHistory[this.selectedMoveHistoryIndex].move;\n\n                this._applyMove(moveContext);\n            }\n            this.selectedMoveHistoryIndex--;\n        } else if (n < this.selectedMoveHistoryIndex) {\n            for (; n < this.selectedMoveHistoryIndex; this.selectedMoveHistoryIndex--) {\n                const moveContext = this.moveHistory[this.selectedMoveHistoryIndex];\n\n                this._applyUndoMove(moveContext);\n            }\n        }\n\n        return this.selectedMoveHistoryIndex > -1 && this.selectedMoveHistoryIndex < this.moveHistory.length ? this.moveHistory[this.selectedMoveHistoryIndex] : null;\n    }\n\n    // helper method, used only in generateMoves(...)\n    _addMove(from, to, flags, newMoves, calculateSan, them) {\n\n        const capturedPiece = flags === Flags.EP_CAPTURE ? this.board[to + (them === Color.BLACK ? 16 : -16)] : this.board[to];\n\n        const moveConstructorOptions = {\n                      from: from,\n                        to: to,\n                movedPiece: this.board[from],\n             capturedPiece: capturedPiece,\n                     flags: flags,\n            boardVariation: calculateSan ? this : undefined\n        };\n\n        // if pawn promotion\n        if (this.board[from].type === PieceType.PAWN\n            && (BoardVariation._rank(to) === 0 || BoardVariation._rank(to) === 7))\n        {\n            const promotionPieces = this.turn === Color.WHITE ? Piece.WHITE_PROMOTION_PIECES : Piece.BLACK_PROMOTION_PIECES;\n            promotionPieces.forEach(promotionPiece => {  \n                moveConstructorOptions.promotionPiece = promotionPiece;\n                newMoves.push(new Move(moveConstructorOptions));\n            });\n        } else {\n            newMoves.push(new Move(moveConstructorOptions));\n        }\n    }\n\n    _generateMoves(options = {}) {\n        options = Object.assign({}, {\n             onlyForSquare: null,  /* string, e.g. 'a1' */\n              calculateSan: false,\n            onlyLegalMoves: true\n        }, options);\n\n        const us = this.turn;\n        const them = this.turn === Color.WHITE ? Color.BLACK : Color.WHITE;\n\n        const secondRank = {\n            [Color.BLACK]: 1,\n            [Color.WHITE]: 6\n        };\n\n        let newMoves = [];\n        let firstSquare = Move.SQUARES.a8;\n        let lastSquare = Move.SQUARES.h1;\n\n        // are we generating moves for a single square?\n        if (options.onlyForSquare) {\n            if (options.onlyForSquare in Move.SQUARES) {\n                firstSquare = lastSquare = Move.SQUARES[options.onlyForSquare];\n            } else {\n                return [];  // invalid square\n            }\n        }\n\n        // TODO(aaron) what if instead of inspecting every square, you\n        // instead tracked in BoardVariation the location of all active non-blank pieces\n        // then you could just iterate over them here.  Do a perf test before and after.\n\n        for (let i = firstSquare; i <= lastSquare; i++) {\n            if (i & 0x88) { i += 7; continue; }  // did we run off the end of the board?\n\n            const piece = this.board[i];\n            if (piece === Piece.NONE || piece.color !== us) {\n                continue;\n            }\n\n            let square;\n\n            if (piece.type === PieceType.PAWN) {\n                // single square, non-capturing\n                square = i + Move.PAWN_OFFSETS[us][0];\n                if (this.board[square] === Piece.NONE) {\n                    this._addMove(i, square, Flags.NORMAL, newMoves, options.calculateSan);\n\n                    // double square\n                    square = i + Move.PAWN_OFFSETS[us][1];\n                    if (secondRank[us] === BoardVariation._rank(i) && this.board[square] === Piece.NONE) {\n                        this._addMove(i, square, Flags.BIG_PAWN, newMoves, options.calculateSan);\n                    }\n                }\n\n                // pawn captures\n                for (let j = 2; j < 4; j++) {\n                    square = i + Move.PAWN_OFFSETS[us][j];\n                    if (square & 0x88) continue;\n\n                    if (this.board[square] !== Piece.NONE && this.board[square].color === them) {\n                        this._addMove(i, square, Flags.CAPTURE, newMoves, options.calculateSan);\n                    } else if (square === this.enPassantSquare) {\n                        this._addMove(i, this.enPassantSquare, Flags.EP_CAPTURE, newMoves, options.calculateSan, them);\n                    }\n                }\n            } else {\n                for (let j = 0, len = Move.PIECE_OFFSETS[piece.type].length; j < len; j++) {\n                    const offset = Move.PIECE_OFFSETS[piece.type][j];\n                    square = i;\n\n                    while (true) {\n                        square += offset;\n                        if (square & 0x88) break;\n\n                        if (this.board[square] === Piece.NONE) {\n                            this._addMove(i, square, Flags.NORMAL, newMoves, options.calculateSan);\n                        } else {\n                            if (this.board[square].color === us) break;\n                            this._addMove(i, square, Flags.CAPTURE, newMoves, options.calculateSan);\n                            break;\n                        }\n\n                        // break, if knight or king\n                        if (piece.type === PieceType.KNIGHT || piece.type === PieceType.KING) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for castling if: a) we're generating all moves, or b) we're doing single square move generation on the king's square\n        if ((!options.onlyForSquare) || lastSquare === this.kings[us]) {\n            // king-side castling\n            if (this.castlingEligibility[us] & Flags.KSIDE_CASTLE) {\n                const castlingFrom = this.kings[us];\n                const castlingTo = castlingFrom + 2;\n\n                if (this.board[castlingFrom + 1] === Piece.NONE &&\n                    this.board[castlingTo]       === Piece.NONE &&\n                    !this.isAttacked(them, this.kings[us]) &&\n                    !this.isAttacked(them, castlingFrom + 1) &&\n                    !this.isAttacked(them, castlingTo))\n                {\n                    this._addMove(this.kings[us] , castlingTo, Flags.KSIDE_CASTLE, newMoves, options.calculateSan);\n                }\n            }\n\n            // queen-side castling\n            if (this.castlingEligibility[us] & Flags.QSIDE_CASTLE) {\n                const castlingFrom = this.kings[us];\n                const castlingTo = castlingFrom - 2;\n\n                if (this.board[castlingFrom - 1] === Piece.NONE &&\n                    this.board[castlingFrom - 2] === Piece.NONE &&\n                    this.board[castlingFrom - 3] === Piece.NONE &&\n                    !this.isAttacked(them, this.kings[us]) &&\n                    !this.isAttacked(them, castlingFrom - 1) &&\n                    !this.isAttacked(them, castlingTo))\n                {\n                    this._addMove(this.kings[us], castlingTo, Flags.QSIDE_CASTLE, newMoves, options.calculateSan);\n                }\n            }\n        }\n\n        // return all pseudo-legal moves (this includes moves that allow the king to be captured)\n         if (!options.onlyLegalMoves) {\n             return newMoves;\n         }\n\n        // filter out illegal moves\n        let legalMoves = [];\n\n        if (newMoves.length > 0) \n        {\n            // TODO this futureMoves logic is duplicated in Move.toSan(move, boardVariation);\n            // might be good candidate for abstraction behind would-be-named MoveHistory object\n\n            // makeMove() below is destructive to all future moves ahead \n            // of our current move pointer, so we save a copy here\n            const futureMoves = this.moveHistory.slice(this.selectedMoveHistoryIndex+1);\n\n            newMoves.forEach(newMove => {\n                this.makeMove(newMove, null, null, { updatePositionCount: false, isUserMove: false });\n                if (!this.isKingAttacked(us)) {\n                    legalMoves.push(newMove);\n                } \n\n                this.undoCurrentMove({ updatePositionCount: false });\n            });\n\n            // restore our previously saved future moves\n            this.moveHistory = this.moveHistory.concat(futureMoves);\n        }\n\n        return legalMoves;\n    }\n\n     // this function is used to uniquely identify ambiguous moves\n    getDisambiguator(move  /* Move object from move.js */) {\n        const moves = this._generateMoves();\n\n        const from = move.from;\n        const to = move.to;\n        const piece = move.movedPiece;\n\n        let ambiguities = 0;\n        let sameRank = 0;\n        let sameFile = 0;\n\n        for (let i = 0, len = moves.length; i < len; i++) {\n            const ambigFrom = moves[i].from;\n            const ambigTo = moves[i].to;\n            const ambigPiece = moves[i].movedPiece;\n\n            // if a move of the same piece type ends on the same to square, we'll\n            // need to add a disambiguator to the algebraic notation\n            if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n                ambiguities++;\n\n                if (BoardVariation._rank(from) === BoardVariation._rank(ambigFrom)) {\n                    sameRank++;\n                }\n\n                if (BoardVariation._file(from) === BoardVariation._file(ambigFrom)) {\n                    sameFile++;\n                }\n            }\n        }\n        if (ambiguities > 0) {\n            // if there exists a similar moving piece on the same rank and file as\n            // the move in question, use the square as the disambiguator\n            if (sameRank > 0 && sameFile > 0) {\n                return BoardVariation._algebraic(from);\n            }\n            // if the moving piece rests on the same file,\n            // use the rank symbol as the disambiguator\n            else if (sameFile > 0) {\n                return BoardVariation._algebraic(from).charAt(1);\n            }\n            // else use the file symbol\n            else {\n                return BoardVariation._algebraic(from).charAt(0);\n            }\n        }\n\n        return '';\n    }\n\n    isAttacked(color, square) {       \n        for (let i = Move.SQUARES.a8; i <= Move.SQUARES.h1; i++) {\n            // did we run off the end f the board\n            if (i & 0x88) { i += 7; continue; }\n\n            // if empty square or wrong color\n            if (this.board[i] === Piece.NONE) continue;\n            if (this.board[i].color !== color) continue;\n\n            const difference = i - square;\n            const index = difference + 119;\n\n            let piece = this.board[i];\n\n            if (Move.ATTACKS[index] & (1 << Move.SHIFTS[piece.type])) {\n                if (piece.type === PieceType.PAWN) {\n                    if (difference > 0) {\n                        if (piece.color === Color.WHITE) return true;\n                    } else {\n                        if (piece.color === Color.BLACK) return true;\n                    }\n                    continue;\n                }\n\n                // if the piece is a knight or a king\n                if (piece.type === PieceType.KNIGHT || piece.type === PieceType.KING) return true;\n\n                const offset = Move.RAYS[index];\n                let j = i + offset;\n\n                let blocked = false;\n                while (j !== square) {\n                    if (this.board[j] !== Piece.NONE) {\n                        blocked = true;\n                        break;\n                    }\n                    j += offset;\n                }\n\n                if (! blocked) return true;\n            }\n        }\n\n        return false;\n    }\n\n    isKingAttacked(color) {\n        return this.isAttacked(color === Color.WHITE ? Color.BLACK : Color.WHITE, this.kings[color]);\n    }\n\n    isCheck() {\n        return this.isKingAttacked(this.turn);\n    }\n\n    isCheckmate() {\n        return this.isCheck() && this._generateMoves().length === 0;\n    }\n\n    isStalemate() {\n        return ! this.isCheck() && this._generateMoves().length === 0;\n    }\n\n    isDraw() {\n        return this.halfMoves >= 100\n            || this.isStalemate()\n            || this.isInsufficientMaterial()\n            || this.isThreefoldRepetition();\n    }\n\n    isInsufficientMaterial() {\n        let pieceCount = {};\n        let totalPieceCount = 0;\n\n        let bishops = [];\n        let squareColor = 0;\n\n        for (let i = Move.SQUARES.a8; i <= Move.SQUARES.h1; i++) {\n            squareColor = (squareColor + 1) % 2;\n            if (i & 0x88) { i += 7; continue; }\n\n            const piece = this.board[i];\n            if (piece.type !== PieceType.NONE) {\n                pieceCount[piece.type] = (piece.type in pieceCount) ?\n                    pieceCount[piece.type] + 1 : 1;\n                if (piece.type === PieceType.BISHOP) {\n                    bishops.push(squareColor);\n                }\n                totalPieceCount++;\n            }\n        }\n\n        // k vs. k\n        if (totalPieceCount === 2) { return true; }\n\n        // k vs. kn ... or ... k vs. kb\n        else if (totalPieceCount === 3 && (pieceCount[PieceType.BISHOP] === 1 ||\n            pieceCount[PieceType.KNIGHT] === 1)) { return true; }\n\n        // kb vs. kb where any number of bishops are all on the same color\n        else if (totalPieceCount === pieceCount[PieceType.BISHOP] + 2) {\n            const len = bishops.length;\n            let sum = 0;\n            for (let i = 0; i < len; i++) {\n                sum += bishops[i];\n            }\n            if (sum === 0 || sum === len) { return true; }\n        }\n\n        return false;\n    }\n\n    isThreefoldRepetition() {\n        return Array.from(this.positionCount.values()).some(count => count >= 3);\n    }\n\n    isGameOver() {\n        return this.halfMoves >= 100\n            || this.isCheckmate()\n            || this.isStalemate()\n            || this.isInsufficientMaterial()\n            || this.isThreefoldRepetition();\n    }\n};\n\nBoardVariation.id = 0;\n\nmodule.exports = BoardVariation;\n","'use strict';\n\nclass EventLog {\n    constructor() {\n        this._events = [];\n        this._lastTimerSnapshot = Date.now();\n\n        this._events.push({\n            timer: this._lastTimerSnapshot,\n            delta: null,\n            event: 'Event Log initialized.'\n        });\n    }\n\n    add(event) {\n        const delta = this._updateEventTimer();\n\n        this._events.push({\n            timer: this._lastTimerSnapshot,\n            delta: delta,\n            event: event\n        });\n    }\n\n    _updateEventTimer() {\n        const prev = this._lastTimerSnapshot;\n        this._lastTimerSnapshot = Date.now();\n        return this._lastTimerSnapshot - prev;\n    }\n\n};\n\nmodule.exports = EventLog;","'use strict';\n\nconst Color = require('./../src/color');\nconst PieceType = require('./../src/piece_type');\n\nclass Piece {\n    constructor(options) {\n        this.type = options.type;    // PieceType -- the type of piece, e.g. PAWN, KNIGHT, ROOK\n        this.color = options.color;  // Color     -- WHITE or BLACK\n\n        this.symbol = this.color === Color.WHITE ? this.type.toUpperCase() : this.type;\n\n        Object.freeze(this);  // immutability == sanity safeguard\n    }\n\n    toString() {\n        return this.symbol;\n    }\n\n    // for more succinct console.log() output\n    inspect() {\n        return this.toString();\n    }\n\n    static forSymbol(symbol) {\n        return Piece.LOOKUP[symbol];\n    }\n};\n\n// set up our pool of reusable pieces;  http://en.wikipedia.org/wiki/Flyweight_pattern\nPiece.WHITE_PAWN   = new Piece({ color: Color.WHITE, type: PieceType.PAWN   });\nPiece.WHITE_KNIGHT = new Piece({ color: Color.WHITE, type: PieceType.KNIGHT });\nPiece.WHITE_BISHOP = new Piece({ color: Color.WHITE, type: PieceType.BISHOP });\nPiece.WHITE_ROOK   = new Piece({ color: Color.WHITE, type: PieceType.ROOK   });\nPiece.WHITE_QUEEN  = new Piece({ color: Color.WHITE, type: PieceType.QUEEN  });\nPiece.WHITE_KING   = new Piece({ color: Color.WHITE, type: PieceType.KING   });\nPiece.BLACK_PAWN   = new Piece({ color: Color.BLACK, type: PieceType.PAWN   });\nPiece.BLACK_KNIGHT = new Piece({ color: Color.BLACK, type: PieceType.KNIGHT });\nPiece.BLACK_BISHOP = new Piece({ color: Color.BLACK, type: PieceType.BISHOP });\nPiece.BLACK_ROOK   = new Piece({ color: Color.BLACK, type: PieceType.ROOK   });\nPiece.BLACK_QUEEN  = new Piece({ color: Color.BLACK, type: PieceType.QUEEN  });\nPiece.BLACK_KING   = new Piece({ color: Color.BLACK, type: PieceType.KING   });\nPiece.NONE         = new Piece({ color: Color.NONE,  type: PieceType.NONE   });\nPiece.LOOKUP = {\n    [ Piece.WHITE_PAWN   ]: Piece.WHITE_PAWN,\n    [ Piece.WHITE_KNIGHT ]: Piece.WHITE_KNIGHT,\n    [ Piece.WHITE_BISHOP ]: Piece.WHITE_BISHOP,\n    [ Piece.WHITE_ROOK   ]: Piece.WHITE_ROOK,\n    [ Piece.WHITE_QUEEN  ]: Piece.WHITE_QUEEN,\n    [ Piece.WHITE_KING   ]: Piece.WHITE_KING,\n    [ Piece.BLACK_PAWN   ]: Piece.BLACK_PAWN,\n    [ Piece.BLACK_KNIGHT ]: Piece.BLACK_KNIGHT,\n    [ Piece.BLACK_BISHOP ]: Piece.BLACK_BISHOP,\n    [ Piece.BLACK_ROOK   ]: Piece.BLACK_ROOK,\n    [ Piece.BLACK_QUEEN  ]: Piece.BLACK_QUEEN,\n    [ Piece.BLACK_KING   ]: Piece.BLACK_KING,\n    [ Piece.NONE         ]: Piece.NONE\n};\n\n// TODO(aaron, 2015.11.17) consider relaxing this to include enemy pieces, in order to support that edge-case \"promote to an enemy piece for a mate-in-1\" puzzle from Sherlock Holmes Chess Mysteries book\nPiece.WHITE_PROMOTION_PIECES = [\n    Piece.WHITE_QUEEN,\n    Piece.WHITE_ROOK,\n    Piece.WHITE_BISHOP,\n    Piece.WHITE_KNIGHT\n];\nPiece.BLACK_PROMOTION_PIECES = [\n    Piece.BLACK_QUEEN,\n    Piece.BLACK_ROOK,\n    Piece.BLACK_BISHOP,\n    Piece.BLACK_KNIGHT\n];\n\nmodule.exports = Piece;","\"use strict\";\n\nconst BoardVariation = require(\"../src/board_variation\");\nconst Color = require(\"./../src/color\");\nconst Fen = require(\"../src/fen\");\nconst Flags = require(\"./../src/flags\");\nconst Game = require(\"../src/game\");\nconst Move = require(\"./../src/move\");\nconst PieceType = require(\"./../src/piece_type\");\n\nclass Chess {\n  constructor(\n    fen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\" /* string */ // TODO(aaron) think about also having a constructor that takes in PGN ?\n  ) {\n    const game = new Game(fen);\n    this.games = [game];\n\n    this.currentGame = game;\n    this.currentGameNum = 0;\n\n    this.lastTimerSnapshot = -1;\n    this.replayLog = [];\n  }\n\n  toString() {\n    return (\n      `${this.games.length} game${\n        this.games.length > 1 ? \"s\" : \"\"\n      } loaded.  Game #${this.currentGameNum + 1} selected:\\n\\n` +\n      this.currentGame.toString()\n    );\n  }\n\n  addGame(game = new Game()) {\n    this.games.push(game);\n  }\n\n  selectGame(i) {\n    if (i < 0 || i >= this.games.length) {\n      return false;\n    }\n\n    this.currentGame = this.games[i];\n    this.currentGameNum = i;\n\n    return true;\n  }\n\n  toPgn(options = {}) {\n    options = Object.assign(\n      {},\n      {\n        maxWidth: 0,\n        newlineChar: \"\\n\",\n        showMoveCursor: false,\n        showHeaders: true,\n      },\n      options\n    );\n\n    return this.currentGame.toPgn(options);\n  }\n\n  loadPgn(pgnText, options = {}) {\n    options = Object.assign(\n      {},\n      {\n        newlineChar: \"\\r?\\n\",\n      },\n      options\n    );\n\n    // reduce all newlines into \\n for simplified parsing\n    pgnText = pgnText.replace(\n      new RegExp(options.newlineChar.replace(/\\\\/g, \"\\\\\"), \"g\"),\n      \"\\n\"\n    );\n\n    let pairs = this._parsePgnGames(pgnText);\n\n    for (let i = 0; i < pairs.length; i++) {\n      let game = this._parsePgnGame(pairs[i].headerText, pairs[i].gameText);\n      if (!game) {\n        return false;\n      }\n      this.addGame(game);\n    }\n\n    this.selectGame(this.games.length - 1); // select the game we just loaded...\n\n    return true;\n  }\n\n  // sanitizes our raw input PGN text, dividing it up by each unique game entry it contains\n  _parsePgnGames(pgnText) {\n    let results = [];\n\n    let headMatch,\n      prevHead,\n      newHead,\n      startNew,\n      afterNew,\n      lastOpen,\n      checkedGame = \"\",\n      numberOfGames = 0,\n      validHead;\n    let headerBlockRegex = /\\s*(\\[\\s*\\w+\\s*\"[^\"]*\"\\s*\\]\\s*)+/;\n\n    // fix common mistakes in PGN text\n    pgnText = pgnText.replace(\n      /[\\u00A0\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]/g,\n      \" \"\n    ); // some spaces to plain space\n    pgnText = pgnText.replace(/\\u00BD/g, \"1/2\"); // \"half fraction\" to \"1/2\"\n    pgnText = pgnText.replace(/[\\u2010-\\u2015]/g, \"-\"); // \"hyphens\" to \"-\"\n    pgnText = pgnText.replace(/\\u2024/g, \".\"); // \"one dot leader\" to \".\"\n    pgnText = pgnText.replace(/[\\u2025-\\u2026]/g, \"...\"); // \"two dot leader\" and \"ellipsis\" to \"...\"\n    pgnText = pgnText.replace(/\\\\\"/g, \"'\"); // fix [Opening \"Queen\\\"s Gambit\"]\n\n    // escape html entities\n    pgnText = pgnText\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\");\n\n    // PGN standard: ignore lines starting with %\n    pgnText = pgnText.replace(/(^|\\n)%.*(\\n|$)/g, \"\\n\");\n\n    if (headerBlockRegex.exec(pgnText)) {\n      while ((headMatch = headerBlockRegex.exec(pgnText))) {\n        newHead = headMatch[0];\n        startNew = pgnText.indexOf(newHead);\n        afterNew = startNew + newHead.length;\n        if (prevHead) {\n          checkedGame += pgnText.slice(0, startNew);\n          validHead =\n            (lastOpen = checkedGame.lastIndexOf(\"{\")) < 0 ||\n            checkedGame.lastIndexOf(\"}\") > lastOpen;\n          if (validHead) {\n            results.push({\n              headerText: prevHead,\n              gameText: checkedGame,\n            });\n            checkedGame = \"\";\n          } else {\n            checkedGame += newHead;\n          }\n        } else {\n          validHead = true;\n        }\n        if (validHead) {\n          prevHead = newHead;\n        }\n        pgnText = pgnText.slice(afterNew);\n      }\n    } else {\n      results.push({\n        headerText: \"\",\n        gameText: pgnText,\n      });\n    }\n\n    if (prevHead) {\n      checkedGame += pgnText;\n      results.push({\n        headerText: prevHead,\n        gameText: checkedGame,\n      });\n    }\n\n    return results;\n  }\n\n  //\n  // behold, an actual PGN parser and lexer, with full support for variations.\n  //\n\n  _parsePgnGame(pgnHeaderText, pgnGameText) {\n    const POSSIBLE_RESULTS = [\"1-0\", \"0-1\", \"1/2-1/2\", \"*\"]; // TODO:  this is a constant, put it somewhere better...?\n\n    function _openNewVariation(game, isContinuation) {\n      const parentLastMoveIndex = game.currentVariation.moveHistory.length - 1;\n\n      const innerVariation = BoardVariation.createFromParentVariation(\n        game.currentVariation,\n        { isContinuation: isContinuation }\n      );\n\n      game.boardVariations.push(innerVariation);\n\n      // take the variation we just started, and append it to the list of child variations that start from its \"parent\" move.\n      game.currentVariation.moveHistory[\n        parentLastMoveIndex\n      ].childVariations.push(innerVariation);\n\n      game.currentVariation = innerVariation;\n    }\n\n    function _closeCurrentVariation(game) {\n      game.currentVariation = game.currentVariation.parentVariation;\n    }\n\n    // parse pgn's header text\n    let key,\n      value,\n      headers = pgnHeaderText.split(\"\\n\");\n\n    let fen = Fen.DEFAULT_POSITION_FULL;\n    let pairs = [];\n    for (let i = 0; i < headers.length; i++) {\n      let header = headers[i].trim();\n\n      key = header.replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, \"$1\");\n      value = header.replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, \"$1\");\n\n      if (key.length > 0) {\n        pairs.push(key);\n        pairs.push(value);\n\n        if (key.toUpperCase() === \"FEN\") {\n          fen = value;\n        }\n      }\n    }\n\n    let game = new Game(fen, pairs);\n\n    // parse pgn's chess text\n    let prevMove,\n      start,\n      end,\n      comment,\n      ss = pgnGameText;\n\n    for (start = 0; start < ss.length; start++) {\n      switch (ss.charAt(start)) {\n        case \" \":\n        case \"\\b\":\n        case \"\\f\":\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\t\":\n          break;\n\n        case \";\":\n          // TODO:  add support for \"rest of line\" comment.  http://www6.chessclub.com/help/PGN-spec\n          break;\n\n        case \"{\":\n          end = start;\n          while (ss.charAt(end) != \"}\") {\n            end++;\n          }\n\n          comment = ss.substring(start, end + 1); // TODO need to properly sanitize this input.\n\n          if (\n            game.currentVariation.intraMoveAnnotationSlots[\n              game.currentVariation.selectedMoveHistoryIndex + 1\n            ]\n          ) {\n            game.currentVariation.intraMoveAnnotationSlots[\n              game.currentVariation.selectedMoveHistoryIndex + 1\n            ].push(comment);\n          } else {\n            game.currentVariation.intraMoveAnnotationSlots[\n              game.currentVariation.selectedMoveHistoryIndex + 1\n            ] = [comment];\n          }\n\n          if (prevMove) {\n            prevMove.metadata.comment = comment; // assign all comment blocks to their preceding move\n            // TODO this logic is broken;  there could be multiple comments;  need to push onto a .comments array;\n            // TODO figure out the interplay between metadata.comment and intraMoveAnnotationSlots;\n            // you should probably just have metadata link to the given slots?  instead of duplicating?\n          }\n\n          start = end;\n          break;\n\n        case \"(\":\n          let isContinuation = false;\n          if (ss.charAt(start + 1) === \"*\") {\n            isContinuation = true;\n            start++;\n          }\n          _openNewVariation(game, isContinuation);\n          break;\n\n        case \")\":\n          _closeCurrentVariation(game);\n          break;\n\n        case \"$\":\n          // http://en.wikipedia.org/wiki/Numeric_Annotation_Glyphs\n          end = start + 1;\n          while (ss.charAt(end) != \" \") {\n            end++;\n          }\n\n          let glyph = ss.substring(start, end); // TODO need to properly sanitize this input.\n\n          if (\n            game.currentVariation.intraMoveAnnotationSlots[\n              game.currentVariation.selectedMoveHistoryIndex + 1\n            ]\n          ) {\n            game.currentVariation.intraMoveAnnotationSlots[\n              game.currentVariation.selectedMoveHistoryIndex + 1\n            ].push(glyph);\n          } else {\n            game.currentVariation.intraMoveAnnotationSlots[\n              game.currentVariation.selectedMoveHistoryIndex + 1\n            ] = [glyph];\n          }\n\n          start = end;\n          break;\n\n        default:\n          let sanText;\n\n          for (let i = 0; i < POSSIBLE_RESULTS.length; i++) {\n            if (ss.indexOf(POSSIBLE_RESULTS[i], start) == start) {\n              if (game.currentVariation === game.currentVariation[0]) {\n                end = ss.length;\n              } else {\n                end = start + POSSIBLE_RESULTS[i].length;\n              }\n              start = end;\n              break;\n            }\n          }\n          if (start == ss.length) {\n            break;\n          }\n\n          let needle = game.currentVariation.moveNumber.toString();\n\n          if (ss.indexOf(needle, start) == start) {\n            start += needle.length;\n            while (\" .\\n\\r\".indexOf(ss.charAt(start)) != -1) {\n              start++;\n            }\n          }\n\n          if (ss.substr(start, 2) === Move.WILDCARD_MOVE) {\n            let someMove = Move.createWildcardMove(game.currentVariation);\n            prevMove = game.makeMove(someMove);\n            end = start + 2;\n          } else if (ss.substr(start, 8) === \"&lt;&gt;\") {\n            let someMove = Move.createWildcardMove(game.currentVariation);\n            prevMove = game.makeMove(someMove);\n            end = start + 8;\n          } else {\n            if (\n              (end = start + ss.substr(start).search(/[\\s${;!?()]/)) < start\n            ) {\n              end = ss.length;\n            }\n\n            sanText = ss.substring(start, end);\n            prevMove = game.makeMoveFromSan(sanText);\n          }\n\n          if (!prevMove) {\n            throw new Error(\n              `error when trying to apply the parsed PGN move \"${sanText}\"`\n            );\n          }\n\n          comment = null;\n\n          if (ss.charAt(end) === \" \") {\n            start = end;\n          } else {\n            start = end - 1;\n          }\n\n          break;\n      }\n    }\n\n    if (game.currentVariation !== game.boardVariations[0]) {\n      // error: parse_pgn ended with one or more dangling variations that weren't closed off\n      while (game.currentVariation !== game.boardVariations[0]) {\n        _closeCurrentVariation(game);\n      }\n    }\n\n    return game;\n  }\n\n  clear() {\n    const game = new Game();\n    this.currentGameNum = 0;\n    this.currentGame = game;\n\n    this.games[this.currentGameNum] = game;\n  }\n\n  reset() {\n    const game = new Game(Fen.DEFAULT_POSITION_FULL);\n    this.currentGameNum = 0;\n    this.currentGame = game;\n\n    this.games[this.currentGameNum] = game;\n  }\n\n  whoseTurn() {\n    return this.currentGame.currentVariation.turn;\n  }\n\n  // --------------------------------------\n  // pass-through API methods, alphabetized\n  // --------------------------------------\n\n  ascendFromCurrentContinuation() {\n    return this.currentGame.ascendFromCurrentContinuation();\n  }\n\n  ascendFromCurrentVariation() {\n    return this.currentGame.ascendFromCurrentVariation();\n  }\n\n  createContinuationFromSan(san /* string, e.g. \"Rxa7\" or \"e8=Q#\" */) {\n    return this.currentGame.createContinuationFromSan(san);\n  }\n\n  createVariationFromSan(san /* string, e.g. \"Rxa7\" or \"e8=Q#\" */) {\n    return this.currentGame.createVariationFromSan(san);\n  }\n\n  descendIntoContinuation(i) {\n    return this.currentGame.descendIntoContinuation(i);\n  }\n\n  descendIntoVariation(i) {\n    return this.currentGame.descendIntoVariation(i);\n  }\n\n  get(square /* string, e.g. 'a1' */) {\n    return this.currentGame.get(square);\n  }\n\n  header() {\n    return this.currentGame.header;\n  }\n  history() {\n    return this.currentGame.history();\n  }\n  isCheck() {\n    return this.currentGame.isCheck();\n  }\n  isCheckmate() {\n    return this.currentGame.isCheckmate();\n  }\n  isDraw() {\n    return this.currentGame.isDraw();\n  }\n  isGameOver() {\n    return this.currentGame.isGameOver();\n  }\n  isInsufficientMaterial() {\n    return this.currentGame.isInsufficientMaterial();\n  }\n  isStalemate() {\n    return this.currentGame.isStalemate();\n  }\n  isThreefoldRepetition() {\n    return this.currentGame.isThreefoldRepetition();\n  }\n\n  loadFen(fen) {\n    return this.currentGame.loadFen(fen);\n  }\n\n  makeMove(move /* Move.js object */) {\n    return this.currentGame.makeMove(move);\n  }\n\n  makeMoveFromSan(san /* string, e.g. \"Rxa7\" or \"e8=Q#\" */) {\n    return this.currentGame.makeMoveFromSan(san);\n  }\n\n  makeMoveFromAlgebraic(\n    from /* e.g. 'a4', 'b3' */,\n    to /* e.g. 'a4', 'b3' */,\n    promotionPieceType = PieceType.QUEEN\n  ) {\n    return this.currentGame.makeMoveFromAlgebraic(from, to, promotionPieceType);\n  }\n\n  moves(\n    options = {\n      onlyAlgebraicSquares: false,\n      onlyDestinationSquares: false,\n      onlyForSquare: undefined,\n    }\n  ) {\n    return this.currentGame.moves(options);\n  }\n\n  next() {\n    return this.currentGame.next();\n  }\n\n  prev() {\n    return this.currentGame.prev();\n  }\n\n  put(\n    piece /* Piece, e.g. Piece.WHITE_ROOK */,\n    square /* string, e.g. 'h8' */\n  ) {\n    const success = this.currentGame.put(piece, square);\n    if (success) {\n      this.currentGame._updateSetup();\n    }\n    return success;\n  }\n\n  remove(square /* string, e.g. 'a1' */) {\n    return this.currentGame.remove(square);\n  }\n\n  rewindToBeginning() {\n    return this.currentGame.rewindToBeginning();\n  }\n\n  selectMove(i) {\n    return this.currentGame._selectMove(i, { shouldLog: true });\n  }\n\n  toFen(\n    options = {\n      omitExtras: false,\n    }\n  ) {\n    return this.currentGame.currentVariation.toFen(options);\n  }\n\n  validateFen(fen) {\n    return Fen.validate(fen);\n  }\n}\n\nmodule.exports = Chess;\n","'use strict';\n\nconst Color = require('./../src/color');\n\nclass MoveContext {\n\n    // default constructor\n    constructor(options) {\n        this.move = options.move;  // Move object from move.js\n\n        this.castlingEligibility = { \n            [Color.WHITE]: options.castlingEligibility[Color.WHITE],\n            [Color.BLACK]: options.castlingEligibility[Color.BLACK]\n        };\n        this.kings = { \n            [Color.WHITE]: options.kings[Color.WHITE],\n            [Color.BLACK]: options.kings[Color.BLACK]\n        };\n\n        this.turn = options.turn;\n        this.enPassantSquare = options.enPassantSquare;\n\n        this.moveNumber = options.moveNumber;\n        this.halfMoves = options.halfMoves;\n        this.plyCount = options.plyCount;\n\n        this.metadata = options.metadata;\n\n        // TODO these original members are now, or should be!, in this.metadata\n        // this.timeTakenToMove = options.timeTakenToMove;\n        // this.comment = options.comment;\n        // this.isPuzzleSolution = options.isPuzzleSolution;\n\n        this.childVariations = [];\n    }\n\n    toString() {\n        return this.move.algebraic;\n    }\n\n    // for more succinct console.log() output\n    inspect() {\n        return this.toString();\n    }\n\n};\n\nmodule.exports = MoveContext;\n","'use strict';\n\nconst BoardVariation = require('../src/board_variation');\nconst Color = require('./../src/color');\nconst EventLog = require('./../src/event_log');\nconst Fen = require('../src/fen');\nconst Flags = require('./../src/flags');\nconst LinkedHashMap = require('../src/linked_hash_map');\nconst Move = require('./../src/move');\nconst PieceType = require('./../src/piece_type');\n\nclass Game {\n\n    constructor(\n        fen = Fen.DEFAULT_POSITION_FULL,  /* string, e.g. 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1' */\n        pgnHeaderPairs = []\n    ) {\n        // EventLog for tracking all player interactions\n        this.eventLog = new EventLog();\n\n        // a chess's PGN header applies to all of its variations\n        this.header = new LinkedHashMap(pgnHeaderPairs);\n\n\t\t// our board state information will always reside within the context of a given line of play, i.e. variation\n        if (fen) {\n            this.currentVariation = BoardVariation.createFromFen(fen, this.eventLog);\n\n            if (fen !== Fen.DEFAULT_POSITION_FULL) {\n                this.header.set('SetUp', '1');\n                this.header.set('FEN', fen);\n            }\n        } else {\n            this.currentVariation = new BoardVariation(this.eventLog);\n        }\n\n  \t\t// to store any continuations/variations\n        this.boardVariations = [this.currentVariation];\n    }\n\n    toString() {\n        let pgn = this.toPgn({\n            maxWidth: 0,\n            newlineChar: '\\n',\n            showMoveCursor: true,\n            showHeaders: false\n        });\n\n        let lineSize = Math.max(80, Math.floor(pgn.length / 4));\n\n        let pgnLines = [];\n        for (let i = 0; i < pgn.length;) {\n            let start = i;\n            i += lineSize;\n            while (pgn.charAt(i) != ' ' && i < pgn.length) {\n                i++;\n            }\n            pgnLines.push(pgn.substring(start,i));\n        }\n\n        let result = '';\n\n        let asciiLines = this.currentVariation.toString().split(\"\\n\");\n        let tallies = ` : (variations: ${this.boardVariations.length}, move history length: ${this.currentVariation.moveHistory.length}, selected index: ${this.currentVariation.selectedMoveHistoryIndex})`;\n        for(let i = 0; i < asciiLines.length; i++) {\n            result += asciiLines[i];\n\n            if (this.currentVariation.turn === Color.WHITE) {\n                if (i == 9) result += tallies;\n            } else {\n                if (i == 0) result += tallies;\n            }\n\n            if (i >= 2 && pgnLines.length > i-2) result += '  ' + pgnLines[i-2];\n            if (i == 7) result += '  ' + this.currentVariation.toFen();\n            result += '\\n';\n        }\n        return result;\n    }\n\n    loadFen(fen) {\n        let variation = BoardVariation.createFromFen(fen);\n        if (variation) {\n            this.currentVariation = variation;\n            this._updateSetup();\n            this.boardVariations = [variation];\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    makeMove(\n        move,  /* Move object from move.js */\n        metadata = {}\n    ) {\n        metadata = Object.assign({}, {\n            comment: null,  /* string */\n            timeTakenToMove: null,  /* int */\n            isPuzzleSolution: null  /* boolean */\n        }, metadata);\n\n        return this.currentVariation.makeMove(move, this, metadata);\n    }\n\n    makeMoveFromSan(\n        san,  /* string, e.g. \"Rxa7\" or \"e8=Q#\" */\n        metadata = {}\n    ) {\n        metadata = Object.assign({}, {\n            comment: null,  /* string */\n            timeTakenToMove: null,  /* int */\n            isPuzzleSolution: null  /* boolean */\n        }, metadata);\n\n        return this.currentVariation.makeMoveFromSan(san, this, metadata);\n    }\n\n    makeMoveFromAlgebraic(\n        from /* e.g. 'a4', 'b3' */,\n        to   /* e.g. 'a4', 'b3' */,\n        promotionPieceType = PieceType.QUEEN,\n        metadata = {}\n    ) {\n        metadata = Object.assign({}, {\n            comment: null,  /* string */\n            timeTakenToMove: null,  /* int */\n            isPuzzleSolution: null  /* boolean */\n        }, metadata);\n\n        return this.currentVariation.makeMoveFromAlgebraic(from, to, this, promotionPieceType, metadata);\n    }\n\n    toPgn(options = {}) {\n        options = Object.assign({}, {\n            maxWidth: 0,\n            newlineChar: '\\n',\n            showMoveCursor: false,\n            showHeaders: true\n        }, options);\n\n        let result = [];\n\n        // add the PGN header information\n        if (options.showHeaders) {\n            for (let i = 0; i < this.header.length(); i++) {\n                result.push(`[${this.header.getKeyAtPosition(i)} \"${this.header.getValueAtPosition(i)}\"]${options.newlineChar}`);\n            }\n            if (this.header.length() > 0) {\n                result.push(options.newlineChar);\n            }\n        }\n\n        let outermostVariation = this.boardVariations[0];\n        const moves = processVariation(outermostVariation, 1, this.currentVariation);\n\n        function processVariation(variation, pgnMoveNum, currentVariation) {\n            let moves = [];\n            let variationMoveString = '';\n            let justStartedVariation = false;\n            let justFinishedVariation = false;\n\n            // initial leading annotation slot\n            if (variation.intraMoveAnnotationSlots[0]) {\n                moves = moves.concat(variation.intraMoveAnnotationSlots[0]);\n            }\n\n            for (let i = 0; i < variation.moveHistory.length; i++) {\n\n                //\n                // #1: process move\n                //\n\n                let moveContext = variation.moveHistory[i];\n\n                justStartedVariation = (i == 0);\n\n                // if the position started with black to move, start PGN with 1. ...\n                if (justStartedVariation && moveContext.move.movedPiece.color === Color.BLACK) {\n                    moves.push(pgnMoveNum + '...');\n                    pgnMoveNum++;\n                } else if ((justStartedVariation || justFinishedVariation) && moveContext.move.movedPiece.color === Color.BLACK && !variation.isContinuation) {\n                    moves.push((pgnMoveNum-1) + '...');\n\n                } else if (moveContext.move.movedPiece.color === Color.WHITE) {\n                    moves.push(pgnMoveNum + '.');\n                    pgnMoveNum++;\n                }\n\n                moves.push((moveContext.move.isWildcard ? Move.WILDCARD_MOVE : moveContext.move.san));\n\n                if (options.showMoveCursor) {\n                    let isCurrentlySelectedMove = variation === currentVariation && i === currentVariation.selectedMoveHistoryIndex;\n                    if (isCurrentlySelectedMove) {\n                        moves.push(' ^');\n                    }\n                }\n\n                //\n                // #2: process annotations\n                //\n\n                if (variation.intraMoveAnnotationSlots[i+1]) {\n                    moves = moves.concat(variation.intraMoveAnnotationSlots[i+1]);\n                }\n\n                //\n                // #3: process variations\n                //\n\n                justFinishedVariation = false;\n                if (variation.moveHistory[i].childVariations.length > 0) {\n\n                    if (variation.intraMoveAnnotationSlots[i+1]) {\n                        moves.concat(variation.intraMoveAnnotationSlots[i+1]);\n                    }\n\n                    for (let j = 0; j < variation.moveHistory[i].childVariations.length; j++) {\n                        let childVariation = variation.moveHistory[i].childVariations[j];\n\n                        let variationMoves = processVariation(childVariation, pgnMoveNum - (childVariation.isContinuation ? 0 : 1), currentVariation);\n\n                        if (variationMoves.length == 0) {  // an empty variation\n                            moves.push(\"()\");\n                        } else {\n                            for(let k = 0; k < variationMoves.length; k++) {\n                                variationMoveString = variationMoves[k];\n\n                                if (k == 0) {\n                                    variationMoveString = '(' + (childVariation.isContinuation ? '* ' : '') + variationMoveString;\n                                }\n                                if (k == variationMoves.length-1) {\n                                    variationMoveString = variationMoveString + ')';\n                                }\n\n                                moves.push(variationMoveString);\n                            }\n                        }\n\n                        justFinishedVariation = true;\n                    }\n                }\n            }\n\n            return moves;\n        }\n\n        // is there a result?\n        const resultHeader = this.header.get('Result');\n        if (resultHeader) {\n            moves.push(resultHeader);\n        }\n\n        // history should be back to what is was before we started generating PGN, so join together moves\n        if (options.maxWidth === 0) {\n            return result.join('') + moves.join(' ');\n        }\n\n        // wrap the PGN output at maxWidth -- TODO, revisit whether you want to linewrap inside a move, e.g. for \"1. e4\" --> \"1.\\ne4\"\n        let currentWidth = 0;\n        for (let i = 0; i < moves.length; i++) {\n            // if the current move will push past maxWidth\n            if (currentWidth + moves[i].length > options.maxWidth && i !== 0) {\n\n                // don't end the line with whitespace\n                if (result[result.length - 1] === ' ') {\n                    result.pop();\n                }\n\n                result.push(options.newlineChar);\n                currentWidth = 0;\n            } else if (i !== 0) {\n                result.push(' ');\n                currentWidth++;\n            }\n            result.push(moves[i]);\n            currentWidth += moves[i].length;\n        }\n\n        return result.join('');\n    }\n\n    createContinuationFromSan(san /* string, e.g. \"Rxa7\" or \"e8=Q#\" */) {\n        this.eventLog.add(`createContinuationFromSan(${san})`);\n\n        return this.createVariationFromSan(san, true, { shouldLog: false });\n    }\n\n    createVariationFromSan(san /* string, e.g. \"Rxa7\" or \"e8=Q#\" */, isContinuation, options = {\n        shouldLog: true\n    }) {\n        if (options.shouldLog) {\n            this.eventLog.add(`createVariationFromSan(${san}, ${isContinuation})`);\n        }\n\n        if (san === null) {\n            return false;\n        }\n\n        if (isContinuation) {\n            if (this.currentVariation.selectedMoveHistoryIndex + 1 < this.currentVariation.moveHistory.length) {\n                const move = this.currentVariation.moveHistory[this.currentVariation.selectedMoveHistoryIndex + 1].move;\n                if (move.san === san) {\n                    return false;  // Continuation not created.  New move already exists as the next move in the current move sequence.\n                } else if (san === Move.WILDCARD_MOVE) {\n                    return false;  // Continuation not created.  New wildcard move already exists as the next move in the current move sequence.\n                }\n            }\n        } else {\n            const move = this.currentVariation.moveHistory[this.currentVariation.selectedMoveHistoryIndex].move;\n            if (move.san === san) {\n                return false;  // Variation not created.  New move already exists as the next move in the current move sequence.\n            } else if (san === Move.WILDCARD_MOVE) {\n                return false;  // Continuation not created.  New wildcard move already exists as the next move in the current move sequence.\n            }\n        }\n\n        let innerVariation = BoardVariation.createFromParentVariation(this.currentVariation, { isContinuation: isContinuation });\n        this.boardVariations.push(innerVariation);\n\n        // take the variation we just started, and append it to the list of variations that start from its \"parent\" move.\n        this.currentVariation.moveHistory[ this.currentVariation.selectedMoveHistoryIndex ].childVariations.push(innerVariation);\n\n        // down we go, into our new variation\n        this.currentVariation = innerVariation;\n\n        const move = Move.createFromSan(san, this.currentVariation);\n\n        if (!move) {  // requested move isn't possible, so undo our attempt at creating a variation\n            this.currentVariation = this.currentVariation.parentVariation;\n            this.currentVariation.moveHistory[ this.currentVariation.selectedMoveHistoryIndex ].childVariations.pop();\n            this.boardVariations.pop();\n\n            return false;\n        }\n\n        this.currentVariation.makeMove(move, this);\n\n        return true;\n    }\n\n    history() {\n        let moveHistory = [];\n        let tempVariation = this.currentVariation;\n\n        for (let i = tempVariation.selectedMoveHistoryIndex; i >= 0; i--) {\n            moveHistory.push(tempVariation.moveHistory[i].move.isWildcard ? Move.WILDCARD_MOVE : tempVariation.moveHistory[i].move.san);\n        }\n\n        let parentLastMoveIndex = tempVariation.parentLastMoveIndex;\n        let isContinuation = tempVariation.isContinuation;\n        tempVariation = tempVariation.parentVariation;\n\n        while (tempVariation != null) {\n            let i = parentLastMoveIndex;\n            if (! isContinuation) {\n                i--;\n            }\n\n            for (; i >= 0; i--) {\n                moveHistory.push(tempVariation.moveHistory[i].isWildcard ? Move.WILDCARD_MOVE : tempVariation.moveHistory[i].move.san);\n            }\n\n            parentLastMoveIndex = tempVariation.parentLastMoveIndex;\n            isContinuation = tempVariation.isContinuation;\n            tempVariation = tempVariation.parentVariation;\n        }\n\n        return moveHistory.reverse();\n    }\n\n    // ---------------\n    // navigation APIs\n    // ---------------\n\n    ascendFromCurrentContinuation(options = {\n        shouldLog: true\n    }) {\n        if (options.shouldLog) {\n            this.eventLog.add('ascendFromCurrentContinuation()');\n        }\n\n        if (this.currentVariation.parentVariation === null) {\n            // already at the topmost level;  nothing to do.\n            return false;\n        }\n\n        // this method differs from ascendFromCurrentVariation only here in this \"- 1\" offset\n        const selectedMoveIndex = this.currentVariation.parentLastMoveIndex - 1;\n        this.currentVariation = this.currentVariation.parentVariation;\n        this.currentVariation.selectedMoveIndex = selectedMoveIndex;\n\n        return this._selectMove(selectedMoveIndex);\n    }\n\n    ascendFromCurrentVariation(options = {\n        shouldLog: true\n    }) {\n        if (options.shouldLog) {\n            this.eventLog.add('ascendFromCurrentVariation()');\n        }\n\n        if (this.currentVariation.parentVariation === null) {\n            // already at the topmost level;  nothing to do.\n            return false;\n        }\n\n        const selectedMoveIndex = this.currentVariation.parentLastMoveIndex;\n        this.currentVariation = this.currentVariation.parentVariation;\n        this.currentVariation.selectedMoveIndex = selectedMoveIndex;\n\n        return true;\n    }\n\n    next(options = {\n        shouldLog: true\n    }) {\n        return this.currentVariation.next(options);\n    }\n\n    prev(options = {\n        shouldLog: true\n    }) {\n        if (options.shouldLog) {\n            this.eventLog.add('prev()');\n        }\n\n        if (this.currentVariation.selectedMoveHistoryIndex === 0 && this.currentVariation.parentVariation) {\n            if (this.ascendFromCurrentContinuation({ shouldLog: false })) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return this._selectMove(this.currentVariation.selectedMoveHistoryIndex - 1);\n        }\n    }\n\n    rewindToBeginning() {\n        this.eventLog.add('rewindToBeginning()');\n        while (this.prev({ shouldLog: false })) {}\n    }\n\n    replayToPlyNum(n /* logical ply number, starting from 1 */) {\n        return this.currentVariation.replayToPlyNum(n);  // TODO broken method logic;  game-level replay should unwind through multiple childVariations;\n        // think:  path from leaf to n ancestors up the tree\n    }\n\n    _updateSetup() {\n        if (this.currentVariation.moveHistory.length > 0) return;\n\n        const fen = this.currentVariation.toFen();\n\n        if (fen !== Fen.DEFAULT_POSITION) {\n            this.header.set('SetUp', '1');\n            this.header.set('FEN', fen);\n        } else {\n            this.header.remove('SetUp');\n            this.header.remove('FEN');\n        }\n    }\n\n    header() {\n        return this.header;\n    }\n\n    descendIntoContinuation(i = 0 /* defaults to the first variation */) {\n        this.eventLog.add('descendIntoContinuation()');\n\n        if (this.currentVariation.moveHistory.length <= 0) {\n            return false;\n        }\n\n        const currentMoveContext = this.currentVariation.moveHistory[this.currentVariation.selectedMoveHistoryIndex];\n        if (currentMoveContext.childVariations.length <= 0) {\n            return false;\n        }\n        if (i < 0 || i > currentMoveContext.childVariations.length - 1) {\n            return false;\n        }\n        if (! currentMoveContext.childVariations[i].isContinuation) {\n            return false;\n        }\n\n        this.currentVariation = currentMoveContext.childVariations[i];\n        this.currentVariation.selectedMoveHistoryIndex = 0;\n\n        return this._selectMove(0);\n    }\n\n    descendIntoVariation(i = 0 /* defaults to the first variation */) {\n        this.eventLog.add('descendIntoVariation()');\n\n        if (this.currentVariation.moveHistory.length <= 0) {\n            return false;\n        }\n\n        const currentMoveContext = this.currentVariation.moveHistory[this.currentVariation.selectedMoveHistoryIndex];\n        if (currentMoveContext.childVariations.length <= 0) {\n            return false;\n        }\n        if (i < 0 || i > currentMoveContext.childVariations.length - 1) {\n            return false;\n        }\n        if (currentMoveContext.childVariations[i].isContinuation) {\n            return false;\n        }\n\n        this.currentVariation = currentMoveContext.childVariations[i];\n        this.currentVariation.selectedMoveHistoryIndex = 0;\n\n        return this._selectMove(0);\n    }\n\n    // --------------------------------------\n    // pass-through API methods, alphabetized\n    // --------------------------------------\n\n    _selectMove(i, options = {\n        shouldLog: false\n    }) {\n        return this.currentVariation._selectMove(i, options);\n    }\n\n    get(square /* string, e.g. 'a1' */) {\n        return this.currentVariation.get(square);\n    }\n\n    isCheck()                { return this.currentVariation.isCheck();                }\n    isCheckmate()            { return this.currentVariation.isCheckmate();            }\n    isDraw()                 { return this.currentVariation.isDraw();                 }\n    isGameOver()             { return this.currentVariation.isGameOver();             }\n    isInsufficientMaterial() { return this.currentVariation.isInsufficientMaterial(); }\n    isStalemate()            { return this.currentVariation.isStalemate();            }\n    isThreefoldRepetition()  { return this.currentVariation.isThreefoldRepetition();  }\n\n    moves(options = {\n        onlyAlgebraicSquares: false,\n        onlyDestinationSquares: false,\n        onlyForSquare: undefined\n    }) {\n        return this.currentVariation.moves(options);\n    }\n\n    put(piece /* Piece, e.g. Piece.WHITE_ROOK */, square /* string, e.g. 'h8' */) {\n        return this.currentVariation.put(piece, square);\n    }\n\n    remove(square /* string, e.g. 'a1' */) {\n        const piece = this.currentVariation.remove(square);\n        this._updateSetup();\n\n        return piece;\n    }\n\n    toFen() {\n        return this.currentVariation.toFen();\n    }\n};\n\nmodule.exports = Game;","'use strict';\n\n// a lightweight map class that preserves key insertion order;\n// needed for parsing and reconstructing PGN headers\n\nclass LinkedHashMap\n{\n    constructor(pairs = []) {\n\t    this._map = {};\n\t    this._keys = [];\n\n        this.addAll(pairs);\n    }\n\t\n\taddAll(pairs) {\n        for (let i = 0; i < pairs.length; i += 2) {\n            this.set(pairs[i], pairs[i+1]);\n        }\n    }\n    \n    clear() {\n        this._map = {};\n        this._keys = [];\n    }\n    \n    get(k) { \n    \treturn this._map[k];\n    }\n    \n    getKeyAtPosition(i) { \n    \treturn this._keys[i];\n    }\n\n    getValueAtPosition(i) {\n    \treturn this._map[ this._keys[i] ];\n \t}\n\n    length() { \n    \treturn this._keys.length; \n    }\n\n    remove(k) {\n\t    if (k in this._map) {\n            let i = this._keys.indexOf(k);\n\t        this._keys.splice(i,1);\n\t        delete this._map[k];\n\t    }\n\t}\n    \n    set(k, v) {\n\t    if (! (k in this._map)) {\n\t        this._keys.push(k);\n\t    }\n\t    this._map[k] = v;\n\t}\n\n    toString() {\n        return '{ ' + this._keys.map(key => `${key}: ${this._map[key]}`).join(', ') + ' }';\n    }\n};\n\nmodule.exports = LinkedHashMap;","export const parseJSON = (jsonString: string) => JSON.parse(jsonString);\nexport const stringifyJSON = (jsonString: string) => JSON.stringify(jsonString);\n\nexport const styleToString = (style: any) => {\n  return Object.keys(style).reduce(\n    (acc, key) =>\n      acc +\n      key\n        .split(/(?=[A-Z])/)\n        .join(\"-\")\n        .toLowerCase() +\n      \":\" +\n      style[key] +\n      \";\",\n    \"\"\n  );\n};\n\nvar COLUMNS = \"abcdefgh\".split(\"\");\nfunction isObject(o: any) {\n  return Object.prototype.toString.call(o) === \"[object Object]\";\n}\nfunction isPlainObject(o: any) {\n  var ctor, prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\nfunction isString(s: any) {\n  return typeof s === \"string\";\n}\nfunction validSquare(square: any) {\n  return isString(square) && square.search(/^[a-h][1-8]$/) !== -1;\n}\nfunction validPieceCode(code: any) {\n  return isString(code) && code.search(/^[bw][KQRNBP]$/) !== -1;\n}\nfunction validPositionObject(pos: any) {\n  if (!isPlainObject(pos)) return false;\n\n  for (var i in pos) {\n    if (!pos.hasOwnProperty(i)) continue;\n\n    if (!validSquare(i) || !validPieceCode(pos[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n// convert bP, wK, etc code to FEN structure\nfunction pieceCodeToFen(piece: string) {\n  var pieceCodeLetters = piece.split(\"\");\n\n  // white piece\n  if (pieceCodeLetters[0] === \"w\") {\n    return pieceCodeLetters[1].toUpperCase();\n  }\n\n  // black piece\n  return pieceCodeLetters[1].toLowerCase();\n}\n// convert FEN piece code to bP, wK, etc\nfunction fenToPieceCode(piece: string) {\n  // black piece\n  if (piece.toLowerCase() === piece) {\n    return \"b\" + piece.toUpperCase();\n  }\n\n  // white piece\n  return \"w\" + piece.toUpperCase();\n}\nfunction squeezeFenEmptySquares(fen: string) {\n  return fen\n    .replace(/11111111/g, \"8\")\n    .replace(/1111111/g, \"7\")\n    .replace(/111111/g, \"6\")\n    .replace(/11111/g, \"5\")\n    .replace(/1111/g, \"4\")\n    .replace(/111/g, \"3\")\n    .replace(/11/g, \"2\");\n}\nfunction expandFenEmptySquares(fen: string) {\n  return fen\n    .replace(/8/g, \"11111111\")\n    .replace(/7/g, \"1111111\")\n    .replace(/6/g, \"111111\")\n    .replace(/5/g, \"11111\")\n    .replace(/4/g, \"1111\")\n    .replace(/3/g, \"111\")\n    .replace(/2/g, \"11\");\n}\nfunction validFen(fen: any) {\n  if (!isString(fen)) return false;\n\n  // cut off any move, castling, etc info from the end\n  // we're only interested in position information\n  fen = fen.replace(/ .+$/, \"\");\n\n  // expand the empty square numbers to just 1s\n  fen = expandFenEmptySquares(fen);\n\n  // FEN should be 8 sections separated by slashes\n  var chunks = fen.split(\"/\");\n  if (chunks.length !== 8) return false;\n\n  // check each section\n  for (var i = 0; i < 8; i++) {\n    if (chunks[i].length !== 8 || chunks[i].search(/[^kqrnbpKQRNBP1]/) !== -1) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport const objToFen = (obj: any) => {\n  if (!validPositionObject(obj)) return false;\n\n  var fen = \"\";\n\n  var currentRow = 8;\n  for (var i = 0; i < 8; i++) {\n    for (var j = 0; j < 8; j++) {\n      var square = COLUMNS[j] + currentRow;\n\n      // piece exists\n      if (obj.hasOwnProperty(square)) {\n        fen = fen + pieceCodeToFen(obj[square]);\n      } else {\n        // empty space\n        fen = fen + \"1\";\n      }\n    }\n\n    if (i !== 7) {\n      fen = fen + \"/\";\n    }\n\n    currentRow = currentRow - 1;\n  }\n\n  // squeeze the empty numbers together\n  fen = squeezeFenEmptySquares(fen);\n\n  return fen;\n};\n// convert FEN string to position object\n// returns false if the FEN string is invalid\nexport const fenToObj = (fen: any) => {\n  if (!validFen(fen)) return false;\n\n  // cut off any move, castling, etc info from the end\n  // we're only interested in position information\n  fen = fen.replace(/ .+$/, \"\");\n\n  var rows = fen.split(\"/\");\n  var position: any = {};\n\n  var currentRow = 8;\n  for (var i = 0; i < 8; i++) {\n    var row = rows[i].split(\"\");\n    var colIdx = 0;\n\n    // loop through each character in the FEN section\n    for (var j = 0; j < row.length; j++) {\n      // number / empty squares\n      if (row[j].search(/[1-8]/) !== -1) {\n        var numEmptySquares = parseInt(row[j], 10);\n        colIdx = colIdx + numEmptySquares;\n      } else {\n        // piece\n        var square = COLUMNS[colIdx] + currentRow;\n        position[square] = fenToPieceCode(row[j]);\n        colIdx = colIdx + 1;\n      }\n    }\n\n    currentRow = currentRow - 1;\n  }\n\n  return position;\n};\n","export const BOARD_MOVE_UPDATE = \"BOARD_MOVE_UPDATE\";\nexport const BOARD_MOVE_UNDO = \"BOARD_MOVE_UNDO\";\nexport const BOARD_FEN_UPDATE = \"BOARD_FEN_UPDATE\";\nexport const BOARD_PGN_UPDATE = \"BOARD_PGN_UPDATE\";\n","import { ChangeEvent, useEffect, useState } from \"react\";\nimport {\n  ChessInstance,\n  Move,\n  Piece,\n  PieceType,\n  ShortMove,\n  Square,\n} from \"chess.js\";\nimport {\n  Color,\n  Dests,\n  Key,\n  MoveMetadata,\n  Role,\n  SetPremoveMetadata,\n  Elements,\n} from \"chessground/types\";\nimport { fenToObj, parseJSON } from \"../utils/utils\";\nimport {\n  BOARD_FEN_UPDATE,\n  BOARD_MOVE_UNDO,\n  BOARD_MOVE_UPDATE,\n  BOARD_PGN_UPDATE,\n} from \"../constants/chessMultiplayerMsgTypes\";\n\nconst Chess = require(\"chess.js\");\nconst ChessES6 = require(\"../packages/chess-es6/src/chess.js\");\n// const Chess = require(\"../packages/chess-es6.js/src/chess.js\");\n// const Chess = require(\"../packages/chess.js/chess.js\");\ninterface IMovable {\n  free?: boolean; // all moves are valid - board editor\n  color?: Color | \"both\"; // color that can move. white | black | both | undefined\n  dests?: Dests; // valid moves. {\"a2\" [\"a3\" \"a4\"] \"b1\" [\"a3\" \"c3\"]}\n  showDests?: boolean; // whether to add the move-dest class on squares\n  events?: {\n    after?: (orig: Key, dest: Key, metadata: MoveMetadata) => void; // called after the move has been played\n    afterNewPiece?: (role: Role, key: Key, metadata: MoveMetadata) => void; // called after a new piece is dropped on the board\n  };\n  rookCastle?: boolean; // castle by moving the king to the rook\n}\n\ninterface IDraggable {\n  enabled?: boolean; // allow moves & premoves to use drag'n drop\n  distance?: number; // minimum distance to initiate a drag; in pixels\n  autoDistance?: boolean; // lets chessground set distance to zero when user drags pieces\n  showGhost?: boolean; // show ghost of piece being dragged\n  deleteOnDropOff?: boolean; // delete a piece when it is dropped off the board\n}\n\ninterface IPremovable {\n  enabled?: boolean; // allow premoves for color that can not move\n  showDests?: boolean; // whether to add the premove-dest class on squares\n  castle?: boolean; // whether to allow king castle premoves\n  dests?: Key[]; // premove destinations for the current selection\n  events?: {\n    set?: (orig: Key, dest: Key, metadata?: SetPremoveMetadata) => void; // called after the premove has been set\n    unset?: () => void; // called after the premove has been unset\n  };\n}\ninterface IPredroppable {\n  enabled?: boolean; // allow predrops for color that can not move\n  events?: {\n    set?: (role: Role, key: Key) => void; // called after the predrop has been set\n    unset?: () => void; // called after the predrop has been unset\n  };\n}\ninterface IEvents {\n  change?: () => void; // called after the situation changes on the board\n  // called after a piece has been moved.\n  // capturedPiece is undefined or like {color: 'white'; 'role': 'queen'}\n  move?: (orig: Key, dest: Key, capturedPiece?: any) => void;\n  dropNewPiece?: (piece: any, key: Key) => void;\n  select?: (key: Key) => void; // called when a square is selected\n  insert?: (elements: Elements) => void; // when the board DOM has been (re)inserted\n}\n\nconst defaultFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\n\nconst useChess = (Agora: any, Multiplayer: any) => {\n  const [chess] = useState<any>(\n    new Chess(\n      Object.fromEntries(new URLSearchParams(window.location.search).entries())\n        .fen || defaultFen\n    )\n  );\n  const [game] = useState<any>(new ChessES6(defaultFen));\n  const [promotionModal, setPromotionModal] = useState<boolean>(false);\n  const [state, setState] = useState<{\n    turn: \"w\" | \"b\";\n    fen: string;\n    orientation: \"white\" | \"black\";\n    pendingMove: { sourceSquare: any; targetSquare: any } | undefined;\n    dropSquareStyle: any;\n    squareStyles: any;\n    pieceSquare: any;\n    square: string;\n    history: any[];\n    boardPosition: any;\n    pgn: string;\n    undoMovesArray: any[];\n  }>({\n    turn: chess.turn() || \"w\",\n    fen: \"start\",\n    orientation: \"white\",\n    pendingMove: undefined,\n    // square styles for active drop square\n    dropSquareStyle: {},\n    // custom square styles\n    squareStyles: {},\n    // square with the currently clicked piece\n    pieceSquare: \"\",\n    // currently clicked square\n    square: \"\",\n    // array of past game moves\n    history: [],\n    boardPosition: {},\n    pgn: \"\",\n    undoMovesArray: [],\n  });\n\n  // useEffect(() => {\n  //   console.log(\"SQUARE_STYLES: \", state.squareStyles);\n  // }, [state.squareStyles]);\n  useEffect(() => {\n    console.log(\n      \"FEN: \",\n      Object.fromEntries(new URLSearchParams(window.location.search).entries())\n        .fen\n    );\n    if (\n      chess &&\n      Object.fromEntries(new URLSearchParams(window.location.search).entries())\n        .fen\n    ) {\n      chess.load(\n        Object.fromEntries(\n          new URLSearchParams(window.location.search).entries()\n        ).fen\n      );\n      game.loadFen(\n        Object.fromEntries(\n          new URLSearchParams(window.location.search).entries()\n        ).fen\n      );\n      setState({\n        ...state,\n        fen: Object.fromEntries(\n          new URLSearchParams(window.location.search).entries()\n        ).fen,\n      });\n    }\n  }, [chess]);\n\n  useEffect(() => {\n    console.log(\n      \"POSITION: \",\n      state.boardPosition,\n      chess.in_check(),\n      chess.turn()\n    );\n    chess.in_check() && inCheck(chess.turn());\n  }, [state.boardPosition]);\n\n  useEffect(() => {\n    console.log(\"UNDO MOVES: \", state.undoMovesArray);\n  }, [state.undoMovesArray]);\n\n  useEffect(() => {\n    console.log(\"AGORA_CHANNEL: \", Agora.channel);\n    if (Agora.channel) {\n      Agora.channel?.on(\"ChannelMessage\", (message: any) => {\n        const data = parseJSON(message.text);\n        // console.log(\"MESSAGE DATA: \", data);\n        switch (data.type) {\n          case BOARD_MOVE_UPDATE:\n            onDrop({\n              sourceSquare: data.json.move.from,\n              targetSquare: data.json.move.to,\n            });\n            break;\n          case BOARD_FEN_UPDATE:\n            console.log(\"PGNPRINT_LOADINGFEN...\");\n            chess.load(data.json.fen);\n            game.loadFen(data.json.fen);\n            console.log(\"PGNPRINT_FENUPDATE: \", data.json.fen);\n            setState({ ...state, fen: data.json.fen });\n            break;\n          case BOARD_PGN_UPDATE:\n            console.log(\"PGNPRING_LOADINGPGN...\", data);\n            chess.load_pgn(data.json.pgn);\n            game.loadPgn(data.json.pgn);\n            console.log(\"PGNPRINT_PGNUPDATE: \", data.json.pgn);\n            setState({ ...state, pgn: data.json.pgn, fen: chess.fen() });\n            break;\n          case BOARD_MOVE_UNDO:\n            const parametersObj = {\n              chess,\n              state,\n              setState,\n              undoArray: data.json.undoArray,\n            };\n            Multiplayer.undoMove(parametersObj);\n            break;\n          default:\n            console.log(\"INVALID OPERATION\");\n            break;\n        }\n      });\n    }\n  }, [Agora.channel]);\n  useEffect(() => {\n    console.log(\"PGN: \", state.pgn);\n  }, [state.pgn]);\n\n  const showPromotionModal = () => setPromotionModal(true);\n  const hidePromotionModal = () => setPromotionModal(false);\n\n  const setBoardPosition = (position: any) => {\n    setState({\n      ...state,\n      boardPosition: position,\n    });\n  };\n\n  const reset = () => {\n    chess.reset();\n    setState({\n      ...state,\n      fen: defaultFen,\n      boardPosition: fenToObj(defaultFen),\n    });\n  };\n\n  const flip = () => {\n    setState({\n      ...state,\n      orientation: state.orientation === \"white\" ? \"black\" : \"white\",\n    });\n  };\n\n  const removeHighlightSquare = () => {\n    const currKingPieceSquare = Object.keys(state.boardPosition).find(\n      (key: string) => state.boardPosition[key] === `${chess.turn()}K`\n    );\n    setState(({ pieceSquare, history }) => ({\n      ...state,\n      squareStyles:\n        chess.in_check() && currKingPieceSquare\n          ? { [currKingPieceSquare]: state.squareStyles[currKingPieceSquare] }\n          : squareStyling({ pieceSquare, history }),\n    }));\n  };\n\n  // show possible moves\n  const highlightSquare = (sourceSquare: any, squaresToHighlight: string[]) => {\n    const highlightStyles = [sourceSquare, ...squaresToHighlight].reduce(\n      (a, c) => {\n        return {\n          ...a,\n          ...{\n            [c]: {\n              background:\n                \"radial-gradient(circle, rgb(123,97,255,0.5) 20%, transparent 0%)\",\n              borderRadius: \"50%\",\n            },\n          },\n          ...squareStyling({\n            history: state.history,\n            pieceSquare: state.pieceSquare,\n          }),\n        };\n      },\n      {}\n    );\n\n    setState(({ squareStyles }) => ({\n      ...state,\n      squareStyles: { ...squareStyles, ...highlightStyles },\n    }));\n  };\n\n  const inCheck = (turn: string) => {\n    const checkedKingPos: any = Object.keys(state.boardPosition).find(\n      (key: string) => state.boardPosition[key] === `${turn}K`\n    );\n    console.log(\n      \"INCHECK: \",\n      Object.keys(state.boardPosition).find(\n        (key: string) => state.boardPosition[key] === `${turn}K`\n      )\n    );\n    setState({\n      ...state,\n      squareStyles: {\n        ...state.squareStyles,\n        [checkedKingPos]: { backgroundColor: \"red\" },\n      },\n    });\n  };\n\n  const onMouseOverSquare = (square: any) => {\n    // get list of possible moves for this square\n    const moves = chess.moves({\n      square,\n      verbose: true,\n    });\n    // const moves = game.moves({\n    //   onlyForSquare: square,\n    //   onlyAlgebraicSquares: true,\n    //   onlyDestinationSquares: true,\n    // });\n    // exit if there are no moves available for this square\n    if (moves.length === 0) return;\n\n    let squaresToHighlight = [];\n    for (const move of moves) {\n      squaresToHighlight.push(move.to);\n    }\n    console.log(\"SQUARESTOHIGHLIGHT: \", { moves, squaresToHighlight });\n    highlightSquare(square, squaresToHighlight);\n  };\n\n  const onMouseOutSquare = (square: any) => {\n    removeHighlightSquare();\n  };\n\n  const promotion = (\n    sourceSquare: any,\n    targetSquare: any,\n    e?: Exclude<any, \"p\" | \"k\">\n  ) => {\n    const from = sourceSquare;\n    const to = targetSquare;\n    chess.move({ from, to, promotion: e });\n    game.makeMoveFromAlgebraic(from, to, e);\n    setState({\n      ...state,\n      fen: chess.fen(),\n      pendingMove: undefined,\n    });\n    hidePromotionModal();\n  };\n\n  const onDrop = ({\n    sourceSquare,\n    targetSquare,\n    piece,\n  }: {\n    sourceSquare: any;\n    targetSquare: any;\n    piece?: string;\n  }) => {\n    // see if the move is legal\n    const move = chess.move({\n      from: sourceSquare,\n      to: targetSquare,\n      // promotion: \"q\", // always promote to a queen for example simplicity\n    });\n    const moves = chess.moves({ verbose: true });\n    for (let i = 0, len = moves.length; i < len; i++) {\n      /* eslint-disable-line */\n      if (moves[i].flags.includes(\"p\") && moves[i].from === sourceSquare) {\n        setState({\n          ...state,\n          pendingMove: { sourceSquare, targetSquare },\n        });\n        showPromotionModal();\n        return;\n      }\n    }\n\n    // illegal move\n    if (move === null) return;\n\n    console.log(\"ES6 MOVES: \", {\n      move: game.makeMoveFromAlgebraic(sourceSquare, targetSquare),\n      moves: game.moves({\n        onlyAlgebraicSquares: true,\n        onlyForSquare: sourceSquare,\n        onlyDestinationSquares: true,\n      }),\n      fen: game.toFen(),\n      pgn: game.toPgn(),\n      history: game.history(),\n      game,\n      header: game.header(),\n    });\n    game.makeMoveFromAlgebraic(sourceSquare, targetSquare);\n    setState(({ history, pieceSquare }) => ({\n      ...state,\n      turn: chess.turn(),\n      fen: chess.fen(),\n      pgn: game.toPgn(),\n      history: chess.history({ verbose: true }),\n      squareStyles: squareStyling({ pieceSquare, history }),\n    }));\n\n    const fens: any[] = [];\n    moves.forEach((m: any) => {\n      chess.move(m);\n      fens.push(chess.fen());\n      chess.undo();\n    });\n    console.log(\"FENS: \", fens);\n    // Multiplayer.updateBoard(move);\n    // Multiplayer.updateBoardFen(chess.fen());\n    Multiplayer.updateBoardPgn(game.toPgn());\n  };\n\n  const onSquareClick = (square: any) => {\n    setState(({ history }) => ({\n      ...state,\n      squareStyles: {\n        ...state.squareStyles,\n        ...squareStyling({ pieceSquare: square, history }),\n      },\n      pieceSquare: square,\n    }));\n    let move = chess.move({\n      from: state.pieceSquare,\n      to: square,\n      // promotion: \"q\", // always promote to a queen for example simplicity\n    });\n\n    const moves = chess.moves({ verbose: true });\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      /* eslint-disable-line */\n      if (moves[i].flags.includes(\"p\") && moves[i].from === state.pieceSquare) {\n        setState({\n          ...state,\n          pendingMove: {\n            sourceSquare: state.pieceSquare,\n            targetSquare: square,\n          },\n        });\n        // promotion(state.pieceSquare, square, \"q\");\n        showPromotionModal();\n        return;\n      }\n    }\n\n    // illegal move\n    if (move === null) return;\n\n    setState({\n      ...state,\n      turn: chess.turn(),\n      fen: chess.fen(),\n      pgn: chess.pgn(),\n      history: chess.history({ verbose: true }),\n      pieceSquare: \"\",\n    });\n    Multiplayer.updateBoard(move);\n  };\n\n  // central squares get diff dropSquareStyles\n  const onDragOverSquare = (square: any) => {\n    setState({\n      ...state,\n      dropSquareStyle:\n        square === \"e4\" || square === \"d4\" || square === \"e5\" || square === \"d5\"\n          ? { backgroundColor: \"cornFlowerBlue\" }\n          : { boxShadow: \"inset 0 0 1px 4px rgb(255, 255, 0)\" },\n    });\n  };\n\n  const onSquareRightClick = (square: any) =>\n    setState({\n      ...state,\n      squareStyles: { [square]: { backgroundColor: \"deepPink\" } },\n    });\n\n  const undoMove = () => {\n    const undoMoveObj = chess.undo();\n    if (undoMoveObj) {\n      console.log(\"ES6 MOVE UNDO: \", game.prev());\n      setState({\n        ...state,\n        fen: chess.fen(),\n        undoMovesArray: [...state.undoMovesArray, undoMoveObj],\n      });\n      Multiplayer.undoMoveMsg([...state.undoMovesArray, undoMoveObj]);\n    }\n  };\n  const redoMove = () => {\n    if (state.undoMovesArray.length === 0) return;\n    const redoMoveObj: any | undefined = state.undoMovesArray.pop();\n    console.log(\"REDO: \", redoMoveObj);\n    if (redoMoveObj) {\n      console.log(\"ES6 MOVE REDO: \", game.next());\n      const move = chess.move(redoMoveObj);\n      console.log(\"REDONE: \", move);\n      if (move !== null) {\n        setState(({ history, pieceSquare }) => ({\n          ...state,\n          fen: chess.fen(),\n          pgn: chess.pgn(),\n          history: chess.history({ verbose: true }),\n          squareStyles: squareStyling({ pieceSquare, history }),\n          // undoMovesArray: ,\n        }));\n\n        Multiplayer.updateBoard(move);\n      }\n    }\n  };\n\n  return {\n    turn: state.turn,\n    fen: state.fen,\n    pgn: state.pgn,\n    history: state.history,\n    orientation: state.orientation,\n    squareStyles: state.squareStyles,\n    pendingMove: state.pendingMove,\n    promotionModal,\n    setBoardPosition,\n    reset,\n    flip,\n    onDrop,\n    onMouseOverSquare,\n    onMouseOutSquare,\n    onDragOverSquare,\n    onSquareClick,\n    onSquareRightClick,\n    undoMove,\n    redoMove,\n    promotion,\n  };\n};\n\nconst squareStyling = ({\n  pieceSquare,\n  history,\n}: {\n  pieceSquare: any;\n  history: any;\n}) => {\n  const sourceSquare = history.length && history[history.length - 1].from;\n  const targetSquare = history.length && history[history.length - 1].to;\n\n  return {\n    [pieceSquare]: { backgroundColor: \"rgba(123,97,255,0.5)\" },\n    // ...(history.length && {\n    //   [sourceSquare]: {\n    //     backgroundColor: \"rgba(123,97,255,0.5)\",\n    //   },\n    // }),\n    ...(history.length && {\n      [targetSquare]: {\n        backgroundColor: \"rgba(123,97,255,0.5)\",\n      },\n    }),\n  };\n};\n\nexport default useChess;\n\n// To show promotional Modal or not\n// const showPromotionModal = () => setPromotionModal(true);\n// const hidePromotionModal = () => setPromotionModal(false);\n\n// const handleMove = (move: ShortMove) => {\n//   const moves = chess.moves({ verbose: true });\n\n//   for (let i = 0, len = moves.length; i < len; i++) {\n//     /* eslint-disable-line */\n//     if (moves[i].flags.indexOf(\"p\") !== -1 && moves[i].from === move.from) {\n//       setPendingMove([move.from, move.to]);\n//       // showPromotionModal();\n//       return;\n//     }\n//   }\n//   const moveVerbose = chess.move(move);\n//   if (moveVerbose) {\n//     setFen(chess.fen());\n//     Multiplayer.updateBoard(move);\n//   }\n// };\n\n// const calcMovable = (): IMovable => {\n//   const dests = new Map();\n//   chess.SQUARES.forEach((s) => {\n//     const ms = chess.moves({ square: s, verbose: true });\n//     if (ms.length)\n//       dests.set(\n//         s,\n//         ms.map((m) => m.to)\n//       );\n//   });\n\n//   return {\n//     free: false,\n//     dests: dests,\n//     showDests: true,\n//     events: {\n//       after: (from: any, to: any, metadeta: any) => {\n//         // console.log(\"metadata: \", { from, to, metadeta });\n//         return handleMove({ from: from, to: to });\n//       },\n//       afterNewPiece: (role: Role, key: Key, metaData: MoveMetadata) => {\n//         console.log(\"afterNewPiece: \", role, key, metaData);\n//       },\n//     },\n//     rookCastle: true,\n//   };\n// };\n\n// const calcDraggable = (): IDraggable => ({\n//   enabled: true,\n//   showGhost: false,\n//   deleteOnDropOff: false,\n// });\n","import { stringifyJSON } from \"./utils\";\nimport { RtmTextMessage } from \"agora-rtm-sdk\";\n\nconst messageParser = (json: any): RtmTextMessage => ({\n  text: stringifyJSON(json),\n  messageType: \"TEXT\",\n});\n\nconst agoraUtils = {\n  messageParser,\n};\n\nexport default agoraUtils;\n","import AgoraRTM, {\n  RtmChannel,\n  RtmClient,\n  RtmMessage,\n  RtmTextMessage,\n} from \"agora-rtm-sdk\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { parseJSON } from \"../utils/utils\";\nimport agoraUtils from \"../utils/agoraUtils\";\n\nconst useAgora = () => {\n  const [channel, setChannel] = useState<RtmChannel | null>(null);\n  const appId = \"402d13a7fc1947b988929adf142b60fb\";\n  const client: RtmClient | null = AgoraRTM.createInstance(appId);\n  let playerMeta = {\n    uid: (Math.floor(Math.random() * 90000) + 10000).toString(),\n    token: \"\",\n  };\n\n  useEffect(() => {\n    const playerLogin = async () => {\n      axios\n        .get(\n          `https://agoratokenserver-demo.herokuapp.com/access_token?channel=test&uid=${playerMeta.uid}`\n        )\n        .then((res: any) => {\n          console.log(res);\n          playerMeta.token = res.data?.token || \"\";\n          // console.log(\"LOGIN OPTIONS: \", playerMeta);\n          client.login(playerMeta).then(() => {\n            console.log(\"Login successful\");\n            const newChannel = client.createChannel(\"test\");\n            newChannel.join();\n            setChannel(newChannel);\n          });\n        });\n    };\n\n    playerLogin().then(() => {\n      console.log(\"integrations successful\");\n    });\n  }, []);\n\n  useEffect(() => {\n    if (channel) {\n      // channel?.on(\"ChannelMessage\", (message: any) => {\n      //   const data = parseJSON(message.text);\n      //   console.log(\"MESSAGE DATA: \", data);\n      // });\n\n      channel?.on(\"MemberJoined\", (memberId) => {\n        console.log(\"New member joined: \", memberId);\n      });\n      channel?.on(\"MemberLeft\", (memberId) => {\n        console.log(\"Member left: \", memberId);\n      });\n    }\n  }, [channel]);\n\n  const sendChannelMessage = (data: any, type: string) => {\n    const message = {\n      uid: playerMeta.uid,\n      json: data || {},\n      type,\n    };\n    console.log(agoraUtils.messageParser(message));\n    channel?.sendMessage(agoraUtils.messageParser(message)).then(() => {});\n  };\n\n  return { channel, playerMeta, sendChannelMessage };\n};\n\nexport default useAgora;\n","import { ChessInstance, Move, ShortMove } from \"chess.js\";\nimport React, { useEffect } from \"react\";\nimport {\n  BOARD_FEN_UPDATE,\n  BOARD_MOVE_UNDO,\n  BOARD_MOVE_UPDATE,\n  BOARD_PGN_UPDATE,\n} from \"../constants/chessMultiplayerMsgTypes\";\nimport { IMultiplayerProps } from \"../types/chessMultiplayer\";\nimport { parseJSON } from \"../utils/utils\";\n\ninterface IProps {\n  Agora: any;\n}\n\nconst useChessMultiplayer = (props: IProps) => {\n  const { Agora } = props;\n\n  const updateBoard = (move: ShortMove) => {\n    const updateObject = {\n      move: move,\n    };\n    Agora?.sendChannelMessage(updateObject, BOARD_MOVE_UPDATE);\n  };\n  const updateBoardFen = (fen: string) => {\n    const updateObject = {\n      fen: fen,\n    };\n    Agora?.sendChannelMessage(updateObject, BOARD_FEN_UPDATE);\n  };\n  const updateBoardPgn = (pgn: string) => {\n    const updateObject = {\n      pgn,\n    };\n    Agora?.sendChannelMessage(updateObject, BOARD_PGN_UPDATE);\n  };\n  const undoMoveMsg = (undoArray: Move[]) => {\n    const updateObject = {\n      undoArray: undoArray,\n    };\n    Agora?.sendChannelMessage(updateObject, BOARD_MOVE_UNDO);\n  };\n  const undoMove = ({\n    chess,\n    state,\n    setState,\n    undoArray,\n  }: {\n    chess: ChessInstance;\n    state: any;\n    setState: any;\n    undoArray: Move[];\n  }) => {\n    const undoMoveObj = chess.undo();\n    if (undoMoveObj) {\n      setState({\n        ...state,\n        fen: chess.fen(),\n        undoMovesArray: undoArray,\n      });\n    }\n  };\n\n  return { updateBoard, updateBoardFen, updateBoardPgn, undoMoveMsg, undoMove };\n};\n\nexport default useChessMultiplayer;\n","import { useEffect, useState } from \"react\";\nimport {\n  ChessInstance,\n  Move,\n  Piece,\n  PieceType,\n  ShortMove,\n  Square,\n} from \"chess.js\";\nimport { fenToObj, objToFen, parseJSON, styleToString } from \"../utils/utils\";\nimport { BOARD_MOVE_UPDATE } from \"../constants/chessMultiplayerMsgTypes\";\n\nconst Chess = require(\"chess.js\");\n\nconst defaultFen = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\";\nconst emptyBoardFen = \"8/8/8/8/8/8/8/8\";\n\nconst useBoardEditor = () => {\n  const [chess] = useState<ChessInstance>(new Chess(defaultFen));\n  const [state, setState] = useState<{\n    fen: string;\n    orientation: \"white\" | \"black\";\n    dropSquareStyle: any;\n    squareStyles: any;\n    pieceSquare: any;\n    square: string;\n    history: Move[];\n    boardPosition: any;\n    pgn: any;\n  }>({\n    fen: defaultFen,\n    orientation: \"white\",\n    // square styles for active drop square\n    dropSquareStyle: {},\n    // custom square styles\n    squareStyles: {},\n    // square with the currently clicked piece\n    pieceSquare: \"\",\n    // currently clicked square\n    square: \"\",\n    // array of past game moves\n    history: [],\n    boardPosition: fenToObj(defaultFen),\n    pgn: [],\n  });\n\n  // useEffect(() => {\n  //   console.log(\"ORIENTATION: \", state.orientation);\n  // }, [state.orientation]);\n\n  useEffect(() => {\n    console.log(\"BOARD_POSITION: \", objToFen(state.boardPosition));\n  }, [state.boardPosition]);\n\n  const setFenPosition = (fenString: string) => {\n    setState({\n      ...state,\n      fen: fenString,\n      boardPosition: fenToObj(fenString),\n    });\n  };\n\n  const setBoardPosition = (position: any) => {\n    setState({\n      ...state,\n      fen: objToFen(position) || state.fen,\n      boardPosition: position,\n    });\n  };\n\n  const reset = () => {\n    setState({\n      ...state,\n      fen: defaultFen,\n      boardPosition: fenToObj(defaultFen),\n    });\n  };\n  const clear = () => {\n    setState({\n      ...state,\n      fen: emptyBoardFen,\n      boardPosition: fenToObj(emptyBoardFen),\n    });\n  };\n\n  const flip = () => {\n    setState({\n      ...state,\n      orientation: state.orientation === \"white\" ? \"black\" : \"white\",\n    });\n  };\n\n  const onDrop = ({\n    sourceSquare,\n    targetSquare,\n    piece,\n  }: {\n    sourceSquare: Square | string;\n    targetSquare: Square;\n    piece?: string;\n  }) => {\n    console.log(\"EDITOR_ON_DROP: \", sourceSquare, targetSquare, piece);\n    let boardPosition;\n    boardPosition =\n      sourceSquare === \"spare\"\n        ? {\n            ...state.boardPosition,\n            [targetSquare]: piece,\n          }\n        : {\n            ...Object.fromEntries(\n              Object.entries(state.boardPosition).filter(\n                ([key, value]: [key: any, value: any]) => key !== sourceSquare\n              )\n            ),\n            [targetSquare]: piece,\n          };\n    console.log(\"BOARD_POSITION: \", boardPosition);\n    setState({\n      ...state,\n      fen: objToFen(boardPosition) || state.fen,\n      boardPosition,\n    });\n  };\n\n  return {\n    fen: state.fen,\n    pgn: state.pgn,\n    boardPosition: state.boardPosition,\n    orientation: state.orientation,\n    onDrop,\n    setBoardPosition,\n    setFenPosition,\n    reset,\n    clear,\n    flip,\n  };\n};\n\nexport default useBoardEditor;\n","import styled, { css } from \"styled-components\";\n\nconst chessboardEditorSidePanelStyle = css`\n  background-color: #2b2b34;\n  width: 386px;\n  border-radius: 0px 16px 16px 0px;\n`;\n\nexport const ScChessSidePanel = styled.div<{\n  editorMode: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  ${({ editorMode }) => editorMode && chessboardEditorSidePanelStyle}\n`;\n\nexport const GamePlayPanel1 = styled.div`\n  div {\n    padding: 14px;\n    cursor: pointer;\n  }\n`;\nexport const GamePlayPanel2 = styled.div`\n  div {\n    padding: 14px;\n    cursor: pointer;\n  }\n`;\n\nexport const ScChessHistoryPanel = styled.div`\n  position: relative;\n  /* width: 176px; */\n  /* height: 242px; */\n  background: #2b2b34;\n  border: 1.46px solid #424242;\n  box-sizing: border-box;\n  padding: 10px 0px;\n  .title {\n    display: flex;\n    margin-left: 10px;\n    img {\n      margin-right: 3px;\n    }\n    font-weight: bold;\n    font-size: 18px;\n    line-height: 21px;\n    color: #ffffff;\n    margin-bottom: 11px;\n  }\n  .pgn-section {\n    width: 100%;\n    padding: 10px;\n    /* .error {\n      display: none;\n      height: 0px;\n    }\n    .outerBoard {\n      display: none;\n      height: 0px; \n    }*/\n    .moves {\n      color: white;\n      font-size: 10px;\n      move-number {}\n      move {\n        color: white;\n      }\n    }\n    .comment {\n      .commentRadio {\n        color: white;\n        display: flex;\n        flex-direction: row;\n        justify-content: flex-start;\n        align-items: center;\n        margin: 5px 0px;\n          margin-right: 12px;\n        }\n      }\n    }\n  }\n`;\n\nexport const ScSidePanelNav = styled.div`\n  position: relative;\n  /* bottom: -52px; */\n  bottom: -1px;\n  left: -1.46px;\n  /* width: 176px; */\n  height: 51px;\n  background: #2b2b34;\n  border: 1.46px solid #424242;\n  /* border-top: 0px; */\n  border-bottom: 0px;\n  box-sizing: border-box;\n  display: flex;\n  justify-content: space-between;\n  padding: 13.14px;\n  img {\n    cursor: pointer;\n  }\n`;\n\nexport const EditorSidePanel = styled.div`\n  padding: 26px;\n  height: 100%;\n  .title {\n    font-style: normal;\n    font-weight: bold;\n    font-size: 24px;\n    line-height: 29px;\n    color: #ffffff;\n  }\n  .divider {\n    width: 100%;\n    height: 0.5px;\n    background: #ffffff;\n    opacity: 0.1;\n    margin: 13.5px 0;\n    margin-bottom: 156px;\n  }\n  .slider {\n    width: 100%;\n    height: 32px;\n    background: #e8edf9;\n    border-radius: 10px;\n    display: flex;\n    /* margin-bottom: 156px; */\n    div {\n      width: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n  }\n  label {\n    margin-bottom: 8px;\n    font-weight: 500;\n    font-size: 13px;\n    line-height: 16px;\n    text-transform: uppercase;\n    color: #ffffff;\n    opacity: 0.4;\n  }\n  .input-fen {\n    display: flex;\n    width: 100%;\n    margin-bottom: 24px;\n    input {\n      width: 100%;\n      height: 32px;\n      border-radius: 8px;\n    }\n  }\n  .output-fen {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 32px;\n    border-radius: 8px;\n    background: #ffffff;\n    overflow: hidden;\n    margin-bottom: 24px;\n    text-overflow: ellipsis;\n  }\n  .btn-panel {\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    button {\n      width: 32%;\n      height: 40px;\n      color: #ffffff;\n      font-weight: 600;\n      font-size: 17px;\n      line-height: 20px;\n      background: #5656ff;\n      border: 1px solid rgba(255, 255, 255, 0.4);\n      box-sizing: border-box;\n      border-radius: 10px;\n    }\n  }\n`;\n\nconst chessboardEditorModeStyle = css`\n  div[class$=\"-spare-pieces\"] {\n    position: absolute;\n    width: 340px;\n    display: flex;\n    justify-content: space-between;\n    div[data-testid^=\"spare-\"]:nth-child(odd) {\n      background: #b7c0d8;\n    }\n    div[data-testid^=\"spare-\"]:nth-child(even) {\n      background: #e8edf9;\n    }\n    div {\n      /* width: 100%; */\n      margin: 2px;\n      border-radius: 12px;\n      div {\n        img {\n          padding: 8px 10px;\n          width: 26px !important;\n          height: 28px !important;\n        }\n      }\n    }\n  }\n`;\n\nexport const ScPromotionModal = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: #2b2b34;\n  padding: 10px;\n  border-radius: 12px;\n  z-index: 6;\n  div:nth-child(odd) {\n    background: #b7c0d8;\n  }\n  div:nth-child(even) {\n    background: #e8edf9;\n  }\n  div {\n    margin: 2px;\n    border-radius: 12px;\n    img {\n      cursor: pointer;\n      padding: 8px 10px;\n      width: 26px;\n      height: 28px;\n    }\n  }\n`;\n\nexport const ScChessInterface = styled.div<{\n  dimension: number | undefined;\n  editorMode?: boolean;\n}>`\n  display: flex;\n  /* width: 1000px; */\n  /* height: fit-content; */\n  max-width: 1440px;\n  background: black;\n  grid-template-columns: 66% 37%;\n  grid-template-areas: \"board sidePanel\";\n  .board-container {\n    position: relative;\n    min-width: 500px;\n    min-height: 500px;\n    grid-area: board;\n    border: 10px solid rgba(255, 255, 255);\n    div {\n      ${({ editorMode }) => editorMode && chessboardEditorModeStyle}\n      .black-spare-pieces {\n        left: ${(props) =>\n          props.dimension ? `${props.dimension + 32}px` : \"0px\"};\n        bottom: ${(props) =>\n          props.dimension ? `${props.dimension - 130}px` : \"0px\"};\n\n        /* background:grey; */\n      }\n      .white-spare-pieces {\n        left: ${(props) =>\n          props.dimension ? `${props.dimension + 32}px` : \"0px\"};\n        bottom: ${(props) =>\n          props.dimension ? `${props.dimension - 190}px` : \"0px\"};\n        /* background:grey; */\n      }\n    }\n  }\n\n  ${ScChessSidePanel} {\n    grid-area: sidePanel;\n    /* width: 100%; */\n    /* height: 100%; */\n    ${GamePlayPanel1}, ${GamePlayPanel2} {\n      background: #2b2b34;\n      border: 2px solid rgba(255, 255, 255, 0.1);\n      border-radius: 0 8px 8px 0;\n    }\n  }\n`;\n\n// export const ScChessPgn = styled.div`\n//   color: white;\n// `;\n","export default __webpack_public_path__ + \"static/media/undoMove.586eb02f.svg\";","export default __webpack_public_path__ + \"static/media/redoMove.c6f42448.svg\";","export default __webpack_public_path__ + \"static/media/history.8223d0ff.svg\";","export default __webpack_public_path__ + \"static/media/resetBoard.7af0fcde.svg\";","export default __webpack_public_path__ + \"static/media/flipBoard.c1ef8478.svg\";","export default __webpack_public_path__ + \"static/media/loadGame.28f8774a.svg\";","export default __webpack_public_path__ + \"static/media/wK.3b342df8.svg\";","export default __webpack_public_path__ + \"static/media/wQ.785db365.svg\";","export default __webpack_public_path__ + \"static/media/wB.56f72474.svg\";","export default __webpack_public_path__ + \"static/media/wR.33cf0258.svg\";","export default __webpack_public_path__ + \"static/media/wN.d5fa39eb.svg\";","export default __webpack_public_path__ + \"static/media/wP.5f74a9fe.svg\";","export default __webpack_public_path__ + \"static/media/bK.e57316c7.svg\";","export default __webpack_public_path__ + \"static/media/bQ.c21470b8.svg\";","export default __webpack_public_path__ + \"static/media/bB.1f023e3e.svg\";","export default __webpack_public_path__ + \"static/media/bR.2724e583.svg\";","export default __webpack_public_path__ + \"static/media/bN.a46c4723.svg\";","export default __webpack_public_path__ + \"static/media/bP.d9262a65.svg\";","export default __webpack_public_path__ + \"static/media/arrowLeft.7e025148.svg\";","export default __webpack_public_path__ + \"static/media/arrowRight.ae8c68ee.svg\";","import React, { useEffect, useLayoutEffect } from \"react\";\nimport * as uuid from \"uuid\";\nimport { pgnView, pgnEdit, pgnPrint } from \"@mliebelt/pgn-viewer\";\n\ninterface IProps {\n  pgn: string | undefined;\n  mode: string;\n}\nconst PGNViewer = ({ pgn, mode }: IProps) => {\n  const pgnConfig = {\n    pgn,\n    timerTime: \"1\",\n    startPlay: pgn\n      ?.split(/\\d\\./)\n      .join(\"\")\n      .split(\" \")\n      .filter((item: string) => item !== \"\").length,\n    showResult: true,\n    boardSize: \"160\",\n    showFen: false,\n    showCoords: false,\n    figurine: true,\n    movesHeight: \"78px\",\n    // layout: \"left\",\n    // pieceStyle: \"merida\",\n  };\n  const id = `board-0`;\n\n  const mutationCallback = (mutationsList: any, observer: any) => {\n    // console.log(\"PGNPRINTMUTATION: \", mutationList);\n    for (const mutation of mutationsList) {\n      if (mutation.type === \"childList\") {\n        document.getElementById(`${id}Buttonpgn`)?.click();\n        console.log(\n          \"PGNPRINT: \",\n          document.getElementById(`textpgn${id}Button`)?.innerHTML\n        );\n        document.getElementById(`${id}Buttonpgn`)?.click();\n      }\n    }\n  };\n  useEffect(() => {\n    console.log(\n      \"PGNPRINTBUTTON: \",\n      document.getElementById(`${id}Buttonpgn`)?.click()\n    );\n\n    const movesDiv = document.getElementById(`${id}Moves`);\n    const config = { attributes: true, childList: true, subtree: true };\n    const observer = new MutationObserver(mutationCallback);\n    movesDiv && observer.observe(movesDiv, config);\n  }, [document.getElementById(`${id}Buttonpgn`)]);\n\n  useEffect(() => {\n    console.log(\n      \"PGNPRINT: \",\n      document.getElementById(`textpgn${id}Button`)?.innerHTML,\n      document.getElementById(`${id}Buttonpgn`)?.click()\n    );\n  }, [document.getElementById(`textpgn${id}Button`)]);\n  useLayoutEffect(() => {\n    switch (mode) {\n      case \"view\":\n        pgnView(id, pgnConfig);\n        break;\n      case \"edit\":\n        pgnEdit(id, pgnConfig);\n        break;\n      case \"print\":\n        pgnPrint(id, pgnConfig);\n\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  return <div id={id}></div>;\n};\n\nconst areEqual = (prevProps: IProps, nextProps: IProps) => {\n  return prevProps.pgn === nextProps.pgn ? true : false;\n};\n\nexport default React.memo(PGNViewer, areEqual);\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport NativeChessboard from \"chessboardjsx\";\nimport useChess from \"../../hooks/useChess\";\nimport useAgora from \"../../hooks/useAgora\";\nimport useChessMultiplayer from \"../../hooks/useChessMultiplayer\";\nimport useBoardEditor from \"../../hooks/useBoardEditor\";\nimport { IChessboardProps } from \"../../types/chessboardTypes\";\nimport {\n  // ScChessPgn,\n  ScChessInterface,\n  ScChessSidePanel,\n  GamePlayPanel1,\n  GamePlayPanel2,\n  EditorSidePanel,\n  ScChessHistoryPanel,\n  ScSidePanelNav,\n  ScPromotionModal,\n} from \"../_StyledComponent/StyledComponent\";\nimport undoIcon from \"../../assets/images/sidePanelIcons/undoMove.svg\";\nimport redoIcon from \"../../assets/images/sidePanelIcons/redoMove.svg\";\nimport historyIcon from \"../../assets/images/sidePanelIcons/history.svg\";\nimport resetIcon from \"../../assets/images/sidePanelIcons/resetBoard.svg\";\nimport flipIcon from \"../../assets/images/sidePanelIcons/flipBoard.svg\";\nimport loadIcon from \"../../assets/images/sidePanelIcons/loadGame.svg\";\nimport wK from \"../../assets/images/chessPieces/wK.svg\";\nimport wQ from \"../../assets/images/chessPieces/wQ.svg\";\nimport wB from \"../../assets/images/chessPieces/wB.svg\";\nimport wR from \"../../assets/images/chessPieces/wR.svg\";\nimport wN from \"../../assets/images/chessPieces/wN.svg\";\nimport wP from \"../../assets/images/chessPieces/wP.svg\";\nimport bK from \"../../assets/images/chessPieces/bK.svg\";\nimport bQ from \"../../assets/images/chessPieces/bQ.svg\";\nimport bB from \"../../assets/images/chessPieces/bB.svg\";\nimport bR from \"../../assets/images/chessPieces/bR.svg\";\nimport bN from \"../../assets/images/chessPieces/bN.svg\";\nimport bP from \"../../assets/images/chessPieces/bP.svg\";\nimport arrowLeft from \"../../assets/images/arrowLeft.svg\";\nimport arrowRight from \"../../assets/images/arrowRight.svg\";\nimport PGNViewer from \"../PGNViewer/PGNViewer\";\nimport { parse } from \"@mliebelt/pgn-parser\";\n\ninterface Props {}\n\ninterface ICustomPieceProps {\n  squareWidth: number;\n  isDragging: boolean;\n}\n\nconst SidePanelMenu = ({\n  undoMove,\n  redoMove,\n  flip,\n  reset,\n  setSidePanelSection,\n}: {\n  undoMove: any;\n  redoMove: any;\n  flip: any;\n  reset: any;\n  setSidePanelSection: any;\n}) => (\n  <>\n    <GamePlayPanel1>\n      <div onClick={undoMove}>\n        <img src={undoIcon} alt=\"Undo\" />\n      </div>\n      <div onClick={redoMove}>\n        <img src={redoIcon} alt=\"Redo\" />\n      </div>\n      <div>\n        <img\n          src={historyIcon}\n          alt=\"History\"\n          onClick={() => {\n            setSidePanelSection(\"history\");\n          }}\n        />\n      </div>\n      <div>\n        <img src={resetIcon} alt=\"Reset\" onClick={reset} />\n      </div>\n      <div>\n        <img src={flipIcon} alt=\"Flip\" onClick={flip} />\n      </div>\n    </GamePlayPanel1>\n    <GamePlayPanel2>\n      <div>\n        <input\n          type=\"file\"\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            // boardEditor.setInputFen(e.target.value);\n            const reader = new FileReader();\n            reader.onload = async (e: any) => {\n              const text = e?.target?.result;\n              const pgnGamesArray: any = parse(text, { startRule: \"games\" });\n              console.log(\"GAMES_LIST: \", pgnGamesArray);\n              // console.log(\n              //   \"FIRST_GAME: \",\n              //   pgnGamesArray?.[0].moves\n              //     .map((m: any) => `${m?.moveNumber ? `${m.moveNumber}.` : \"\"}${m.notation.notation} `)\n              //     .join(\"\")\n              // );\n              if (pgnGamesArray?.[0].tags.FEN) {\n              } else {\n              }\n            };\n            e.target.files && reader.readAsText(e.target.files[0]);\n          }}\n        />\n        <img src={loadIcon} alt=\"Load\" />\n      </div>\n    </GamePlayPanel2>\n  </>\n);\n\nconst ChessInterface = (props: Props) => {\n  const [dimension, setDimension] = useState<number>();\n  // const [undoMove, setUndoMove] = useState<boolean>(false);\n  const [editorMode, setEditorMode] = useState<boolean>(\n    Object.fromEntries(new URLSearchParams(window.location.search).entries())\n      .editorMode === \"true\" || false\n  );\n  const [sidePanelSection, setSidePanelSection] = useState<string | undefined>(\n    \"menu\"\n  );\n  // const [overlay, setOverlay] = useState(new ChessboardArrows(\"board-0\"));\n\n  const Agora = useAgora();\n  const Multiplayer = useChessMultiplayer({\n    Agora,\n  });\n  const boardEditor = useBoardEditor();\n  const {\n    turn,\n    setBoardPosition,\n    reset,\n    flip,\n    orientation,\n    pendingMove,\n    fen,\n    pgn,\n    history,\n    promotionModal,\n    onDrop,\n    onMouseOverSquare,\n    onMouseOutSquare,\n    squareStyles,\n    onDragOverSquare,\n    onSquareClick,\n    onSquareRightClick,\n    undoMove,\n    redoMove,\n    promotion,\n  } = useChess(Agora, Multiplayer);\n  let firstChild: Element | null | undefined;\n  let lastChild: Element | null | undefined;\n\n  useEffect(() => {\n    updateDimensions();\n    window.addEventListener(\"resize\", updateDimensions);\n\n    return () => window.removeEventListener(\"resize\", updateDimensions);\n  }, []);\n  useEffect(() => {\n    const boardContainerDiv = window.document\n      .getElementById(\"board-container\")\n      ?.querySelector<HTMLElement>(\"div\");\n    //   ?.querySelector(\"div\")\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    firstChild = boardContainerDiv?.firstElementChild;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    lastChild = boardContainerDiv?.lastElementChild;\n\n    if (firstChild && lastChild) {\n      firstChild.classList.add(\"black-spare-pieces\");\n      lastChild.classList.add(\"white-spare-pieces\");\n      firstChild.setAttribute(\"style\", \"\");\n      lastChild.setAttribute(\"style\", \"\");\n    }\n  }, [window.document.getElementById(\"board-container\")]);\n  // useEffect(() => {\n  //   console.log(\"HISTORY: \", history);\n  // }, [history]);\n  // useEffect(() => {\n\n  const updateDimensions = () => {\n    setDimension(\n      window.document.getElementById(\"board-container\")?.clientWidth\n    );\n  };\n\n  const customPieces = {\n    wK: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={wK}\n        alt={\"wK\"}\n      />\n    ),\n    wQ: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={wQ}\n        alt={\"wQ\"}\n      />\n    ),\n    wB: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={wB}\n        alt={\"wB\"}\n      />\n    ),\n    wR: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={wR}\n        alt={\"wR\"}\n      />\n    ),\n    wN: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={wN}\n        alt={\"wN\"}\n      />\n    ),\n    wP: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={wP}\n        alt={\"wP\"}\n      />\n    ),\n\n    bK: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={bK}\n        alt={\"bK\"}\n      />\n    ),\n    bQ: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={bQ}\n        alt={\"bQ\"}\n      />\n    ),\n    bB: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={bB}\n        alt={\"bB\"}\n      />\n    ),\n    bR: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={bR}\n        alt={\"bR\"}\n      />\n    ),\n    bN: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={bN}\n        alt={\"bN\"}\n      />\n    ),\n    bP: ({ squareWidth, isDragging }: ICustomPieceProps) => (\n      <img\n        style={{\n          width: squareWidth,\n          height: squareWidth,\n        }}\n        src={bP}\n        alt={\"bP\"}\n      />\n    ),\n  };\n\n  let chessboardConfig: Partial<IChessboardProps> = {\n    id: \"board-0\",\n    position: editorMode ? boardEditor.boardPosition : fen,\n    dropOffBoard: editorMode ? \"trash\" : \"snapback\",\n    draggable: true,\n    lightSquareStyle: { backgroundColor: \"#E8EDF9\" },\n    darkSquareStyle: { backgroundColor: \"#B7C0D8\" },\n    pieces: customPieces,\n    boardStyle: {\n      width: dimension,\n      height: dimension,\n      position: \"relative\",\n    },\n    width: dimension,\n\n    getPosition: editorMode ? boardEditor.setBoardPosition : setBoardPosition,\n    ...(editorMode ? { onDrop: boardEditor.onDrop } : { onDrop }),\n    // onDrop,\n    orientation: editorMode ? boardEditor.orientation : orientation || \"white\",\n    ...(!editorMode && {\n      onMouseOverSquare,\n      onMouseOutSquare,\n      squareStyles,\n      onDragOverSquare,\n      onSquareClick,\n      onSquareRightClick,\n    }),\n    sparePieces: editorMode,\n  };\n\n  const renderHistoryPanel = () => (\n    <ScChessHistoryPanel>\n      <div className=\"title\">\n        <img src={historyIcon} alt=\"\" />\n        History\n      </div>\n\n      {/* <table className=\"pgn\">\n          {pgn?.split(/\\d\\./)?.map?.(\n            (move: string, index: number) =>\n              index !== 0 && (\n                <tr>\n                  <td>{index}</td>\n                  {move\n                    .split(\" \")\n                    .filter((item: string) => item !== \"\")\n                    .map((singleMove: string, i: number) => (\n                      <td>{singleMove}</td>\n                    ))}\n                </tr>\n              )\n          )}\n        </table> */}\n      <div className=\"pgn-section\">\n        {pgn && <PGNViewer pgn={pgn} mode=\"edit\"></PGNViewer>}\n      </div>\n      <ScSidePanelNav>\n        <img\n          src={arrowLeft}\n          alt=\"\"\n          onClick={() => {\n            setSidePanelSection(\"menu\");\n          }}\n        />\n        <img src={arrowRight} alt=\"\" />\n      </ScSidePanelNav>\n    </ScChessHistoryPanel>\n  );\n  const renderSidePanel = () => {\n    switch (sidePanelSection) {\n      case \"menu\":\n        return (\n          <SidePanelMenu\n            undoMove={undoMove}\n            redoMove={redoMove}\n            reset={reset}\n            flip={flip}\n            setSidePanelSection={setSidePanelSection}\n          />\n        );\n      case \"history\":\n        return renderHistoryPanel();\n\n      default:\n        return (\n          <SidePanelMenu\n            undoMove={undoMove}\n            redoMove={redoMove}\n            reset={reset}\n            flip={flip}\n            setSidePanelSection={setSidePanelSection}\n          />\n        );\n    }\n  };\n  const renderPromotionModal = (\n    <ScPromotionModal>\n      <div>\n        <img\n          src={turn === \"w\" ? wQ : bQ}\n          alt=\"\"\n          width={dimension && dimension / 8}\n          height={dimension && dimension / 8}\n          onClick={() => {\n            pendingMove &&\n              promotion(\n                pendingMove.sourceSquare,\n                pendingMove.targetSquare,\n                \"q\"\n              );\n          }}\n        />\n      </div>\n      <div>\n        <img\n          src={turn === \"w\" ? wB : bB}\n          alt=\"\"\n          width={dimension && dimension / 8}\n          height={dimension && dimension / 8}\n          onClick={() => {\n            pendingMove &&\n              promotion(\n                pendingMove.sourceSquare,\n                pendingMove.targetSquare,\n                \"b\"\n              );\n          }}\n        />\n      </div>\n      <div>\n        <img\n          src={turn === \"w\" ? wR : bR}\n          alt=\"\"\n          width={dimension && dimension / 8}\n          height={dimension && dimension / 8}\n          onClick={() => {\n            pendingMove &&\n              promotion(\n                pendingMove.sourceSquare,\n                pendingMove.targetSquare,\n                \"r\"\n              );\n          }}\n        />\n      </div>\n      <div>\n        <img\n          src={turn === \"w\" ? wN : bN}\n          alt=\"\"\n          width={dimension && dimension / 8}\n          height={dimension && dimension / 8}\n          onClick={() => {\n            pendingMove &&\n              promotion(\n                pendingMove.sourceSquare,\n                pendingMove.targetSquare,\n                \"n\"\n              );\n          }}\n        />\n      </div>\n    </ScPromotionModal>\n  );\n\n  return (\n    <ScChessInterface dimension={dimension} editorMode={editorMode}>\n      <div id=\"board-container\" className=\"board-container\">\n        {promotionModal && renderPromotionModal}\n        <NativeChessboard {...chessboardConfig} />\n        {/* <PGNViewer pgn={pgn} mode=\"edit\" /> */}\n      </div>\n      {/* {!editorMode && ( */}\n      <ScChessSidePanel editorMode={editorMode}>\n        {editorMode ? (\n          <EditorSidePanel>\n            <div className=\"title\">Board Settings</div>\n            <div className=\"divider\"></div>\n            <label htmlFor=\"inputFen\">Fen</label>\n            <div className=\"input-fen\">\n              <input\n                name=\"inputFen\"\n                type=\"text\"\n                value={boardEditor?.fen}\n                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                  boardEditor.setFenPosition(e.target.value);\n                }}\n              />\n            </div>\n            <div className=\"btn-panel\">\n              <button onClick={boardEditor.reset}>Reset</button>\n              <button onClick={boardEditor.clear}>Clear</button>\n              <button onClick={boardEditor?.flip}>Flip</button>\n            </div>\n          </EditorSidePanel>\n        ) : (\n          <>{renderSidePanel()}</>\n        )}\n      </ScChessSidePanel>\n      {/* )} */}\n    </ScChessInterface>\n  );\n};\n\nexport default ChessInterface;\n","import React from \"react\";\nimport \"./app.scss\";\nimport ChessInterface from \"./components/ChessInterface/ChessInterface\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <ChessInterface />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}