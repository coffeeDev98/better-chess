{"version":3,"sources":["constants/chessMultiplayerMsgTypes.ts","hooks/useChess.tsx","utils/utils.ts","hooks/useChessMultiplayer.tsx","utils/agoraUtils.ts","hooks/useAgora.tsx","assets/images/chessPieces/wK.svg","assets/images/chessPieces/wQ.svg","assets/images/chessPieces/wB.svg","assets/images/chessPieces/wR.svg","assets/images/chessPieces/wN.svg","assets/images/chessPieces/wP.svg","assets/images/chessPieces/bK.svg","assets/images/chessPieces/bQ.svg","assets/images/chessPieces/bB.svg","assets/images/chessPieces/bR.svg","assets/images/chessPieces/bN.svg","assets/images/chessPieces/bP.svg","components/Chessboard/Chessboard.tsx","components/_StyledComponent/StyledComponent.tsx","components/ChessInterface/ChessInterface.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BOARD_MOVE_UPDATE","Chess","require","squareStyling","pieceSquare","history","targetSquare","length","from","to","backgroundColor","useChess","Agora","Multiplayer","useState","chess","fen","dropSquareStyle","squareStyles","square","boardPosition","state","setState","useEffect","console","log","channel","on","message","jsonString","data","text","JSON","parse","type","onDrop","sourceSquare","json","move","promotion","e","moves","verbose","i","len","flags","indexOf","updateBoard","setBoardPosition","position","onMouseOverSquare","squaresToHighlight","push","highlightStyles","reduce","a","c","background","borderRadius","highlightSquare","onMouseOutSquare","onDragOverSquare","boxShadow","onSquareClick","onSquareRightClick","useChessMultiplayer","props","updateObject","sendChannelMessage","agoraUtils","messageParser","stringify","messageType","useAgora","setChannel","client","AgoraRTM","createInstance","playerMeta","uid","Math","floor","random","toString","token","axios","get","then","res","login","newChannel","createChannel","join","playerLogin","memberId","sendMessage","Chessboard","dimension","customPieces","wK","squareWidth","isDragging","style","width","height","src","alt","wQ","wB","wR","wN","wP","bK","bQ","bB","bR","bN","bP","getPosition","lightSquareStyle","darkSquareStyle","pieces","boardStyle","ScChessInterface","Styled","div","ChessInterface","setDimension","updateDimensions","window","addEventListener","removeEventListener","document","getElementById","clientWidth","id","className","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sPAAaA,EAAoB,oBCqB3BC,EAAQC,EAAQ,IAiShBC,EAAgB,SAAC,GAMhB,IALLC,EAKI,EALJA,YACAC,EAII,EAJJA,QAMMC,GADeD,EAAQE,QAAUF,EAAQA,EAAQE,OAAS,GAAGC,KAC9CH,EAAQE,QAAUF,EAAQA,EAAQE,OAAS,GAAGE,IAEnE,OAAO,2BACJL,EAAc,CAAEM,gBAAiB,yBAM9BL,EAAQE,QAAR,eACDD,EAAe,CACdI,gBAAiB,2BAMVC,EAzQE,SAACC,EAAYC,GAAsB,IAAD,EACjCC,mBACd,IAAIb,EAAM,6DADLc,EAD0C,sBAIvBD,mBAQvB,CACDE,IAAK,QAELC,gBAAiB,GAEjBC,aAAc,GAEdd,YAAa,GAEbe,OAAQ,GAERd,QAAS,GACTe,cAAe,KAxBgC,mBAI1CC,EAJ0C,KAInCC,EAJmC,KA2BjDC,qBAAU,WACRC,QAAQC,IAAI,mBAAoBJ,EAAMD,iBACrC,CAACC,EAAMD,gBAEVG,qBAAU,WACY,IAAD,EAAfX,EAAMc,UACR,UAAAd,EAAMc,eAAN,SAAeC,GAAG,kBAAkB,SAACC,GACnC,ICxGkBC,EDwGZC,GCxGYD,EDwGKD,EAAQG,KCxGUC,KAAKC,MAAMJ,ID0GpD,OADAL,QAAQC,IAAI,iBAAkBK,GACtBA,EAAKI,MACX,KAAKlC,EACHmC,EAAO,CACLC,aAAcN,EAAKO,KAAKC,KAAK9B,KAC7BF,aAAcwB,EAAKO,KAAKC,KAAK7B,KAE/B,MACF,QACEe,QAAQC,IAAI,4BAKnB,CAACb,EAAMc,UAEV,IAOMa,EAAY,SAChBH,EACA9B,EACAkC,GAEA,IAAMhC,EAAO4B,EACP3B,EAAKH,EACXS,EAAMuB,KAAK,CAAE9B,OAAMC,KAAI8B,UAAWC,IAClClB,EAAS,2BACJD,GADG,IAENL,IAAKD,EAAMC,UA+DTmB,EAAS,SAAC,GAcd,IARK,IALLC,EAKI,EALJA,aACA9B,EAII,EAJJA,aAMIgC,EAAOvB,EAAMuB,KAAK,CACpB9B,KAAM4B,EACN3B,GAAIH,IAGAmC,EAAQ1B,EAAM0B,MAAM,CAAEC,SAAS,IAC5BC,EAAI,EAAGC,EAAMH,EAAMlC,OAAQoC,EAAIC,EAAKD,IAE3C,IACmC,IAAjCF,EAAME,GAAGE,MAAMC,QAAQ,MACvBL,EAAME,GAAGnC,OAAS4B,EAMlB,OAHAZ,QAAQC,IAAI,kCACZc,EAAUH,EAAc9B,EAAc,KAO7B,OAATgC,IACJhB,GAAS,gBAAGjB,EAAH,EAAGA,QAASD,EAAZ,EAAYA,YAAZ,mBAAC,eACLiB,GADI,IAEPL,IAAKD,EAAMC,MACXX,QAASU,EAAMV,QAAQ,CAAEqC,SAAS,IAClCxB,aAAcf,EAAc,CAAEC,cAAaC,iBAG7CQ,EAAYkC,YAAYT,KA2D1B,MAAO,CACLU,iBAjLuB,SAACC,GACxB3B,EAAS,2BACJD,GADG,IAEND,cAAe6B,MA+KjBjC,IAAKK,EAAML,IACXmB,SACAe,kBAtHwB,SAAC/B,GAEzB,IAAIsB,EAAQ1B,EAAM0B,MAAM,CACtBtB,OAAQA,EACRuB,SAAS,IAIX,GAAqB,IAAjBD,EAAMlC,OAAV,CAGA,IADA,IAAI4C,EAAqB,GAChBR,EAAI,EAAGA,EAAIF,EAAMlC,OAAQoC,IAChCQ,EAAmBC,KAAKX,EAAME,GAAGlC,IAEnCe,QAAQC,IAAI,uBAAwB0B,GA9Cd,SACtBf,EACAe,GAEA,IAAME,EAAkB,CAACjB,GAAD,mBAAkBe,IAAoBG,QAC5D,SAACC,EAAGC,GACF,OAAO,uCACFD,GADL,eAGKC,EAAI,CACHC,WACE,mEACFC,aAAc,SAGfvD,EAAc,CACfE,QAASgB,EAAMhB,QACfD,YAAaiB,EAAMjB,iBAIzB,IAGFkB,GAAS,gBAAGJ,EAAH,EAAGA,aAAH,mBAAC,eACLG,GADI,IAEPH,aAAa,2BAAMA,GAAiBmC,QAqBtCM,CAAgBxC,EAAQgC,KAwGxBS,iBAzHuB,SAACzC,GArCxBG,GAAS,gBAAGlB,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,QAAhB,mBAAC,eACLgB,GADI,IAEPH,aAAcf,EAAc,CAAEC,cAAaC,kBA6J7Ca,aAAcG,EAAMH,aACpB2C,iBAvBuB,SAAC1C,GACxBG,EAAS,2BACJD,GADG,IAENJ,gBACa,OAAXE,GAA8B,OAAXA,GAA8B,OAAXA,GAA8B,OAAXA,EACrD,CAAET,gBAAiB,kBACnB,CAAEoD,UAAW,0CAkBrBC,cAhEoB,SAAC5C,GACrBG,GAAS,gBAAGjB,EAAH,EAAGA,QAAH,mBAAC,eACLgB,GADI,IAEPH,aAAcf,EAAc,CAAEC,YAAae,EAAQd,YACnDD,YAAae,OASf,IAPA,IAAImB,EAAOvB,EAAMuB,KAAK,CACpB9B,KAAMa,EAAMjB,YACZK,GAAIU,IAIAsB,EAAQ1B,EAAM0B,MAAM,CAAEC,SAAS,IAC5BC,EAAI,EAAGC,EAAMH,EAAMlC,OAAQoC,EAAIC,EAAKD,IAE3C,IACmC,IAAjCF,EAAME,GAAGE,MAAMC,QAAQ,MACvBL,EAAME,GAAGnC,OAASa,EAAMjB,YAMxB,OAHAoB,QAAQC,IAAI,kCACZc,EAAUlB,EAAMjB,YAAae,EAAQ,KAO5B,OAATmB,IAEJhB,EAAS,2BACJD,GADG,IAENL,IAAKD,EAAMC,MACXX,QAASU,EAAMV,QAAQ,CAAEqC,SAAS,IAClCtC,YAAa,MAEfS,EAAYkC,YAAYT,KA6BxB0B,mBAfyB,SAAC7C,GAAD,OACzBG,EAAS,2BACJD,GADG,IAENH,aAAa,eAAIC,EAAS,CAAET,gBAAiB,mBEhRpCuD,EAZa,SAACC,GAAmB,IACtCtD,EAAUsD,EAAVtD,MAQR,MAAO,CAAEmC,YANW,SAACT,GACnB,IAAM6B,EAAe,CACnB7B,KAAMA,GAEH,OAAL1B,QAAK,IAALA,KAAOwD,mBAAmBD,EAAcnE,M,4ECL7BqE,EAJI,CACjBC,cANoB,SAACjC,GAAD,MAAgC,CACpDN,MFH4BF,EEGRQ,EFH+BL,KAAKuC,UAAU1C,IEIlE2C,YAAa,QFJc,IAAC3C,IGwEf4C,EA9DE,WAAO,IAAD,EACS3D,mBAA4B,MADrC,mBACdY,EADc,KACLgD,EADK,KAGfC,EAA2BC,IAASC,eAD5B,oCAEVC,EAAa,CACfC,KAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAoB,KAAOC,WACjDC,MAAO,IAGT7D,qBAAU,YACS,uCAAG,sBAAAgC,EAAA,sDAClB8B,IACGC,IADH,oFAEiFR,EAAWC,MAEzFQ,MAAK,SAACC,GAAc,IAAD,EAClBhE,QAAQC,IAAI+D,GACZV,EAAWM,OAAQ,UAAAI,EAAI1D,YAAJ,eAAUsD,QAAS,GAEtCT,EAAOc,MAAMX,GAAYS,MAAK,WAC5B/D,QAAQC,IAAI,oBACZ,IAAMiE,EAAaf,EAAOgB,cAAc,QACxCD,EAAWE,OACXlB,EAAWgB,SAbC,2CAAH,qDAkBjBG,GAAcN,MAAK,WACjB/D,QAAQC,IAAI,gCAEb,IAEHF,qBAAU,WACJG,IAMK,OAAPA,QAAO,IAAPA,KAASC,GAAG,gBAAgB,SAACmE,GAC3BtE,QAAQC,IAAI,sBAAuBqE,MAE9B,OAAPpE,QAAO,IAAPA,KAASC,GAAG,cAAc,SAACmE,GACzBtE,QAAQC,IAAI,gBAAiBqE,SAGhC,CAACpE,IAYJ,MAAO,CAAEA,UAASoD,aAAYV,mBAVH,SAACtC,EAAWI,GACrC,IAAMN,EAAU,CACdmD,IAAKD,EAAWC,IAChB1C,KAAMP,EACNI,KAAMA,GAERV,QAAQC,IAAI4C,EAAWC,cAAc1C,IAC9B,OAAPF,QAAO,IAAPA,KAASqE,YAAY1B,EAAWC,cAAc1C,IAAU2D,MAAK,kBCnElD,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+BCA1B,MAA0B,+B,OC+N1BS,EApMI,SAAC9B,GAAmB,IAC7B+B,EAAc/B,EAAd+B,UACFrF,EAAQ6D,IACR5D,EAAcoD,EAAoB,CACtCrD,MAAOA,IAJ2B,EAgBhCD,EAASC,EAAOC,GATlBmC,EAPkC,EAOlCA,iBACAhC,EARkC,EAQlCA,IACAmB,EATkC,EASlCA,OACAe,EAVkC,EAUlCA,kBACAU,EAXkC,EAWlCA,iBACA1C,EAZkC,EAYlCA,aACA2C,EAbkC,EAalCA,iBACAE,EAdkC,EAclCA,cACAC,EAfkC,EAelCA,mBA0BIkC,EAAe,CACnBC,GAAI,gBAAGC,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKN,EACLO,IAAK,QAGTC,GAAI,gBAAGP,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKE,EACLD,IAAK,QAGTE,GAAI,gBAAGR,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKG,EACLF,IAAK,QAGTG,GAAI,gBAAGT,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKI,EACLH,IAAK,QAGTI,GAAI,gBAAGV,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKK,EACLJ,IAAK,QAGTK,GAAI,gBAAGX,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKM,EACLL,IAAK,QAITM,GAAI,gBAAGZ,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKO,EACLN,IAAK,QAGTO,GAAI,gBAAGb,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKQ,EACLP,IAAK,QAGTQ,GAAI,gBAAGd,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKS,EACLR,IAAK,QAGTS,GAAI,gBAAGf,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKU,EACLT,IAAK,QAGTU,GAAI,gBAAGhB,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKW,EACLV,IAAK,QAGTW,GAAI,gBAAGjB,EAAH,EAAGA,YAAH,EAAgBC,WAAhB,OACF,qBACEC,MAAO,CACLC,MAAOH,EACPI,OAAQJ,GAEVK,IAAKY,EACLX,IAAK,SAIX,OACE,mCAME,cAAC,IAAD,CACEzD,SAAUjC,EACVsG,YAAatE,EACbuE,iBAAkB,CAAE7G,gBAAiB,WACrC8G,gBAAiB,CAAE9G,gBAAiB,WACpC+G,OAAQvB,EACRwB,WAAY,CACVnB,MAAON,EACPO,OAAQP,EACRhD,SAAU,YAEZsD,MAAON,EACP9D,OAAQA,EACRe,kBAAmBA,EACnBU,iBAAkBA,EAClB1C,aAAcA,EACd2C,iBAAkBA,EAClBE,cAAeA,EACfC,mBAAoBA,O,QCtNf2D,E,MAAmBC,EAAOC,IAAV,geC0CdC,EArCQ,SAAC5D,GAAiB,MAMLpD,qBANK,mBAMhCmF,EANgC,KAMrB8B,EANqB,KAQvCxG,qBAAU,WAIR,OAHAyG,IACAC,OAAOC,iBAAiB,SAAUF,GAE3B,kBAAMC,OAAOE,oBAAoB,SAAUH,MACjD,IAEH,IAAMA,EAAmB,WAAO,IAAD,EAC7BD,EAAY,UACVE,OAAOG,SAASC,eAAe,0BADrB,aACV,EAAmDC,cAIvD,OACE,mCACE,eAACX,EAAD,WACE,qBAAKY,GAAG,kBAAkBC,UAAU,kBAApC,SACE,cAAC,EAAD,CACEvC,UAAWA,MAKf,qBAAKuC,UAAU,qBC1BRC,MARf,WACE,OACE,qBAAKD,UAAU,MAAf,SACE,cAAC,EAAD,OCOSE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrD,MAAK,YAAkD,IAA/CsD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASC,eAAe,SAM1BK,M","file":"static/js/main.2311519b.chunk.js","sourcesContent":["export const BOARD_MOVE_UPDATE = \"BOARD_MOVE_UPDATE\";\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  ChessInstance,\r\n  Move,\r\n  Piece,\r\n  PieceType,\r\n  ShortMove,\r\n  Square,\r\n} from \"chess.js\";\r\nimport {\r\n  Color,\r\n  Dests,\r\n  Key,\r\n  MoveMetadata,\r\n  Role,\r\n  SetPremoveMetadata,\r\n  Elements,\r\n} from \"chessground/types\";\r\nimport { parseJSON } from \"../utils/utils\";\r\nimport { BOARD_MOVE_UPDATE } from \"../constants/chessMultiplayerMsgTypes\";\r\n\r\nconst Chess = require(\"chess.js\");\r\n\r\ninterface IMovable {\r\n  free?: boolean; // all moves are valid - board editor\r\n  color?: Color | \"both\"; // color that can move. white | black | both | undefined\r\n  dests?: Dests; // valid moves. {\"a2\" [\"a3\" \"a4\"] \"b1\" [\"a3\" \"c3\"]}\r\n  showDests?: boolean; // whether to add the move-dest class on squares\r\n  events?: {\r\n    after?: (orig: Key, dest: Key, metadata: MoveMetadata) => void; // called after the move has been played\r\n    afterNewPiece?: (role: Role, key: Key, metadata: MoveMetadata) => void; // called after a new piece is dropped on the board\r\n  };\r\n  rookCastle?: boolean; // castle by moving the king to the rook\r\n}\r\n\r\ninterface IDraggable {\r\n  enabled?: boolean; // allow moves & premoves to use drag'n drop\r\n  distance?: number; // minimum distance to initiate a drag; in pixels\r\n  autoDistance?: boolean; // lets chessground set distance to zero when user drags pieces\r\n  showGhost?: boolean; // show ghost of piece being dragged\r\n  deleteOnDropOff?: boolean; // delete a piece when it is dropped off the board\r\n}\r\n\r\ninterface IPremovable {\r\n  enabled?: boolean; // allow premoves for color that can not move\r\n  showDests?: boolean; // whether to add the premove-dest class on squares\r\n  castle?: boolean; // whether to allow king castle premoves\r\n  dests?: Key[]; // premove destinations for the current selection\r\n  events?: {\r\n    set?: (orig: Key, dest: Key, metadata?: SetPremoveMetadata) => void; // called after the premove has been set\r\n    unset?: () => void; // called after the premove has been unset\r\n  };\r\n}\r\ninterface IPredroppable {\r\n  enabled?: boolean; // allow predrops for color that can not move\r\n  events?: {\r\n    set?: (role: Role, key: Key) => void; // called after the predrop has been set\r\n    unset?: () => void; // called after the predrop has been unset\r\n  };\r\n}\r\ninterface IEvents {\r\n  change?: () => void; // called after the situation changes on the board\r\n  // called after a piece has been moved.\r\n  // capturedPiece is undefined or like {color: 'white'; 'role': 'queen'}\r\n  move?: (orig: Key, dest: Key, capturedPiece?: Piece) => void;\r\n  dropNewPiece?: (piece: Piece, key: Key) => void;\r\n  select?: (key: Key) => void; // called when a square is selected\r\n  insert?: (elements: Elements) => void; // when the board DOM has been (re)inserted\r\n}\r\n\r\nconst useChess = (Agora: any, Multiplayer: any) => {\r\n  const [chess] = useState<ChessInstance>(\r\n    new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\")\r\n  );\r\n  const [state, setState] = useState<{\r\n    fen: string;\r\n    dropSquareStyle: any;\r\n    squareStyles: any;\r\n    pieceSquare: any;\r\n    square: string;\r\n    history: Move[];\r\n    boardPosition: any;\r\n  }>({\r\n    fen: \"start\",\r\n    // square styles for active drop square\r\n    dropSquareStyle: {},\r\n    // custom square styles\r\n    squareStyles: {},\r\n    // square with the currently clicked piece\r\n    pieceSquare: \"\",\r\n    // currently clicked square\r\n    square: \"\",\r\n    // array of past game moves\r\n    history: [],\r\n    boardPosition: {},\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(\"BOARD POSITION: \", state.boardPosition);\r\n  }, [state.boardPosition]);\r\n\r\n  useEffect(() => {\r\n    if (Agora.channel) {\r\n      Agora.channel?.on(\"ChannelMessage\", (message: any) => {\r\n        const data = parseJSON(message.text);\r\n        console.log(\"MESSAGE DATA: \", data);\r\n        switch (data.type) {\r\n          case BOARD_MOVE_UPDATE:\r\n            onDrop({\r\n              sourceSquare: data.json.move.from,\r\n              targetSquare: data.json.move.to,\r\n            });\r\n            break;\r\n          default:\r\n            console.log(\"INVALID OPERATION\");\r\n            break;\r\n        }\r\n      });\r\n    }\r\n  }, [Agora.channel]);\r\n\r\n  const setBoardPosition = (position: any) => {\r\n    setState({\r\n      ...state,\r\n      boardPosition: position,\r\n    });\r\n  };\r\n\r\n  const promotion = (\r\n    sourceSquare: Square,\r\n    targetSquare: Square,\r\n    e?: Exclude<PieceType, \"p\" | \"k\">\r\n  ) => {\r\n    const from = sourceSquare;\r\n    const to = targetSquare;\r\n    chess.move({ from, to, promotion: e });\r\n    setState({\r\n      ...state,\r\n      fen: chess.fen(),\r\n    });\r\n    // hidePromotionModal();\r\n  };\r\n\r\n  const removeHighlightSquare = () => {\r\n    setState(({ pieceSquare, history }) => ({\r\n      ...state,\r\n      squareStyles: squareStyling({ pieceSquare, history }),\r\n    }));\r\n  };\r\n\r\n  // show possible moves\r\n  const highlightSquare = (\r\n    sourceSquare: Square,\r\n    squaresToHighlight: string[]\r\n  ) => {\r\n    const highlightStyles = [sourceSquare, ...squaresToHighlight].reduce(\r\n      (a, c) => {\r\n        return {\r\n          ...a,\r\n          ...{\r\n            [c]: {\r\n              background:\r\n                \"radial-gradient(circle, rgb(123,97,255,0.5) 20%, transparent 0%)\",\r\n              borderRadius: \"50%\",\r\n            },\r\n          },\r\n          ...squareStyling({\r\n            history: state.history,\r\n            pieceSquare: state.pieceSquare,\r\n          }),\r\n        };\r\n      },\r\n      {}\r\n    );\r\n\r\n    setState(({ squareStyles }) => ({\r\n      ...state,\r\n      squareStyles: { ...squareStyles, ...highlightStyles },\r\n    }));\r\n  };\r\n\r\n  const onMouseOutSquare = (square: Square) => removeHighlightSquare();\r\n\r\n  const onMouseOverSquare = (square: Square) => {\r\n    // get list of possible moves for this square\r\n    let moves = chess.moves({\r\n      square: square,\r\n      verbose: true,\r\n    });\r\n\r\n    // exit if there are no moves available for this square\r\n    if (moves.length === 0) return;\r\n\r\n    let squaresToHighlight = [];\r\n    for (var i = 0; i < moves.length; i++) {\r\n      squaresToHighlight.push(moves[i].to);\r\n    }\r\n    console.log(\"SQUARESTOHIGHLIGHT: \", squaresToHighlight);\r\n    highlightSquare(square, squaresToHighlight);\r\n  };\r\n\r\n  const onDrop = ({\r\n    sourceSquare,\r\n    targetSquare,\r\n  }: {\r\n    sourceSquare: Square;\r\n    targetSquare: Square;\r\n  }) => {\r\n    // see if the move is legal\r\n    let move = chess.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      // promotion: \"q\", // always promote to a queen for example simplicity\r\n    });\r\n    const moves = chess.moves({ verbose: true });\r\n    for (let i = 0, len = moves.length; i < len; i++) {\r\n      /* eslint-disable-line */\r\n      if (\r\n        moves[i].flags.indexOf(\"p\") !== -1 &&\r\n        moves[i].from === sourceSquare\r\n      ) {\r\n        // setPendingMove([sourceSquare, targetSquare]);\r\n        console.log(\"opening promotional modal\");\r\n        promotion(sourceSquare, targetSquare, \"r\");\r\n        // showPromotionModal();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // illegal move\r\n    if (move === null) return;\r\n    setState(({ history, pieceSquare }) => ({\r\n      ...state,\r\n      fen: chess.fen(),\r\n      history: chess.history({ verbose: true }),\r\n      squareStyles: squareStyling({ pieceSquare, history }),\r\n    }));\r\n\r\n    Multiplayer.updateBoard(move);\r\n  };\r\n\r\n  const onSquareClick = (square: Square) => {\r\n    setState(({ history }) => ({\r\n      ...state,\r\n      squareStyles: squareStyling({ pieceSquare: square, history }),\r\n      pieceSquare: square,\r\n    }));\r\n    let move = chess.move({\r\n      from: state.pieceSquare,\r\n      to: square,\r\n      // promotion: \"q\", // always promote to a queen for example simplicity\r\n    });\r\n\r\n    const moves = chess.moves({ verbose: true });\r\n    for (let i = 0, len = moves.length; i < len; i++) {\r\n      /* eslint-disable-line */\r\n      if (\r\n        moves[i].flags.indexOf(\"p\") !== -1 &&\r\n        moves[i].from === state.pieceSquare\r\n      ) {\r\n        // setPendingMove([state.pieceSquare, targetSquare]);\r\n        console.log(\"opening promotional modal\");\r\n        promotion(state.pieceSquare, square, \"r\");\r\n        // showPromotionModal();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // illegal move\r\n    if (move === null) return;\r\n\r\n    setState({\r\n      ...state,\r\n      fen: chess.fen(),\r\n      history: chess.history({ verbose: true }),\r\n      pieceSquare: \"\",\r\n    });\r\n    Multiplayer.updateBoard(move);\r\n  };\r\n\r\n  // central squares get diff dropSquareStyles\r\n  const onDragOverSquare = (square: Square) => {\r\n    setState({\r\n      ...state,\r\n      dropSquareStyle:\r\n        square === \"e4\" || square === \"d4\" || square === \"e5\" || square === \"d5\"\r\n          ? { backgroundColor: \"cornFlowerBlue\" }\r\n          : { boxShadow: \"inset 0 0 1px 4px rgb(255, 255, 0)\" },\r\n    });\r\n  };\r\n\r\n  const onSquareRightClick = (square: Square) =>\r\n    setState({\r\n      ...state,\r\n      squareStyles: { [square]: { backgroundColor: \"deepPink\" } },\r\n    });\r\n\r\n  return {\r\n    setBoardPosition,\r\n    fen: state.fen,\r\n    onDrop,\r\n    onMouseOverSquare,\r\n    onMouseOutSquare,\r\n    squareStyles: state.squareStyles,\r\n    onDragOverSquare,\r\n    onSquareClick,\r\n    onSquareRightClick,\r\n  };\r\n};\r\n\r\nconst squareStyling = ({\r\n  pieceSquare,\r\n  history,\r\n}: {\r\n  pieceSquare: any;\r\n  history: any;\r\n}) => {\r\n  const sourceSquare = history.length && history[history.length - 1].from;\r\n  const targetSquare = history.length && history[history.length - 1].to;\r\n\r\n  return {\r\n    [pieceSquare]: { backgroundColor: \"rgba(123,97,255,0.5)\" },\r\n    // ...(history.length && {\r\n    //   [sourceSquare]: {\r\n    //     backgroundColor: \"rgba(123,97,255,0.5)\",\r\n    //   },\r\n    // }),\r\n    ...(history.length && {\r\n      [targetSquare]: {\r\n        backgroundColor: \"rgba(123,97,255,0.5)\",\r\n      },\r\n    }),\r\n  };\r\n};\r\n\r\nexport default useChess;\r\n\r\n// To show promotional Modal or not\r\n// const showPromotionModal = () => setPromotionModal(true);\r\n// const hidePromotionModal = () => setPromotionModal(false);\r\n\r\n// const handleMove = (move: ShortMove) => {\r\n//   const moves = chess.moves({ verbose: true });\r\n\r\n//   for (let i = 0, len = moves.length; i < len; i++) {\r\n//     /* eslint-disable-line */\r\n//     if (moves[i].flags.indexOf(\"p\") !== -1 && moves[i].from === move.from) {\r\n//       setPendingMove([move.from, move.to]);\r\n//       // showPromotionModal();\r\n//       return;\r\n//     }\r\n//   }\r\n//   const moveVerbose = chess.move(move);\r\n//   if (moveVerbose) {\r\n//     setFen(chess.fen());\r\n//     Multiplayer.updateBoard(move);\r\n//   }\r\n// };\r\n\r\n// const calcMovable = (): IMovable => {\r\n//   const dests = new Map();\r\n//   chess.SQUARES.forEach((s) => {\r\n//     const ms = chess.moves({ square: s, verbose: true });\r\n//     if (ms.length)\r\n//       dests.set(\r\n//         s,\r\n//         ms.map((m) => m.to)\r\n//       );\r\n//   });\r\n\r\n//   return {\r\n//     free: false,\r\n//     dests: dests,\r\n//     showDests: true,\r\n//     events: {\r\n//       after: (from: any, to: any, metadeta: any) => {\r\n//         // console.log(\"metadata: \", { from, to, metadeta });\r\n//         return handleMove({ from: from, to: to });\r\n//       },\r\n//       afterNewPiece: (role: Role, key: Key, metaData: MoveMetadata) => {\r\n//         console.log(\"afterNewPiece: \", role, key, metaData);\r\n//       },\r\n//     },\r\n//     rookCastle: true,\r\n//   };\r\n// };\r\n\r\n// const calcDraggable = (): IDraggable => ({\r\n//   enabled: true,\r\n//   showGhost: false,\r\n//   deleteOnDropOff: false,\r\n// });\r\n","export const parseJSON = (jsonString: string) => JSON.parse(jsonString);\r\nexport const stringifyJSON = (jsonString: string) => JSON.stringify(jsonString);\r\n","import { ShortMove } from \"chess.js\";\r\nimport React, { useEffect } from \"react\";\r\nimport { BOARD_MOVE_UPDATE } from \"../constants/chessMultiplayerMsgTypes\";\r\nimport { IMultiplayerProps } from \"../types/chessMultiplayer\";\r\nimport { parseJSON } from \"../utils/utils\";\r\n\r\ninterface IProps {\r\n  Agora: any;\r\n}\r\n\r\nconst useChessMultiplayer = (props: IProps) => {\r\n  const { Agora } = props;\r\n\r\n  const updateBoard = (move: ShortMove) => {\r\n    const updateObject = {\r\n      move: move,\r\n    };\r\n    Agora?.sendChannelMessage(updateObject, BOARD_MOVE_UPDATE);\r\n  };\r\n  return { updateBoard };\r\n};\r\n\r\nexport default useChessMultiplayer;\r\n","import { stringifyJSON } from \"./utils\";\r\nimport { RtmTextMessage } from \"agora-rtm-sdk\";\r\n\r\nconst messageParser = (json: any): RtmTextMessage => ({\r\n  text: stringifyJSON(json),\r\n  messageType: \"TEXT\",\r\n});\r\n\r\nconst agoraUtils = {\r\n  messageParser,\r\n};\r\n\r\nexport default agoraUtils;\r\n","import AgoraRTM, {\r\n  RtmChannel,\r\n  RtmClient,\r\n  RtmMessage,\r\n  RtmTextMessage,\r\n} from \"agora-rtm-sdk\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { parseJSON } from \"../utils/utils\";\r\nimport agoraUtils from \"../utils/agoraUtils\";\r\n\r\nconst useAgora = () => {\r\n  const [channel, setChannel] = useState<RtmChannel | null>(null);\r\n  const appId = \"f4b36b6c897e41bfaa3904d75da40777\";\r\n  const client: RtmClient | null = AgoraRTM.createInstance(appId);\r\n  let playerMeta = {\r\n    uid: (Math.floor(Math.random() * 90000) + 10000).toString(),\r\n    token: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    const playerLogin = async () => {\r\n      axios\r\n        .get(\r\n          `https://agoratokenserver-demo.herokuapp.com/access_token?channel=test&uid=${playerMeta.uid}`\r\n        )\r\n        .then((res: any) => {\r\n          console.log(res);\r\n          playerMeta.token = res.data?.token || \"\";\r\n          // console.log(\"LOGIN OPTIONS: \", playerMeta);\r\n          client.login(playerMeta).then(() => {\r\n            console.log(\"Login successful\");\r\n            const newChannel = client.createChannel(\"test\");\r\n            newChannel.join();\r\n            setChannel(newChannel);\r\n          });\r\n        });\r\n    };\r\n\r\n    playerLogin().then(() => {\r\n      console.log(\"integrations successful\");\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (channel) {\r\n      // channel?.on(\"ChannelMessage\", (message: any) => {\r\n      //   const data = parseJSON(message.text);\r\n      //   console.log(\"MESSAGE DATA: \", data);\r\n      // });\r\n\r\n      channel?.on(\"MemberJoined\", (memberId) => {\r\n        console.log(\"New member joined: \", memberId);\r\n      });\r\n      channel?.on(\"MemberLeft\", (memberId) => {\r\n        console.log(\"Member left: \", memberId);\r\n      });\r\n    }\r\n  }, [channel]);\r\n\r\n  const sendChannelMessage = (data: any, type: string) => {\r\n    const message = {\r\n      uid: playerMeta.uid,\r\n      json: data,\r\n      type: type,\r\n    };\r\n    console.log(agoraUtils.messageParser(message));\r\n    channel?.sendMessage(agoraUtils.messageParser(message)).then(() => {});\r\n  };\r\n\r\n  return { channel, playerMeta, sendChannelMessage };\r\n};\r\n\r\nexport default useAgora;\r\n","export default __webpack_public_path__ + \"static/media/wK.3b342df8.svg\";","export default __webpack_public_path__ + \"static/media/wQ.785db365.svg\";","export default __webpack_public_path__ + \"static/media/wB.56f72474.svg\";","export default __webpack_public_path__ + \"static/media/wR.33cf0258.svg\";","export default __webpack_public_path__ + \"static/media/wN.d5fa39eb.svg\";","export default __webpack_public_path__ + \"static/media/wP.5f74a9fe.svg\";","export default __webpack_public_path__ + \"static/media/bK.e57316c7.svg\";","export default __webpack_public_path__ + \"static/media/bQ.c21470b8.svg\";","export default __webpack_public_path__ + \"static/media/bB.1f023e3e.svg\";","export default __webpack_public_path__ + \"static/media/bR.2724e583.svg\";","export default __webpack_public_path__ + \"static/media/bN.a46c4723.svg\";","export default __webpack_public_path__ + \"static/media/bP.d9262a65.svg\";","import React from \"react\";\r\nimport useChess from \"../../hooks/useChess\";\r\nimport useChessMultiplayer from \"../../hooks/useChessMultiplayer\";\r\nimport NativeChessboard from \"chessboardjsx\";\r\nimport useAgora from \"../../hooks/useAgora\";\r\nimport wK from \"../../assets/images/chessPieces/wK.svg\";\r\nimport wQ from \"../../assets/images/chessPieces/wQ.svg\";\r\nimport wB from \"../../assets/images/chessPieces/wB.svg\";\r\nimport wR from \"../../assets/images/chessPieces/wR.svg\";\r\nimport wN from \"../../assets/images/chessPieces/wN.svg\";\r\nimport wP from \"../../assets/images/chessPieces/wP.svg\";\r\nimport bK from \"../../assets/images/chessPieces/bK.svg\";\r\nimport bQ from \"../../assets/images/chessPieces/bQ.svg\";\r\nimport bB from \"../../assets/images/chessPieces/bB.svg\";\r\nimport bR from \"../../assets/images/chessPieces/bR.svg\";\r\nimport bN from \"../../assets/images/chessPieces/bN.svg\";\r\nimport bP from \"../../assets/images/chessPieces/bP.svg\";\r\n\r\ninterface ICustomPieceProps {\r\n  squareWidth: number;\r\n  isDragging: boolean;\r\n}\r\n\r\ninterface IProps {\r\n  dimension: number | undefined;\r\n}\r\n\r\nconst Chessboard = (props: IProps) => {\r\n  const { dimension } = props;\r\n  const Agora = useAgora();\r\n  const Multiplayer = useChessMultiplayer({\r\n    Agora: Agora,\r\n  });\r\n  const {\r\n    setBoardPosition,\r\n    fen,\r\n    onDrop,\r\n    onMouseOverSquare,\r\n    onMouseOutSquare,\r\n    squareStyles,\r\n    onDragOverSquare,\r\n    onSquareClick,\r\n    onSquareRightClick,\r\n  } = useChess(Agora, Multiplayer);\r\n\r\n  // const config: Partial<Config> = {\r\n  //   fen: fen,\r\n  //   coordinates: true,\r\n  //   addPieceZIndex: true,\r\n  //   // viewOnly: viewMode,\r\n  //   disableContextMenu: false,\r\n  //   resizable: true,\r\n  //   autoCastle: true,\r\n  //   highlight: {\r\n  //     lastMove: true,\r\n  //     check: true,\r\n  //   },\r\n  //   selectable: {\r\n  //     enabled: true,\r\n  //   },\r\n  //   movable: calcMovable(),\r\n  //   draggable: calcDraggable(),\r\n  //   events: {\r\n  //     dropNewPiece: (piece: Piece, key: Key) => {\r\n  //       console.log({ piece, key });\r\n  //     },\r\n  //   },\r\n  // };\r\n  const customPieces = {\r\n    wK: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wK}\r\n        alt={\"wK\"}\r\n      />\r\n    ),\r\n    wQ: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wQ}\r\n        alt={\"wQ\"}\r\n      />\r\n    ),\r\n    wB: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wB}\r\n        alt={\"wB\"}\r\n      />\r\n    ),\r\n    wR: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wR}\r\n        alt={\"wR\"}\r\n      />\r\n    ),\r\n    wN: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wN}\r\n        alt={\"wN\"}\r\n      />\r\n    ),\r\n    wP: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wP}\r\n        alt={\"wP\"}\r\n      />\r\n    ),\r\n\r\n    bK: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bK}\r\n        alt={\"bK\"}\r\n      />\r\n    ),\r\n    bQ: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bQ}\r\n        alt={\"bQ\"}\r\n      />\r\n    ),\r\n    bB: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bB}\r\n        alt={\"bB\"}\r\n      />\r\n    ),\r\n    bR: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bR}\r\n        alt={\"bR\"}\r\n      />\r\n    ),\r\n    bN: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bN}\r\n        alt={\"bN\"}\r\n      />\r\n    ),\r\n    bP: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bP}\r\n        alt={\"bP\"}\r\n      />\r\n    ),\r\n  };\r\n  return (\r\n    <>\r\n      {/* <Chessground\r\n        width={dimension || 900}\r\n        height={dimension || 900}\r\n        config={config}\r\n      /> */}\r\n      <NativeChessboard\r\n        position={fen}\r\n        getPosition={setBoardPosition}\r\n        lightSquareStyle={{ backgroundColor: \"#E8EDF9\" }}\r\n        darkSquareStyle={{ backgroundColor: \"#B7C0D8\" }}\r\n        pieces={customPieces}\r\n        boardStyle={{\r\n          width: dimension,\r\n          height: dimension,\r\n          position: \"relative\",\r\n        }}\r\n        width={dimension}\r\n        onDrop={onDrop}\r\n        onMouseOverSquare={onMouseOverSquare}\r\n        onMouseOutSquare={onMouseOutSquare}\r\n        squareStyles={squareStyles}\r\n        onDragOverSquare={onDragOverSquare}\r\n        onSquareClick={onSquareClick}\r\n        onSquareRightClick={onSquareRightClick}\r\n        // sparePieces={true}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chessboard;\r\n","import Styled from \"styled-components\";\r\n\r\nexport const ScChessInterface = Styled.div`\r\n  display: grid;\r\n  width: 100%;\r\n  max-width: 1440px;\r\n  background: black;\r\n  grid-template-columns: 66% 37%;\r\n  grid-template-areas: \"board sidePanel\";\r\n  .board-container {\r\n    grid-area: board;\r\n    border: 10px solid rgba(255, 255, 255);\r\n  }\r\n  }\r\n  .side-panel {\r\n    grid-area: sidePanel;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: #2b2b34;\r\n    border: 2px solid rgba(255, 255, 255, 0.1);\r\n    border-radius: 0 24px 24px 0;\r\n  }\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport useAgora from \"../../hooks/useAgora\";\r\nimport Chessboard from \"../Chessboard/Chessboard\";\r\nimport { ScChessInterface } from \"../_StyledComponent/StyledComponent\";\r\n\r\ninterface Props {}\r\n\r\nconst ChessInterface = (props: Props) => {\r\n  // const Agora = useAgora();\r\n  // const AgoraChannel: RtmChannel | undefined | null = Agora.channel;\r\n  // const Multiplayer = useChessMultiplayer({\r\n  //   Agora: Agora,\r\n  // });\r\n  const [dimension, setDimension] = useState<number>();\r\n\r\n  useEffect(() => {\r\n    updateDimensions();\r\n    window.addEventListener(\"resize\", updateDimensions);\r\n\r\n    return () => window.removeEventListener(\"resize\", updateDimensions);\r\n  }, []);\r\n\r\n  const updateDimensions = () => {\r\n    setDimension(\r\n      window.document.getElementById(\"board-container\")?.clientWidth\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ScChessInterface>\r\n        <div id=\"board-container\" className=\"board-container\">\r\n          <Chessboard\r\n            dimension={dimension}\r\n            // Agora={Agora}\r\n            // Multiplayer={Multiplayer}\r\n          />\r\n        </div>\r\n        <div className=\"side-panel\"></div>\r\n      </ScChessInterface>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChessInterface;\r\n","import React from \"react\";\nimport \"./app.scss\";\nimport ChessInterface from \"./components/ChessInterface/ChessInterface\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <ChessInterface />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}