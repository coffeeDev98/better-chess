{"version":3,"sources":["utils/utils.ts","constants/chessMultiplayerMsgTypes.ts","hooks/useChess.tsx","utils/agoraUtils.ts","hooks/useAgora.tsx","hooks/useChessMultiplayer.tsx","components/_StyledComponent/StyledComponent.tsx","assets/images/chessPieces/wK.svg","assets/images/chessPieces/wQ.svg","assets/images/chessPieces/wB.svg","assets/images/chessPieces/wR.svg","assets/images/chessPieces/wN.svg","assets/images/chessPieces/wP.svg","assets/images/chessPieces/bK.svg","assets/images/chessPieces/bQ.svg","assets/images/chessPieces/bB.svg","assets/images/chessPieces/bR.svg","assets/images/chessPieces/bN.svg","assets/images/chessPieces/bP.svg","components/ChessInterface/ChessInterface.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["split","BOARD_MOVE_UPDATE","BOARD_MOVE_UNDO","Chess","require","squareStyling","pieceSquare","history","targetSquare","length","from","to","backgroundColor","useChess","Agora","Multiplayer","useState","chess","fen","dropSquareStyle","squareStyles","square","boardPosition","pgn","undoMovesArray","state","setState","useEffect","console","log","channel","on","message","jsonString","data","text","JSON","parse","type","onDrop","sourceSquare","json","move","parametersObj","undoArray","undoMove","promotion","e","piece","moves","verbose","i","len","flags","indexOf","updateBoard","setBoardPosition","position","onMouseOverSquare","squaresToHighlight","push","highlightStyles","reduce","a","c","background","borderRadius","highlightSquare","onMouseOutSquare","onDragOverSquare","boxShadow","onSquareClick","onSquareRightClick","undoMoveObj","undo","undoMoveMsg","redoMove","redoMoveObj","pop","agoraUtils","messageParser","stringify","messageType","useAgora","setChannel","client","AgoraRTM","createInstance","playerMeta","uid","Math","floor","random","toString","token","axios","get","then","res","login","newChannel","createChannel","join","playerLogin","memberId","sendChannelMessage","sendMessage","useChessMultiplayer","props","updateObject","ScChessInterface","Styled","div","ChessInterface","dimension","setDimension","updateDimensions","window","addEventListener","removeEventListener","document","getElementById","clientWidth","chessboardConfig","id","draggable","getPosition","lightSquareStyle","darkSquareStyle","pieces","wK","squareWidth","isDragging","style","width","height","src","alt","wQ","wB","wR","wN","wP","bK","bQ","bB","bR","bN","bP","boardStyle","className","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ab29ae6f.chunk.js","sourcesContent":["export const parseJSON = (jsonString: string) => JSON.parse(jsonString);\r\nexport const stringifyJSON = (jsonString: string) => JSON.stringify(jsonString);\r\n\r\nexport const styleToString = (style: any) => {\r\n  return Object.keys(style).reduce(\r\n    (acc, key) =>\r\n      acc +\r\n      key\r\n        .split(/(?=[A-Z])/)\r\n        .join(\"-\")\r\n        .toLowerCase() +\r\n      \":\" +\r\n      style[key] +\r\n      \";\",\r\n    \"\"\r\n  );\r\n};\r\n\r\nvar COLUMNS = \"abcdefgh\".split(\"\");\r\nfunction isObject(o: any) {\r\n  return Object.prototype.toString.call(o) === \"[object Object]\";\r\n}\r\nfunction isPlainObject(o: any) {\r\n  var ctor, prot;\r\n\r\n  if (isObject(o) === false) return false;\r\n\r\n  // If has modified constructor\r\n  ctor = o.constructor;\r\n  if (ctor === undefined) return true;\r\n\r\n  // If has modified prototype\r\n  prot = ctor.prototype;\r\n  if (isObject(prot) === false) return false;\r\n\r\n  // If constructor does not have an Object-specific method\r\n  if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\r\n    return false;\r\n  }\r\n\r\n  // Most likely a plain Object\r\n  return true;\r\n}\r\nfunction isString(s: any) {\r\n  return typeof s === \"string\";\r\n}\r\nfunction validSquare(square: any) {\r\n  return isString(square) && square.search(/^[a-h][1-8]$/) !== -1;\r\n}\r\nfunction validPieceCode(code: any) {\r\n  return isString(code) && code.search(/^[bw][KQRNBP]$/) !== -1;\r\n}\r\nfunction validPositionObject(pos: any) {\r\n  if (!isPlainObject(pos)) return false;\r\n\r\n  for (var i in pos) {\r\n    if (!pos.hasOwnProperty(i)) continue;\r\n\r\n    if (!validSquare(i) || !validPieceCode(pos[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n// convert bP, wK, etc code to FEN structure\r\nfunction pieceCodeToFen(piece: string) {\r\n  var pieceCodeLetters = piece.split(\"\");\r\n\r\n  // white piece\r\n  if (pieceCodeLetters[0] === \"w\") {\r\n    return pieceCodeLetters[1].toUpperCase();\r\n  }\r\n\r\n  // black piece\r\n  return pieceCodeLetters[1].toLowerCase();\r\n}\r\n// convert FEN piece code to bP, wK, etc\r\nfunction fenToPieceCode(piece: string) {\r\n  // black piece\r\n  if (piece.toLowerCase() === piece) {\r\n    return \"b\" + piece.toUpperCase();\r\n  }\r\n\r\n  // white piece\r\n  return \"w\" + piece.toUpperCase();\r\n}\r\nfunction squeezeFenEmptySquares(fen: string) {\r\n  return fen\r\n    .replace(/11111111/g, \"8\")\r\n    .replace(/1111111/g, \"7\")\r\n    .replace(/111111/g, \"6\")\r\n    .replace(/11111/g, \"5\")\r\n    .replace(/1111/g, \"4\")\r\n    .replace(/111/g, \"3\")\r\n    .replace(/11/g, \"2\");\r\n}\r\nfunction expandFenEmptySquares(fen: string) {\r\n  return fen\r\n    .replace(/8/g, \"11111111\")\r\n    .replace(/7/g, \"1111111\")\r\n    .replace(/6/g, \"111111\")\r\n    .replace(/5/g, \"11111\")\r\n    .replace(/4/g, \"1111\")\r\n    .replace(/3/g, \"111\")\r\n    .replace(/2/g, \"11\");\r\n}\r\nfunction validFen(fen: any) {\r\n  if (!isString(fen)) return false;\r\n\r\n  // cut off any move, castling, etc info from the end\r\n  // we're only interested in position information\r\n  fen = fen.replace(/ .+$/, \"\");\r\n\r\n  // expand the empty square numbers to just 1s\r\n  fen = expandFenEmptySquares(fen);\r\n\r\n  // FEN should be 8 sections separated by slashes\r\n  var chunks = fen.split(\"/\");\r\n  if (chunks.length !== 8) return false;\r\n\r\n  // check each section\r\n  for (var i = 0; i < 8; i++) {\r\n    if (chunks[i].length !== 8 || chunks[i].search(/[^kqrnbpKQRNBP1]/) !== -1) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nexport const objToFen = (obj: any) => {\r\n  if (!validPositionObject(obj)) return false;\r\n\r\n  var fen = \"\";\r\n\r\n  var currentRow = 8;\r\n  for (var i = 0; i < 8; i++) {\r\n    for (var j = 0; j < 8; j++) {\r\n      var square = COLUMNS[j] + currentRow;\r\n\r\n      // piece exists\r\n      if (obj.hasOwnProperty(square)) {\r\n        fen = fen + pieceCodeToFen(obj[square]);\r\n      } else {\r\n        // empty space\r\n        fen = fen + \"1\";\r\n      }\r\n    }\r\n\r\n    if (i !== 7) {\r\n      fen = fen + \"/\";\r\n    }\r\n\r\n    currentRow = currentRow - 1;\r\n  }\r\n\r\n  // squeeze the empty numbers together\r\n  fen = squeezeFenEmptySquares(fen);\r\n\r\n  return fen;\r\n};\r\n// convert FEN string to position object\r\n// returns false if the FEN string is invalid\r\nexport const fenToObj = (fen: any) => {\r\n  if (!validFen(fen)) return false;\r\n\r\n  // cut off any move, castling, etc info from the end\r\n  // we're only interested in position information\r\n  fen = fen.replace(/ .+$/, \"\");\r\n\r\n  var rows = fen.split(\"/\");\r\n  var position: any = {};\r\n\r\n  var currentRow = 8;\r\n  for (var i = 0; i < 8; i++) {\r\n    var row = rows[i].split(\"\");\r\n    var colIdx = 0;\r\n\r\n    // loop through each character in the FEN section\r\n    for (var j = 0; j < row.length; j++) {\r\n      // number / empty squares\r\n      if (row[j].search(/[1-8]/) !== -1) {\r\n        var numEmptySquares = parseInt(row[j], 10);\r\n        colIdx = colIdx + numEmptySquares;\r\n      } else {\r\n        // piece\r\n        var square = COLUMNS[colIdx] + currentRow;\r\n        position[square] = fenToPieceCode(row[j]);\r\n        colIdx = colIdx + 1;\r\n      }\r\n    }\r\n\r\n    currentRow = currentRow - 1;\r\n  }\r\n\r\n  return position;\r\n};\r\n","export const BOARD_MOVE_UPDATE = \"BOARD_MOVE_UPDATE\";\r\nexport const BOARD_MOVE_UNDO = \"BOARD_MOVE_UNDO\";\r\n","import { useEffect, useState } from \"react\";\r\nimport {\r\n  ChessInstance,\r\n  Move,\r\n  Piece,\r\n  PieceType,\r\n  ShortMove,\r\n  Square,\r\n} from \"chess.js\";\r\nimport {\r\n  Color,\r\n  Dests,\r\n  Key,\r\n  MoveMetadata,\r\n  Role,\r\n  SetPremoveMetadata,\r\n  Elements,\r\n} from \"chessground/types\";\r\nimport { parseJSON } from \"../utils/utils\";\r\nimport {\r\n  BOARD_MOVE_UNDO,\r\n  BOARD_MOVE_UPDATE,\r\n} from \"../constants/chessMultiplayerMsgTypes\";\r\n\r\nconst Chess = require(\"chess.js\");\r\n\r\ninterface IMovable {\r\n  free?: boolean; // all moves are valid - board editor\r\n  color?: Color | \"both\"; // color that can move. white | black | both | undefined\r\n  dests?: Dests; // valid moves. {\"a2\" [\"a3\" \"a4\"] \"b1\" [\"a3\" \"c3\"]}\r\n  showDests?: boolean; // whether to add the move-dest class on squares\r\n  events?: {\r\n    after?: (orig: Key, dest: Key, metadata: MoveMetadata) => void; // called after the move has been played\r\n    afterNewPiece?: (role: Role, key: Key, metadata: MoveMetadata) => void; // called after a new piece is dropped on the board\r\n  };\r\n  rookCastle?: boolean; // castle by moving the king to the rook\r\n}\r\n\r\ninterface IDraggable {\r\n  enabled?: boolean; // allow moves & premoves to use drag'n drop\r\n  distance?: number; // minimum distance to initiate a drag; in pixels\r\n  autoDistance?: boolean; // lets chessground set distance to zero when user drags pieces\r\n  showGhost?: boolean; // show ghost of piece being dragged\r\n  deleteOnDropOff?: boolean; // delete a piece when it is dropped off the board\r\n}\r\n\r\ninterface IPremovable {\r\n  enabled?: boolean; // allow premoves for color that can not move\r\n  showDests?: boolean; // whether to add the premove-dest class on squares\r\n  castle?: boolean; // whether to allow king castle premoves\r\n  dests?: Key[]; // premove destinations for the current selection\r\n  events?: {\r\n    set?: (orig: Key, dest: Key, metadata?: SetPremoveMetadata) => void; // called after the premove has been set\r\n    unset?: () => void; // called after the premove has been unset\r\n  };\r\n}\r\ninterface IPredroppable {\r\n  enabled?: boolean; // allow predrops for color that can not move\r\n  events?: {\r\n    set?: (role: Role, key: Key) => void; // called after the predrop has been set\r\n    unset?: () => void; // called after the predrop has been unset\r\n  };\r\n}\r\ninterface IEvents {\r\n  change?: () => void; // called after the situation changes on the board\r\n  // called after a piece has been moved.\r\n  // capturedPiece is undefined or like {color: 'white'; 'role': 'queen'}\r\n  move?: (orig: Key, dest: Key, capturedPiece?: Piece) => void;\r\n  dropNewPiece?: (piece: Piece, key: Key) => void;\r\n  select?: (key: Key) => void; // called when a square is selected\r\n  insert?: (elements: Elements) => void; // when the board DOM has been (re)inserted\r\n}\r\n\r\nconst useChess = (Agora: any, Multiplayer: any) => {\r\n  const [chess] = useState<ChessInstance>(\r\n    new Chess(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\")\r\n  );\r\n  const [state, setState] = useState<{\r\n    fen: string;\r\n    dropSquareStyle: any;\r\n    squareStyles: any;\r\n    pieceSquare: any;\r\n    square: string;\r\n    history: Move[];\r\n    boardPosition: any;\r\n    pgn: any;\r\n    undoMovesArray: Move[];\r\n  }>({\r\n    fen: \"start\",\r\n    // square styles for active drop square\r\n    dropSquareStyle: {},\r\n    // custom square styles\r\n    squareStyles: {},\r\n    // square with the currently clicked piece\r\n    pieceSquare: \"\",\r\n    // currently clicked square\r\n    square: \"\",\r\n    // array of past game moves\r\n    history: [],\r\n    boardPosition: {},\r\n    pgn: [],\r\n    undoMovesArray: [],\r\n  });\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"PGN: \", state.pgn);\r\n  // }, [state.pgn]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"UNDO MOVES: \", state.undoMovesArray);\r\n  }, [state.undoMovesArray]);\r\n\r\n  useEffect(() => {\r\n    if (Agora.channel) {\r\n      Agora.channel?.on(\"ChannelMessage\", (message: any) => {\r\n        const data = parseJSON(message.text);\r\n        // console.log(\"MESSAGE DATA: \", data);\r\n        switch (data.type) {\r\n          case BOARD_MOVE_UPDATE:\r\n            onDrop({\r\n              sourceSquare: data.json.move.from,\r\n              targetSquare: data.json.move.to,\r\n            });\r\n            break;\r\n          case BOARD_MOVE_UNDO:\r\n            const parametersObj = {\r\n              chess,\r\n              state,\r\n              setState,\r\n              undoArray: data.json.undoArray,\r\n            };\r\n            Multiplayer.undoMove(parametersObj);\r\n            break;\r\n          default:\r\n            console.log(\"INVALID OPERATION\");\r\n            break;\r\n        }\r\n      });\r\n    }\r\n  }, [Agora.channel]);\r\n\r\n  const setBoardPosition = (position: any) => {\r\n    console.log(\"BOARD POSITION: \", position);\r\n    setState({\r\n      ...state,\r\n      boardPosition: position,\r\n    });\r\n  };\r\n\r\n  const promotion = (\r\n    sourceSquare: Square,\r\n    targetSquare: Square,\r\n    e?: Exclude<PieceType, \"p\" | \"k\">\r\n  ) => {\r\n    const from = sourceSquare;\r\n    const to = targetSquare;\r\n    chess.move({ from, to, promotion: e });\r\n    setState({\r\n      ...state,\r\n      fen: chess.fen(),\r\n    });\r\n    // hidePromotionModal();\r\n  };\r\n\r\n  const removeHighlightSquare = () => {\r\n    setState(({ pieceSquare, history }) => ({\r\n      ...state,\r\n      squareStyles: squareStyling({ pieceSquare, history }),\r\n    }));\r\n  };\r\n\r\n  // show possible moves\r\n  const highlightSquare = (\r\n    sourceSquare: Square,\r\n    squaresToHighlight: string[]\r\n  ) => {\r\n    const highlightStyles = [sourceSquare, ...squaresToHighlight].reduce(\r\n      (a, c) => {\r\n        return {\r\n          ...a,\r\n          ...{\r\n            [c]: {\r\n              background:\r\n                \"radial-gradient(circle, rgb(123,97,255,0.5) 20%, transparent 0%)\",\r\n              borderRadius: \"50%\",\r\n            },\r\n          },\r\n          ...squareStyling({\r\n            history: state.history,\r\n            pieceSquare: state.pieceSquare,\r\n          }),\r\n        };\r\n      },\r\n      {}\r\n    );\r\n\r\n    setState(({ squareStyles }) => ({\r\n      ...state,\r\n      squareStyles: { ...squareStyles, ...highlightStyles },\r\n    }));\r\n  };\r\n\r\n  const onMouseOutSquare = (square: Square) => removeHighlightSquare();\r\n\r\n  const onMouseOverSquare = (square: Square) => {\r\n    // get list of possible moves for this square\r\n    let moves = chess.moves({\r\n      square: square,\r\n      verbose: true,\r\n    });\r\n\r\n    // exit if there are no moves available for this square\r\n    if (moves.length === 0) return;\r\n\r\n    let squaresToHighlight = [];\r\n    for (var i = 0; i < moves.length; i++) {\r\n      squaresToHighlight.push(moves[i].to);\r\n    }\r\n    // console.log(\"SQUARESTOHIGHLIGHT: \", squaresToHighlight);\r\n    highlightSquare(square, squaresToHighlight);\r\n  };\r\n\r\n  const onDrop = ({\r\n    sourceSquare,\r\n    targetSquare,\r\n    piece,\r\n  }: {\r\n    sourceSquare: Square;\r\n    targetSquare: Square;\r\n    piece?: string;\r\n  }) => {\r\n    // see if the move is legal\r\n    let move = chess.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      // promotion: \"q\", // always promote to a queen for example simplicity\r\n    });\r\n    // console.log(\"MOVE: \", move);\r\n    const moves = chess.moves({ verbose: true });\r\n    for (let i = 0, len = moves.length; i < len; i++) {\r\n      /* eslint-disable-line */\r\n      if (\r\n        moves[i].flags.indexOf(\"p\") !== -1 &&\r\n        moves[i].from === sourceSquare\r\n      ) {\r\n        // setPendingMove([sourceSquare, targetSquare]);\r\n        // console.log(\"opening promotional modal\");\r\n        promotion(sourceSquare, targetSquare, \"r\");\r\n        // showPromotionModal();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // illegal move\r\n    if (move === null) return;\r\n    setState(({ history, pieceSquare }) => ({\r\n      ...state,\r\n      fen: chess.fen(),\r\n      pgn: chess.pgn()?.split(/\\d\\./),\r\n      history: chess.history({ verbose: true }),\r\n      squareStyles: squareStyling({ pieceSquare, history }),\r\n    }));\r\n\r\n    Multiplayer.updateBoard(move);\r\n  };\r\n\r\n  const onSquareClick = (square: Square) => {\r\n    setState(({ history }) => ({\r\n      ...state,\r\n      squareStyles: squareStyling({ pieceSquare: square, history }),\r\n      pieceSquare: square,\r\n    }));\r\n    let move = chess.move({\r\n      from: state.pieceSquare,\r\n      to: square,\r\n      // promotion: \"q\", // always promote to a queen for example simplicity\r\n    });\r\n\r\n    const moves = chess.moves({ verbose: true });\r\n    for (let i = 0, len = moves.length; i < len; i++) {\r\n      /* eslint-disable-line */\r\n      if (\r\n        moves[i].flags.indexOf(\"p\") !== -1 &&\r\n        moves[i].from === state.pieceSquare\r\n      ) {\r\n        // setPendingMove([state.pieceSquare, targetSquare]);\r\n        // console.log(\"opening promotional modal\");\r\n        promotion(state.pieceSquare, square, \"r\");\r\n        // showPromotionModal();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // illegal move\r\n    if (move === null) return;\r\n\r\n    setState({\r\n      ...state,\r\n      fen: chess.fen(),\r\n      pgn: chess.pgn()?.split(/\\d\\./),\r\n      history: chess.history({ verbose: true }),\r\n      pieceSquare: \"\",\r\n    });\r\n    Multiplayer.updateBoard(move);\r\n  };\r\n\r\n  // central squares get diff dropSquareStyles\r\n  const onDragOverSquare = (square: Square) => {\r\n    setState({\r\n      ...state,\r\n      dropSquareStyle:\r\n        square === \"e4\" || square === \"d4\" || square === \"e5\" || square === \"d5\"\r\n          ? { backgroundColor: \"cornFlowerBlue\" }\r\n          : { boxShadow: \"inset 0 0 1px 4px rgb(255, 255, 0)\" },\r\n    });\r\n  };\r\n\r\n  const onSquareRightClick = (square: Square) =>\r\n    setState({\r\n      ...state,\r\n      squareStyles: { [square]: { backgroundColor: \"deepPink\" } },\r\n    });\r\n\r\n  const undoMove = () => {\r\n    const undoMoveObj = chess.undo();\r\n    if (undoMoveObj) {\r\n      setState({\r\n        ...state,\r\n        fen: chess.fen(),\r\n        undoMovesArray: [...state.undoMovesArray, undoMoveObj],\r\n      });\r\n      Multiplayer.undoMoveMsg([...state.undoMovesArray, undoMoveObj]);\r\n    }\r\n  };\r\n  const redoMove = () => {\r\n    if (state.undoMovesArray.length === 0) return;\r\n    const redoMoveObj: Move | undefined = state.undoMovesArray.pop();\r\n    console.log(\"REDO: \", redoMoveObj);\r\n    if (redoMoveObj) {\r\n      const move = chess.move(redoMoveObj);\r\n      console.log(\"REDONE: \", move);\r\n      if (move !== null) {\r\n        setState(({ history, pieceSquare }) => ({\r\n          ...state,\r\n          fen: chess.fen(),\r\n          pgn: chess.pgn()?.split(/\\d\\./),\r\n          history: chess.history({ verbose: true }),\r\n          squareStyles: squareStyling({ pieceSquare, history }),\r\n          // undoMovesArray: ,\r\n        }));\r\n\r\n        Multiplayer.updateBoard(move);\r\n      }\r\n    }\r\n  };\r\n\r\n  return {\r\n    setBoardPosition,\r\n    fen: state.fen,\r\n    pgn: state.pgn,\r\n    onDrop,\r\n    onMouseOverSquare,\r\n    onMouseOutSquare,\r\n    squareStyles: state.squareStyles,\r\n    onDragOverSquare,\r\n    onSquareClick,\r\n    onSquareRightClick,\r\n    undoMove,\r\n    redoMove,\r\n  };\r\n};\r\n\r\nconst squareStyling = ({\r\n  pieceSquare,\r\n  history,\r\n}: {\r\n  pieceSquare: any;\r\n  history: any;\r\n}) => {\r\n  const sourceSquare = history.length && history[history.length - 1].from;\r\n  const targetSquare = history.length && history[history.length - 1].to;\r\n\r\n  return {\r\n    [pieceSquare]: { backgroundColor: \"rgba(123,97,255,0.5)\" },\r\n    // ...(history.length && {\r\n    //   [sourceSquare]: {\r\n    //     backgroundColor: \"rgba(123,97,255,0.5)\",\r\n    //   },\r\n    // }),\r\n    ...(history.length && {\r\n      [targetSquare]: {\r\n        backgroundColor: \"rgba(123,97,255,0.5)\",\r\n      },\r\n    }),\r\n  };\r\n};\r\n\r\nexport default useChess;\r\n\r\n// To show promotional Modal or not\r\n// const showPromotionModal = () => setPromotionModal(true);\r\n// const hidePromotionModal = () => setPromotionModal(false);\r\n\r\n// const handleMove = (move: ShortMove) => {\r\n//   const moves = chess.moves({ verbose: true });\r\n\r\n//   for (let i = 0, len = moves.length; i < len; i++) {\r\n//     /* eslint-disable-line */\r\n//     if (moves[i].flags.indexOf(\"p\") !== -1 && moves[i].from === move.from) {\r\n//       setPendingMove([move.from, move.to]);\r\n//       // showPromotionModal();\r\n//       return;\r\n//     }\r\n//   }\r\n//   const moveVerbose = chess.move(move);\r\n//   if (moveVerbose) {\r\n//     setFen(chess.fen());\r\n//     Multiplayer.updateBoard(move);\r\n//   }\r\n// };\r\n\r\n// const calcMovable = (): IMovable => {\r\n//   const dests = new Map();\r\n//   chess.SQUARES.forEach((s) => {\r\n//     const ms = chess.moves({ square: s, verbose: true });\r\n//     if (ms.length)\r\n//       dests.set(\r\n//         s,\r\n//         ms.map((m) => m.to)\r\n//       );\r\n//   });\r\n\r\n//   return {\r\n//     free: false,\r\n//     dests: dests,\r\n//     showDests: true,\r\n//     events: {\r\n//       after: (from: any, to: any, metadeta: any) => {\r\n//         // console.log(\"metadata: \", { from, to, metadeta });\r\n//         return handleMove({ from: from, to: to });\r\n//       },\r\n//       afterNewPiece: (role: Role, key: Key, metaData: MoveMetadata) => {\r\n//         console.log(\"afterNewPiece: \", role, key, metaData);\r\n//       },\r\n//     },\r\n//     rookCastle: true,\r\n//   };\r\n// };\r\n\r\n// const calcDraggable = (): IDraggable => ({\r\n//   enabled: true,\r\n//   showGhost: false,\r\n//   deleteOnDropOff: false,\r\n// });\r\n","import { stringifyJSON } from \"./utils\";\r\nimport { RtmTextMessage } from \"agora-rtm-sdk\";\r\n\r\nconst messageParser = (json: any): RtmTextMessage => ({\r\n  text: stringifyJSON(json),\r\n  messageType: \"TEXT\",\r\n});\r\n\r\nconst agoraUtils = {\r\n  messageParser,\r\n};\r\n\r\nexport default agoraUtils;\r\n","import AgoraRTM, {\r\n  RtmChannel,\r\n  RtmClient,\r\n  RtmMessage,\r\n  RtmTextMessage,\r\n} from \"agora-rtm-sdk\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { parseJSON } from \"../utils/utils\";\r\nimport agoraUtils from \"../utils/agoraUtils\";\r\n\r\nconst useAgora = () => {\r\n  const [channel, setChannel] = useState<RtmChannel | null>(null);\r\n  const appId = \"f4b36b6c897e41bfaa3904d75da40777\";\r\n  const client: RtmClient | null = AgoraRTM.createInstance(appId);\r\n  let playerMeta = {\r\n    uid: (Math.floor(Math.random() * 90000) + 10000).toString(),\r\n    token: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    const playerLogin = async () => {\r\n      axios\r\n        .get(\r\n          `https://agoratokenserver-demo.herokuapp.com/access_token?channel=test&uid=${playerMeta.uid}`\r\n        )\r\n        .then((res: any) => {\r\n          console.log(res);\r\n          playerMeta.token = res.data?.token || \"\";\r\n          // console.log(\"LOGIN OPTIONS: \", playerMeta);\r\n          client.login(playerMeta).then(() => {\r\n            console.log(\"Login successful\");\r\n            const newChannel = client.createChannel(\"test\");\r\n            newChannel.join();\r\n            setChannel(newChannel);\r\n          });\r\n        });\r\n    };\r\n\r\n    playerLogin().then(() => {\r\n      console.log(\"integrations successful\");\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (channel) {\r\n      // channel?.on(\"ChannelMessage\", (message: any) => {\r\n      //   const data = parseJSON(message.text);\r\n      //   console.log(\"MESSAGE DATA: \", data);\r\n      // });\r\n\r\n      channel?.on(\"MemberJoined\", (memberId) => {\r\n        console.log(\"New member joined: \", memberId);\r\n      });\r\n      channel?.on(\"MemberLeft\", (memberId) => {\r\n        console.log(\"Member left: \", memberId);\r\n      });\r\n    }\r\n  }, [channel]);\r\n\r\n  const sendChannelMessage = (data: any, type: string) => {\r\n    const message = {\r\n      uid: playerMeta.uid,\r\n      json: data || {},\r\n      type: type,\r\n    };\r\n    console.log(agoraUtils.messageParser(message));\r\n    channel?.sendMessage(agoraUtils.messageParser(message)).then(() => {});\r\n  };\r\n\r\n  return { channel, playerMeta, sendChannelMessage };\r\n};\r\n\r\nexport default useAgora;\r\n","import { ChessInstance, Move, ShortMove } from \"chess.js\";\r\nimport React, { useEffect } from \"react\";\r\nimport {\r\n  BOARD_MOVE_UNDO,\r\n  BOARD_MOVE_UPDATE,\r\n} from \"../constants/chessMultiplayerMsgTypes\";\r\nimport { IMultiplayerProps } from \"../types/chessMultiplayer\";\r\nimport { parseJSON } from \"../utils/utils\";\r\n\r\ninterface IProps {\r\n  Agora: any;\r\n}\r\n\r\nconst useChessMultiplayer = (props: IProps) => {\r\n  const { Agora } = props;\r\n\r\n  const updateBoard = (move: ShortMove) => {\r\n    const updateObject = {\r\n      move: move,\r\n    };\r\n    Agora?.sendChannelMessage(updateObject, BOARD_MOVE_UPDATE);\r\n  };\r\n  const undoMoveMsg = (undoArray: Move[]) => {\r\n    const updateObject = {\r\n      undoArray: undoArray,\r\n    };\r\n    Agora?.sendChannelMessage(updateObject, BOARD_MOVE_UNDO);\r\n  };\r\n  const undoMove = ({\r\n    chess,\r\n    state,\r\n    setState,\r\n    undoArray,\r\n  }: {\r\n    chess: ChessInstance;\r\n    state: any;\r\n    setState: any;\r\n    undoArray: Move[];\r\n  }) => {\r\n    const undoMoveObj = chess.undo();\r\n    if (undoMoveObj) {\r\n      setState({\r\n        ...state,\r\n        fen: chess.fen(),\r\n        undoMovesArray: undoArray,\r\n      });\r\n    }\r\n  };\r\n\r\n  return { updateBoard, undoMoveMsg, undoMove };\r\n};\r\n\r\nexport default useChessMultiplayer;\r\n","import Styled from \"styled-components\";\r\n\r\nexport const ScChessInterface = Styled.div`\r\n  display: grid;\r\n  width: 1000px;\r\n  height: 600px;\r\n  max-width: 1440px;\r\n  background: black;\r\n  grid-template-columns: 66% 37%;\r\n  grid-template-areas: \"board sidePanel\";\r\n  .board-container {\r\n    position:relative;\r\n    grid-area: board;\r\n    border: 10px solid rgba(255, 255, 255);\r\n\r\n    div { \r\n      div[class$=\"-spare-pieces\"]{\r\n        position: absolute;\r\n        width: 536px;\r\n        display: flex;\r\n        justify-content: space-around;\r\n          div{\r\n            width: 100%;\r\n            img {\r\n              width: 45px ;\r\n              height: 47.28px ;\r\n            }\r\n        }\r\n      }\r\n      .black-spare-pieces {\r\n        left: 930px;\r\n        /* background:grey; */\r\n      }\r\n      .white-spare-pieces{\r\n        left: 930px;\r\n        bottom: 697.5px;\r\n        /* background:grey; */\r\n        \r\n      }\r\n    }\r\n  }\r\n  \r\n  \r\n  .side-panel {\r\n    grid-area: sidePanel;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: #2b2b34;\r\n    border: 2px solid rgba(255, 255, 255, 0.1);\r\n    border-radius: 0 24px 24px 0;\r\n  }\r\n`;\r\n\r\nexport const ScChessPgn = Styled.div`\r\n  color: white;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/wK.3b342df8.svg\";","export default __webpack_public_path__ + \"static/media/wQ.785db365.svg\";","export default __webpack_public_path__ + \"static/media/wB.56f72474.svg\";","export default __webpack_public_path__ + \"static/media/wR.33cf0258.svg\";","export default __webpack_public_path__ + \"static/media/wN.d5fa39eb.svg\";","export default __webpack_public_path__ + \"static/media/wP.5f74a9fe.svg\";","export default __webpack_public_path__ + \"static/media/bK.e57316c7.svg\";","export default __webpack_public_path__ + \"static/media/bQ.c21470b8.svg\";","export default __webpack_public_path__ + \"static/media/bB.1f023e3e.svg\";","export default __webpack_public_path__ + \"static/media/bR.2724e583.svg\";","export default __webpack_public_path__ + \"static/media/bN.a46c4723.svg\";","export default __webpack_public_path__ + \"static/media/bP.d9262a65.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport NativeChessboard from \"chessboardjsx\";\r\nimport useChess from \"../../hooks/useChess\";\r\nimport useAgora from \"../../hooks/useAgora\";\r\nimport useChessMultiplayer from \"../../hooks/useChessMultiplayer\";\r\nimport {\r\n  ScChessPgn,\r\n  ScChessInterface,\r\n} from \"../_StyledComponent/StyledComponent\";\r\nimport wK from \"../../assets/images/chessPieces/wK.svg\";\r\nimport wQ from \"../../assets/images/chessPieces/wQ.svg\";\r\nimport wB from \"../../assets/images/chessPieces/wB.svg\";\r\nimport wR from \"../../assets/images/chessPieces/wR.svg\";\r\nimport wN from \"../../assets/images/chessPieces/wN.svg\";\r\nimport wP from \"../../assets/images/chessPieces/wP.svg\";\r\nimport bK from \"../../assets/images/chessPieces/bK.svg\";\r\nimport bQ from \"../../assets/images/chessPieces/bQ.svg\";\r\nimport bB from \"../../assets/images/chessPieces/bB.svg\";\r\nimport bR from \"../../assets/images/chessPieces/bR.svg\";\r\nimport bN from \"../../assets/images/chessPieces/bN.svg\";\r\nimport bP from \"../../assets/images/chessPieces/bP.svg\";\r\nimport useBoardEditor from \"../../hooks/useBoardEditor\";\r\nimport { IChessboardProps } from \"../../types/chessboardTypes\";\r\n// import Chessboard from \"../Chessboard/Chessboard\";\r\n\r\ninterface Props {}\r\n\r\ninterface ICustomPieceProps {\r\n  squareWidth: number;\r\n  isDragging: boolean;\r\n}\r\n\r\nconst ChessInterface = (props: Props) => {\r\n  // const Agora = useAgora();\r\n  // const AgoraChannel: RtmChannel | undefined | null = Agora.channel;\r\n  // const Multiplayer = useChessMultiplayer({\r\n  //   Agora: Agora,\r\n  // });\r\n  const [dimension, setDimension] = useState<number>();\r\n  // const [undoMove, setUndoMove] = useState<boolean>(false);\r\n  const [editorMode, setEditorMode] = useState<boolean>(false);\r\n  const Agora = useAgora();\r\n  const Multiplayer = useChessMultiplayer({\r\n    Agora: Agora,\r\n  });\r\n  const {\r\n    setBoardPosition,\r\n    fen,\r\n    pgn,\r\n    onDrop,\r\n    onMouseOverSquare,\r\n    onMouseOutSquare,\r\n    squareStyles,\r\n    onDragOverSquare,\r\n    onSquareClick,\r\n    onSquareRightClick,\r\n    undoMove,\r\n    redoMove,\r\n  } = useChess(Agora, Multiplayer);\r\n\r\n  // const { fen, onDrop } = useBoardEditor();\r\n\r\n  useEffect(() => {\r\n    updateDimensions();\r\n    window.addEventListener(\"resize\", updateDimensions);\r\n\r\n    return () => window.removeEventListener(\"resize\", updateDimensions);\r\n  }, []);\r\n\r\n  // const toggleUndoMove = () => setUndoMove(!undoMove);\r\n\r\n  const updateDimensions = () => {\r\n    setDimension(\r\n      window.document.getElementById(\"board-container\")?.clientWidth\r\n    );\r\n  };\r\n\r\n  const customPieces = {\r\n    wK: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wK}\r\n        alt={\"wK\"}\r\n      />\r\n    ),\r\n    wQ: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wQ}\r\n        alt={\"wQ\"}\r\n      />\r\n    ),\r\n    wB: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wB}\r\n        alt={\"wB\"}\r\n      />\r\n    ),\r\n    wR: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wR}\r\n        alt={\"wR\"}\r\n      />\r\n    ),\r\n    wN: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wN}\r\n        alt={\"wN\"}\r\n      />\r\n    ),\r\n    wP: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={wP}\r\n        alt={\"wP\"}\r\n      />\r\n    ),\r\n\r\n    bK: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bK}\r\n        alt={\"bK\"}\r\n      />\r\n    ),\r\n    bQ: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bQ}\r\n        alt={\"bQ\"}\r\n      />\r\n    ),\r\n    bB: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bB}\r\n        alt={\"bB\"}\r\n      />\r\n    ),\r\n    bR: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bR}\r\n        alt={\"bR\"}\r\n      />\r\n    ),\r\n    bN: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bN}\r\n        alt={\"bN\"}\r\n      />\r\n    ),\r\n    bP: ({ squareWidth, isDragging }: ICustomPieceProps) => (\r\n      <img\r\n        style={{\r\n          width: squareWidth,\r\n          height: squareWidth,\r\n        }}\r\n        src={bP}\r\n        alt={\"bP\"}\r\n      />\r\n    ),\r\n  };\r\n\r\n  let chessboardConfig: Partial<IChessboardProps> = {\r\n    id: \"board-0\",\r\n    position: fen,\r\n    draggable: true,\r\n    getPosition: setBoardPosition,\r\n    lightSquareStyle: { backgroundColor: \"#E8EDF9\" },\r\n    darkSquareStyle: { backgroundColor: \"#B7C0D8\" },\r\n    pieces: customPieces,\r\n    boardStyle: {\r\n      width: dimension,\r\n      height: dimension,\r\n      position: \"relative\",\r\n    },\r\n    width: dimension,\r\n    onDrop: onDrop,\r\n    onMouseOverSquare: onMouseOverSquare,\r\n    onMouseOutSquare: onMouseOutSquare,\r\n    squareStyles: squareStyles,\r\n    onDragOverSquare: onDragOverSquare,\r\n    onSquareClick: onSquareClick,\r\n    onSquareRightClick: onSquareRightClick,\r\n    // sparePieces={true}\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ScChessInterface>\r\n        <div id=\"board-container\" className=\"board-container\">\r\n          <NativeChessboard {...chessboardConfig} />\r\n        </div>\r\n        <div className=\"side-panel\">\r\n          <h1 onClick={undoMove}>Undo</h1>\r\n          <h1 onClick={redoMove}>Redo</h1>\r\n          <div></div>\r\n          {/* <ScChessPgn> */}\r\n          {/* {pgn.map?.(\r\n            (move: string, index: number) =>\r\n              index !== 0 && <ScChessPgn>{`${index}. ${move}`}</ScChessPgn>\r\n          )} */}\r\n          {/* </ScChessPgn> */}\r\n        </div>\r\n      </ScChessInterface>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChessInterface;\r\n","import React from \"react\";\nimport \"./app.scss\";\nimport ChessInterface from \"./components/ChessInterface/ChessInterface\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <ChessInterface />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}